
FreeRTOS_GPS_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e04  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c8c  08011f94  08011f94  00012f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012c20  08012c20  000142e8  2**0
                  CONTENTS
  4 .ARM          00000008  08012c20  08012c20  00013c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012c28  08012c28  000142e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012c28  08012c28  00013c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012c2c  08012c2c  00013c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  20000000  08012c30  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011378  200002e8  08012f18  000142e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20011660  08012f18  00014660  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000142e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e9e5  00000000  00000000  00014318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000075c1  00000000  00000000  00042cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025f0  00000000  00000000  0004a2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d2f  00000000  00000000  0004c8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c943  00000000  00000000  0004e5df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035a96  00000000  00000000  0007af22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e54a2  00000000  00000000  000b09b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00195e5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a988  00000000  00000000  00195ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001a0828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e8 	.word	0x200002e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011f7c 	.word	0x08011f7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002ec 	.word	0x200002ec
 80001cc:	08011f7c 	.word	0x08011f7c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <toggle_led>:
* @brief Zet een kleurenledje aan en uit.
* @param color De kleur.
* @return void.
*/
void toggle_led (uint32_t color)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, color);   // turns led on or off
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	4619      	mov	r1, r3
 80005ba:	4808      	ldr	r0, [pc, #32]	@ (80005dc <toggle_led+0x30>)
 80005bc:	f002 ff9d 	bl	80034fa <HAL_GPIO_TogglePin>
	osDelay(20);
 80005c0:	2014      	movs	r0, #20
 80005c2:	f00b fd25 	bl	800c010 <osDelay>
	HAL_GPIO_TogglePin(GPIOD, color);   // turns led on or off
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	4619      	mov	r1, r3
 80005cc:	4803      	ldr	r0, [pc, #12]	@ (80005dc <toggle_led+0x30>)
 80005ce:	f002 ff94 	bl	80034fa <HAL_GPIO_TogglePin>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40020c00 	.word	0x40020c00

080005e0 <ARM_keys_IRQ>:
* @brief Deze task handelt de ARM-toets af, die ontvangen is van de ISR-handler (zie: stm32f4xx_it.c).
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void.
*/
void ARM_keys_IRQ (void *argument)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	6078      	str	r0, [r7, #4]
	unsigned int key;
	osThreadId_t hTask;

	UART_puts("\r\n"); UART_puts((char *)__func__); UART_puts(" started");
 80005e8:	4813      	ldr	r0, [pc, #76]	@ (8000638 <ARM_keys_IRQ+0x58>)
 80005ea:	f001 fc4f 	bl	8001e8c <UART_puts>
 80005ee:	4813      	ldr	r0, [pc, #76]	@ (800063c <ARM_keys_IRQ+0x5c>)
 80005f0:	f001 fc4c 	bl	8001e8c <UART_puts>
 80005f4:	4812      	ldr	r0, [pc, #72]	@ (8000640 <ARM_keys_IRQ+0x60>)
 80005f6:	f001 fc49 	bl	8001e8c <UART_puts>

	if (!(hTask = xTaskGetHandle("ARM_keys_task")))
 80005fa:	4812      	ldr	r0, [pc, #72]	@ (8000644 <ARM_keys_IRQ+0x64>)
 80005fc:	f00d fe74 	bl	800e2e8 <xTaskGetHandle>
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d102      	bne.n	800060e <ARM_keys_IRQ+0x2e>
		error_HaltOS("Err:ARM_hndle");
 8000608:	480f      	ldr	r0, [pc, #60]	@ (8000648 <ARM_keys_IRQ+0x68>)
 800060a:	f000 fb35 	bl	8000c78 <error_HaltOS>

    while (1)
	{
		// wait for ISR (EXTI0_IRQHandler()) to signal that a key is pressed
		key = xEventGroupWaitBits(hKEY_Event, 0xffff, pdTRUE, pdFALSE, portMAX_DELAY );
 800060e:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <ARM_keys_IRQ+0x6c>)
 8000610:	6818      	ldr	r0, [r3, #0]
 8000612:	f04f 33ff 	mov.w	r3, #4294967295
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2300      	movs	r3, #0
 800061a:	2201      	movs	r2, #1
 800061c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000620:	f00b fec6 	bl	800c3b0 <xEventGroupWaitBits>
 8000624:	60b8      	str	r0, [r7, #8]

		xTaskNotify(hTask, key, eSetValueWithOverwrite); // notify task2 with value
 8000626:	2300      	movs	r3, #0
 8000628:	2203      	movs	r2, #3
 800062a:	68b9      	ldr	r1, [r7, #8]
 800062c:	68f8      	ldr	r0, [r7, #12]
 800062e:	f00e fd8b 	bl	800f148 <xTaskGenericNotify>
		key = xEventGroupWaitBits(hKEY_Event, 0xffff, pdTRUE, pdFALSE, portMAX_DELAY );
 8000632:	bf00      	nop
 8000634:	e7eb      	b.n	800060e <ARM_keys_IRQ+0x2e>
 8000636:	bf00      	nop
 8000638:	08011f94 	.word	0x08011f94
 800063c:	0801297c 	.word	0x0801297c
 8000640:	08011f98 	.word	0x08011f98
 8000644:	08011fa4 	.word	0x08011fa4
 8000648:	08011fb4 	.word	0x08011fb4
 800064c:	20000314 	.word	0x20000314

08000650 <ARM_keys_task>:
* een schwung...
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen.
* @return void.
*/
void ARM_keys_task (void *argument)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	int			 i, led;

	while(TRUE)
	{
		// WAITING FOR users key
        xTaskNotifyWait (0x00,      		// Don't clear any notification bits on entry.
 8000658:	f107 020c 	add.w	r2, r7, #12
 800065c:	f04f 33ff 	mov.w	r3, #4294967295
 8000660:	f04f 31ff 	mov.w	r1, #4294967295
 8000664:	2000      	movs	r0, #0
 8000666:	f00e fd0f 	bl	800f088 <xTaskNotifyWait>
        		 	 	 0xffffffff, 		// ULONG_MAX, reset the notification value to 0 on exit.
    	                 &key, 				// Notified value.
    	                 portMAX_DELAY);  	// Block indefinitely.

	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // krijg toegang (mutex) tot leds
 800066a:	4b2a      	ldr	r3, [pc, #168]	@ (8000714 <ARM_keys_task+0xc4>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f04f 31ff 	mov.w	r1, #4294967295
 8000672:	4618      	mov	r0, r3
 8000674:	f00c fcec 	bl	800d050 <xQueueSemaphoreTake>

    	LED_put((unsigned char)key); // set 8 leds-byte to key-value
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	b2db      	uxtb	r3, r3
 800067c:	4618      	mov	r0, r3
 800067e:	f001 fbb9 	bl	8001df4 <LED_put>
	    BUZZER_put (500);
 8000682:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000686:	f001 f8d5 	bl	8001834 <BUZZER_put>
		osDelay(500);
 800068a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800068e:	f00b fcbf 	bl	800c010 <osDelay>

		UART_puts("\r\n\tARM_key pressed to leds: "); UART_putint(key);
 8000692:	4821      	ldr	r0, [pc, #132]	@ (8000718 <ARM_keys_task+0xc8>)
 8000694:	f001 fbfa 	bl	8001e8c <UART_puts>
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fc12 	bl	8001ec4 <UART_putint>

		if (Uart_debug_out & ARMKEYS_DEBUG_OUT)
 80006a0:	4b1e      	ldr	r3, [pc, #120]	@ (800071c <ARM_keys_task+0xcc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 0302 	and.w	r3, r3, #2
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d006      	beq.n	80006ba <ARM_keys_task+0x6a>
		{
			UART_puts("\r\n\tARM_key pressed to leds: "); UART_putint(key);
 80006ac:	481a      	ldr	r0, [pc, #104]	@ (8000718 <ARM_keys_task+0xc8>)
 80006ae:	f001 fbed 	bl	8001e8c <UART_puts>
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 fc05 	bl	8001ec4 <UART_putint>
		}

	    xSemaphoreGive(hLED_Sem); // geef toegang (mutex) vrij
 80006ba:	4b16      	ldr	r3, [pc, #88]	@ (8000714 <ARM_keys_task+0xc4>)
 80006bc:	6818      	ldr	r0, [r3, #0]
 80006be:	2300      	movs	r3, #0
 80006c0:	2200      	movs	r2, #0
 80006c2:	2100      	movs	r1, #0
 80006c4:	f00c fa42 	bl	800cb4c <xQueueGenericSend>

	    // tot slot, laat de gekleurde ledjes meedoen
	    // maar niet blauw, want die is ingezet voor de timer
	    // kijk naar de manier waarop de if-elses er uitzien
		for (i=0; i<3; i++)
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	e015      	b.n	80006fa <ARM_keys_task+0xaa>
		{
			led = (i==0 ? LEDRED : (i==1 ? LEDORANGE : LEDGREEN));
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d008      	beq.n	80006e6 <ARM_keys_task+0x96>
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d102      	bne.n	80006e0 <ARM_keys_task+0x90>
 80006da:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80006de:	e004      	b.n	80006ea <ARM_keys_task+0x9a>
 80006e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e4:	e001      	b.n	80006ea <ARM_keys_task+0x9a>
 80006e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ea:	613b      	str	r3, [r7, #16]
			toggle_led(led);
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff5c 	bl	80005ac <toggle_led>
		for (i=0; i<3; i++)
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	3301      	adds	r3, #1
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	2b02      	cmp	r3, #2
 80006fe:	dde6      	ble.n	80006ce <ARM_keys_task+0x7e>
	  	}
     	taskYIELD(); // done, force context switch
 8000700:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <ARM_keys_task+0xd0>)
 8000702:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	f3bf 8f4f 	dsb	sy
 800070c:	f3bf 8f6f 	isb	sy
        xTaskNotifyWait (0x00,      		// Don't clear any notification bits on entry.
 8000710:	e7a2      	b.n	8000658 <ARM_keys_task+0x8>
 8000712:	bf00      	nop
 8000714:	20000310 	.word	0x20000310
 8000718:	08011fc4 	.word	0x08011fc4
 800071c:	20000304 	.word	0x20000304
 8000720:	e000ed04 	.word	0xe000ed04

08000724 <GPS_parser>:
* @param argument, kan evt vanuit tasks gebruikt worden
* @return void
*/

void GPS_parser(void *argument)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	osDelay(100);
 800072c:	2064      	movs	r0, #100	@ 0x64
 800072e:	f00b fc6f 	bl	800c010 <osDelay>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8000732:	4805      	ldr	r0, [pc, #20]	@ (8000748 <GPS_parser+0x24>)
 8000734:	f001 fbaa 	bl	8001e8c <UART_puts>
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <GPS_parser+0x28>)
 800073a:	f001 fba7 	bl	8001e8c <UART_puts>

	while (TRUE)
	{

		osDelay(1000);
 800073e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000742:	f00b fc65 	bl	800c010 <osDelay>
 8000746:	e7fa      	b.n	800073e <GPS_parser+0x1a>
 8000748:	0801298c 	.word	0x0801298c
 800074c:	08011fe4 	.word	0x08011fe4

08000750 <UART_keys_IRQ>:
* 2. notifies/stuurt command-string naar andere task
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void UART_keys_IRQ (void *argument)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08c      	sub	sp, #48	@ 0x30
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
    char  		    buffer[QSIZE_UART];
    char		    buffer_copy[QSIZE_UART];
	int 			pos = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int             finish = FALSE;
 800075c:	2300      	movs	r3, #0
 800075e:	62bb      	str	r3, [r7, #40]	@ 0x28
	osThreadId_t    hTask;

	UART_puts((char *)__func__); UART_puts("started, enter key on terminal...\r\n");
 8000760:	4847      	ldr	r0, [pc, #284]	@ (8000880 <UART_keys_IRQ+0x130>)
 8000762:	f001 fb93 	bl	8001e8c <UART_puts>
 8000766:	4847      	ldr	r0, [pc, #284]	@ (8000884 <UART_keys_IRQ+0x134>)
 8000768:	f001 fb90 	bl	8001e8c <UART_puts>

	if (!(hTask = xTaskGetHandle("UART_menu")))
 800076c:	4846      	ldr	r0, [pc, #280]	@ (8000888 <UART_keys_IRQ+0x138>)
 800076e:	f00d fdbb 	bl	800e2e8 <xTaskGetHandle>
 8000772:	6278      	str	r0, [r7, #36]	@ 0x24
 8000774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000776:	2b00      	cmp	r3, #0
 8000778:	d102      	bne.n	8000780 <UART_keys_IRQ+0x30>
		error_HaltOS("Err:UART_hndl 0");
 800077a:	4844      	ldr	r0, [pc, #272]	@ (800088c <UART_keys_IRQ+0x13c>)
 800077c:	f000 fa7c 	bl	8000c78 <error_HaltOS>
    {
		// laat de VIC de q vullen, die per char in onze eigen string geplaatst wordt
		// tot LFEED gedrukt is of qsize-1 bereikt is.
		// nb: argument 2 is het adres waar ik het q-char in zet
		// nb: q-receive haalt gelijk de buffer leeg (q-peek niet).
		xQueueReceive(hUART_Queue, &buffer[pos], portMAX_DELAY);
 8000780:	4b43      	ldr	r3, [pc, #268]	@ (8000890 <UART_keys_IRQ+0x140>)
 8000782:	6818      	ldr	r0, [r3, #0]
 8000784:	f107 0218 	add.w	r2, r7, #24
 8000788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800078a:	4413      	add	r3, r2
 800078c:	f04f 32ff 	mov.w	r2, #4294967295
 8000790:	4619      	mov	r1, r3
 8000792:	f00c fb7b 	bl	800ce8c <xQueueReceive>

		// negeer dit char bij geen data: -1, 255, of CR of spatie
		if (buffer[pos] == 0 || buffer[pos] == -1 || buffer[pos] == 255 || buffer[pos] == CRETURN || buffer[pos] == 32)
 8000796:	f107 0218 	add.w	r2, r7, #24
 800079a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800079c:	4413      	add	r3, r2
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d06b      	beq.n	800087c <UART_keys_IRQ+0x12c>
 80007a4:	f107 0218 	add.w	r2, r7, #24
 80007a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007aa:	4413      	add	r3, r2
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2bff      	cmp	r3, #255	@ 0xff
 80007b0:	d064      	beq.n	800087c <UART_keys_IRQ+0x12c>
 80007b2:	f107 0218 	add.w	r2, r7, #24
 80007b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007b8:	4413      	add	r3, r2
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b0d      	cmp	r3, #13
 80007be:	d05d      	beq.n	800087c <UART_keys_IRQ+0x12c>
 80007c0:	f107 0218 	add.w	r2, r7, #24
 80007c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007c6:	4413      	add	r3, r2
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b20      	cmp	r3, #32
 80007cc:	d056      	beq.n	800087c <UART_keys_IRQ+0x12c>
			continue;

		//UART_putchar(buffer[pos]);  // echo

		// check of de string gesloten was of gesloten moet worden...
		if (buffer[pos] == LFEED)     // close als LF gedrukt
 80007ce:	f107 0218 	add.w	r2, r7, #24
 80007d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007d4:	4413      	add	r3, r2
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b0a      	cmp	r3, #10
 80007da:	d108      	bne.n	80007ee <UART_keys_IRQ+0x9e>
		{
			buffer[pos] = '\0';
 80007dc:	f107 0218 	add.w	r2, r7, #24
 80007e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007e2:	4413      	add	r3, r2
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
			finish = TRUE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80007ec:	e00d      	b.n	800080a <UART_keys_IRQ+0xba>

		}
		else if (pos == QSIZE_UART - 2) // close if end of buf
 80007ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007f0:	2b08      	cmp	r3, #8
 80007f2:	d10a      	bne.n	800080a <UART_keys_IRQ+0xba>
		{
			buffer[++pos] = '\0';       // first, skip to last position, then close string
 80007f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007f6:	3301      	adds	r3, #1
 80007f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007fa:	f107 0218 	add.w	r2, r7, #24
 80007fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000800:	4413      	add	r3, r2
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
			finish = TRUE;
 8000806:	2301      	movs	r3, #1
 8000808:	62bb      	str	r3, [r7, #40]	@ 0x28
		}

		if (finish)
 800080a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800080c:	2b00      	cmp	r3, #0
 800080e:	d031      	beq.n	8000874 <UART_keys_IRQ+0x124>
		{
			// de volgende taak krijgt een copy van de string
			// mijn eigen buffer kan zo gelijk weer gevuld worden door de ISR
			strcpy(buffer_copy, buffer);
 8000810:	f107 0218 	add.w	r2, r7, #24
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	4611      	mov	r1, r2
 800081a:	4618      	mov	r0, r3
 800081c:	f010 fcb3 	bl	8011186 <strcpy>
			memset(buffer, 0, QSIZE_UART); // clear original buffer
 8000820:	f107 0318 	add.w	r3, r7, #24
 8000824:	220a      	movs	r2, #10
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f010 fb48 	bl	8010ebe <memset>
			finish = FALSE;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	@ 0x28
			pos = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	62fb      	str	r3, [r7, #44]	@ 0x2c

			xTaskNotify(hTask, buffer_copy, eSetValueWithOverwrite); // notify task2 with copy
 8000836:	f107 010c 	add.w	r1, r7, #12
 800083a:	2300      	movs	r3, #0
 800083c:	2203      	movs	r2, #3
 800083e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000840:	f00e fc82 	bl	800f148 <xTaskGenericNotify>

			if (Uart_debug_out & UART_DEBUG_OUT)
 8000844:	4b13      	ldr	r3, [pc, #76]	@ (8000894 <UART_keys_IRQ+0x144>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f003 0304 	and.w	r3, r3, #4
 800084c:	2b00      	cmp	r3, #0
 800084e:	d097      	beq.n	8000780 <UART_keys_IRQ+0x30>
			{
				UART_puts("\n\r"); UART_puts((char *)__func__);
 8000850:	4811      	ldr	r0, [pc, #68]	@ (8000898 <UART_keys_IRQ+0x148>)
 8000852:	f001 fb1b 	bl	8001e8c <UART_puts>
 8000856:	480a      	ldr	r0, [pc, #40]	@ (8000880 <UART_keys_IRQ+0x130>)
 8000858:	f001 fb18 	bl	8001e8c <UART_puts>
				UART_puts(": UART_menu notified with "); UART_puts(buffer_copy);
 800085c:	480f      	ldr	r0, [pc, #60]	@ (800089c <UART_keys_IRQ+0x14c>)
 800085e:	f001 fb15 	bl	8001e8c <UART_puts>
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	4618      	mov	r0, r3
 8000868:	f001 fb10 	bl	8001e8c <UART_puts>
				UART_puts("\r\n");
 800086c:	480c      	ldr	r0, [pc, #48]	@ (80008a0 <UART_keys_IRQ+0x150>)
 800086e:	f001 fb0d 	bl	8001e8c <UART_puts>
 8000872:	e785      	b.n	8000780 <UART_keys_IRQ+0x30>
			}
		}
		else
			pos++;
 8000874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000876:	3301      	adds	r3, #1
 8000878:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800087a:	e781      	b.n	8000780 <UART_keys_IRQ+0x30>
			continue;
 800087c:	bf00      	nop
		xQueueReceive(hUART_Queue, &buffer[pos], portMAX_DELAY);
 800087e:	e77f      	b.n	8000780 <UART_keys_IRQ+0x30>
 8000880:	08012998 	.word	0x08012998
 8000884:	0801203c 	.word	0x0801203c
 8000888:	08011ff0 	.word	0x08011ff0
 800088c:	08012060 	.word	0x08012060
 8000890:	20000308 	.word	0x20000308
 8000894:	20000304 	.word	0x20000304
 8000898:	08012020 	.word	0x08012020
 800089c:	08012070 	.word	0x08012070
 80008a0:	08012038 	.word	0x08012038

080008a4 <UART_menu>:
* geinterpreteerd.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void UART_menu (void *argument)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	char   *s;
	char   *tok = ",";  // token if command is more than 1 char
 80008ac:	4bab      	ldr	r3, [pc, #684]	@ (8000b5c <UART_menu+0x2b8>)
 80008ae:	61fb      	str	r3, [r7, #28]
	int     val1, val2;

	UART_puts((char *)__func__); UART_puts("started\n\r");
 80008b0:	48ab      	ldr	r0, [pc, #684]	@ (8000b60 <UART_menu+0x2bc>)
 80008b2:	f001 faeb 	bl	8001e8c <UART_puts>
 80008b6:	48ab      	ldr	r0, [pc, #684]	@ (8000b64 <UART_menu+0x2c0>)
 80008b8:	f001 fae8 	bl	8001e8c <UART_puts>

	while (TRUE)
	{
		// wacht op de string; let op de cast van (unsigned long) naar (char *)!
		// want de waarde die ik terug krijg is een pointer.
		s = (char *)ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80008bc:	f04f 31ff 	mov.w	r1, #4294967295
 80008c0:	2001      	movs	r0, #1
 80008c2:	f00e fb95 	bl	800eff0 <ulTaskNotifyTake>
 80008c6:	4603      	mov	r3, r0
 80008c8:	61bb      	str	r3, [r7, #24]

		// check het eerste (en vaak enige) karakter van de inkomende command-string
		// toupper() zorgt ervoor dat het eerste karakter hoofdletter wordt, zo hoef ik niet op kleine
		// letters te checken.
		switch (toupper((unsigned char)s[0]))
 80008ca:	69bb      	ldr	r3, [r7, #24]
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	75fb      	strb	r3, [r7, #23]
 80008d0:	7dfb      	ldrb	r3, [r7, #23]
 80008d2:	3301      	adds	r3, #1
 80008d4:	4aa4      	ldr	r2, [pc, #656]	@ (8000b68 <UART_menu+0x2c4>)
 80008d6:	4413      	add	r3, r2
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	f003 0303 	and.w	r3, r3, #3
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d102      	bne.n	80008e8 <UART_menu+0x44>
 80008e2:	7dfb      	ldrb	r3, [r7, #23]
 80008e4:	3b20      	subs	r3, #32
 80008e6:	e000      	b.n	80008ea <UART_menu+0x46>
 80008e8:	7dfb      	ldrb	r3, [r7, #23]
 80008ea:	3b30      	subs	r3, #48	@ 0x30
 80008ec:	2b24      	cmp	r3, #36	@ 0x24
 80008ee:	d84d      	bhi.n	800098c <UART_menu+0xe8>
 80008f0:	a201      	add	r2, pc, #4	@ (adr r2, 80008f8 <UART_menu+0x54>)
 80008f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f6:	bf00      	nop
 80008f8:	0800099b 	.word	0x0800099b
 80008fc:	080009d7 	.word	0x080009d7
 8000900:	08000a03 	.word	0x08000a03
 8000904:	08000a2f 	.word	0x08000a2f
 8000908:	08000a5b 	.word	0x08000a5b
 800090c:	08000a87 	.word	0x08000a87
 8000910:	0800098d 	.word	0x0800098d
 8000914:	0800098d 	.word	0x0800098d
 8000918:	0800098d 	.word	0x0800098d
 800091c:	0800098d 	.word	0x0800098d
 8000920:	0800098d 	.word	0x0800098d
 8000924:	0800098d 	.word	0x0800098d
 8000928:	0800098d 	.word	0x0800098d
 800092c:	0800098d 	.word	0x0800098d
 8000930:	0800098d 	.word	0x0800098d
 8000934:	0800098d 	.word	0x0800098d
 8000938:	0800098d 	.word	0x0800098d
 800093c:	0800098d 	.word	0x0800098d
 8000940:	0800098d 	.word	0x0800098d
 8000944:	0800098d 	.word	0x0800098d
 8000948:	08000ab3 	.word	0x08000ab3
 800094c:	0800098d 	.word	0x0800098d
 8000950:	0800098d 	.word	0x0800098d
 8000954:	0800098d 	.word	0x0800098d
 8000958:	0800098d 	.word	0x0800098d
 800095c:	0800098d 	.word	0x0800098d
 8000960:	0800098d 	.word	0x0800098d
 8000964:	0800098d 	.word	0x0800098d
 8000968:	0800098d 	.word	0x0800098d
 800096c:	08000ad7 	.word	0x08000ad7
 8000970:	0800098d 	.word	0x0800098d
 8000974:	0800098d 	.word	0x0800098d
 8000978:	08000ae3 	.word	0x08000ae3
 800097c:	0800098d 	.word	0x0800098d
 8000980:	0800098d 	.word	0x0800098d
 8000984:	08000b27 	.word	0x08000b27
 8000988:	08000add 	.word	0x08000add
		{
		default:  UART_puts(s);
 800098c:	69b8      	ldr	r0, [r7, #24]
 800098e:	f001 fa7d 	bl	8001e8c <UART_puts>
				  UART_puts(" (unkown command)\r\n");
 8000992:	4876      	ldr	r0, [pc, #472]	@ (8000b6c <UART_menu+0x2c8>)
 8000994:	f001 fa7a 	bl	8001e8c <UART_puts>
				  break;
 8000998:	e0df      	b.n	8000b5a <UART_menu+0x2b6>

		/// <b>0 - 5</b>: Togglet verschillende debug-outputs naar UART
		case '0': Uart_debug_out = (Uart_debug_out ? DEBUG_OUT_NONE : DEBUG_OUT_ALL);
 800099a:	4b75      	ldr	r3, [pc, #468]	@ (8000b70 <UART_menu+0x2cc>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <UART_menu+0x102>
 80009a2:	2300      	movs	r3, #0
 80009a4:	e000      	b.n	80009a8 <UART_menu+0x104>
 80009a6:	23ff      	movs	r3, #255	@ 0xff
 80009a8:	4a71      	ldr	r2, [pc, #452]	@ (8000b70 <UART_menu+0x2cc>)
 80009aa:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nall debug output = ");
 80009ac:	4871      	ldr	r0, [pc, #452]	@ (8000b74 <UART_menu+0x2d0>)
 80009ae:	f001 fa6d 	bl	8001e8c <UART_puts>
		  	  	  UART_puts(Uart_debug_out == DEBUG_OUT_ALL ? "ON\r\n" : "OFF\r\n");
 80009b2:	4b6f      	ldr	r3, [pc, #444]	@ (8000b70 <UART_menu+0x2cc>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2bff      	cmp	r3, #255	@ 0xff
 80009b8:	d101      	bne.n	80009be <UART_menu+0x11a>
 80009ba:	4b6f      	ldr	r3, [pc, #444]	@ (8000b78 <UART_menu+0x2d4>)
 80009bc:	e000      	b.n	80009c0 <UART_menu+0x11c>
 80009be:	4b6f      	ldr	r3, [pc, #444]	@ (8000b7c <UART_menu+0x2d8>)
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 fa63 	bl	8001e8c <UART_puts>

		  	  	  // als alle output uitgezet wordt, is het handig om gelijk het menu te laten zien.
		  	  	  if (Uart_debug_out == DEBUG_OUT_NONE)
 80009c6:	4b6a      	ldr	r3, [pc, #424]	@ (8000b70 <UART_menu+0x2cc>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f040 80c0 	bne.w	8000b50 <UART_menu+0x2ac>
		  	  		  DisplayMenu();
 80009d0:	f000 f944 	bl	8000c5c <DisplayMenu>
				  break;
 80009d4:	e0bc      	b.n	8000b50 <UART_menu+0x2ac>

		case '1': Uart_debug_out ^= LEDS_DEBUG_OUT; // toggle output on/off
 80009d6:	4b66      	ldr	r3, [pc, #408]	@ (8000b70 <UART_menu+0x2cc>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f083 0301 	eor.w	r3, r3, #1
 80009de:	4a64      	ldr	r2, [pc, #400]	@ (8000b70 <UART_menu+0x2cc>)
 80009e0:	6013      	str	r3, [r2, #0]
				  UART_puts("\r\nleds output = ");
 80009e2:	4867      	ldr	r0, [pc, #412]	@ (8000b80 <UART_menu+0x2dc>)
 80009e4:	f001 fa52 	bl	8001e8c <UART_puts>
				  UART_puts(Uart_debug_out & LEDS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 80009e8:	4b61      	ldr	r3, [pc, #388]	@ (8000b70 <UART_menu+0x2cc>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <UART_menu+0x154>
 80009f4:	4b60      	ldr	r3, [pc, #384]	@ (8000b78 <UART_menu+0x2d4>)
 80009f6:	e000      	b.n	80009fa <UART_menu+0x156>
 80009f8:	4b60      	ldr	r3, [pc, #384]	@ (8000b7c <UART_menu+0x2d8>)
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 fa46 	bl	8001e8c <UART_puts>
				  break;
 8000a00:	e0ab      	b.n	8000b5a <UART_menu+0x2b6>

		case '2': Uart_debug_out ^= ARMKEYS_DEBUG_OUT; // toggle output on/off
 8000a02:	4b5b      	ldr	r3, [pc, #364]	@ (8000b70 <UART_menu+0x2cc>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f083 0302 	eor.w	r3, r3, #2
 8000a0a:	4a59      	ldr	r2, [pc, #356]	@ (8000b70 <UART_menu+0x2cc>)
 8000a0c:	6013      	str	r3, [r2, #0]
		  	      UART_puts("\r\narmkeys output = ");
 8000a0e:	485d      	ldr	r0, [pc, #372]	@ (8000b84 <UART_menu+0x2e0>)
 8000a10:	f001 fa3c 	bl	8001e8c <UART_puts>
		  	      UART_puts(Uart_debug_out & ARMKEYS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8000a14:	4b56      	ldr	r3, [pc, #344]	@ (8000b70 <UART_menu+0x2cc>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f003 0302 	and.w	r3, r3, #2
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <UART_menu+0x180>
 8000a20:	4b55      	ldr	r3, [pc, #340]	@ (8000b78 <UART_menu+0x2d4>)
 8000a22:	e000      	b.n	8000a26 <UART_menu+0x182>
 8000a24:	4b55      	ldr	r3, [pc, #340]	@ (8000b7c <UART_menu+0x2d8>)
 8000a26:	4618      	mov	r0, r3
 8000a28:	f001 fa30 	bl	8001e8c <UART_puts>
				  break;
 8000a2c:	e095      	b.n	8000b5a <UART_menu+0x2b6>

		case '3': Uart_debug_out ^= UART_DEBUG_OUT; // toggle output on/off
 8000a2e:	4b50      	ldr	r3, [pc, #320]	@ (8000b70 <UART_menu+0x2cc>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f083 0304 	eor.w	r3, r3, #4
 8000a36:	4a4e      	ldr	r2, [pc, #312]	@ (8000b70 <UART_menu+0x2cc>)
 8000a38:	6013      	str	r3, [r2, #0]
		  	      UART_puts("\r\nuart output = ");
 8000a3a:	4853      	ldr	r0, [pc, #332]	@ (8000b88 <UART_menu+0x2e4>)
 8000a3c:	f001 fa26 	bl	8001e8c <UART_puts>
		  	      UART_puts(Uart_debug_out & UART_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8000a40:	4b4b      	ldr	r3, [pc, #300]	@ (8000b70 <UART_menu+0x2cc>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f003 0304 	and.w	r3, r3, #4
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <UART_menu+0x1ac>
 8000a4c:	4b4a      	ldr	r3, [pc, #296]	@ (8000b78 <UART_menu+0x2d4>)
 8000a4e:	e000      	b.n	8000a52 <UART_menu+0x1ae>
 8000a50:	4b4a      	ldr	r3, [pc, #296]	@ (8000b7c <UART_menu+0x2d8>)
 8000a52:	4618      	mov	r0, r3
 8000a54:	f001 fa1a 	bl	8001e8c <UART_puts>
				  break;
 8000a58:	e07f      	b.n	8000b5a <UART_menu+0x2b6>

		case '4': Uart_debug_out ^= STUDENT_DEBUG_OUT; // toggle output on/off
 8000a5a:	4b45      	ldr	r3, [pc, #276]	@ (8000b70 <UART_menu+0x2cc>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f083 0308 	eor.w	r3, r3, #8
 8000a62:	4a43      	ldr	r2, [pc, #268]	@ (8000b70 <UART_menu+0x2cc>)
 8000a64:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nstudent output = ");
 8000a66:	4849      	ldr	r0, [pc, #292]	@ (8000b8c <UART_menu+0x2e8>)
 8000a68:	f001 fa10 	bl	8001e8c <UART_puts>
		  	  	  UART_puts(Uart_debug_out & STUDENT_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8000a6c:	4b40      	ldr	r3, [pc, #256]	@ (8000b70 <UART_menu+0x2cc>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f003 0308 	and.w	r3, r3, #8
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <UART_menu+0x1d8>
 8000a78:	4b3f      	ldr	r3, [pc, #252]	@ (8000b78 <UART_menu+0x2d4>)
 8000a7a:	e000      	b.n	8000a7e <UART_menu+0x1da>
 8000a7c:	4b3f      	ldr	r3, [pc, #252]	@ (8000b7c <UART_menu+0x2d8>)
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 fa04 	bl	8001e8c <UART_puts>
				  break;
 8000a84:	e069      	b.n	8000b5a <UART_menu+0x2b6>

		case '5': Uart_debug_out ^= GPS_DEBUG_OUT; // toggle output on/off
 8000a86:	4b3a      	ldr	r3, [pc, #232]	@ (8000b70 <UART_menu+0x2cc>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f083 0310 	eor.w	r3, r3, #16
 8000a8e:	4a38      	ldr	r2, [pc, #224]	@ (8000b70 <UART_menu+0x2cc>)
 8000a90:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nGPS output = ");
 8000a92:	483f      	ldr	r0, [pc, #252]	@ (8000b90 <UART_menu+0x2ec>)
 8000a94:	f001 f9fa 	bl	8001e8c <UART_puts>
		  	  	  UART_puts(Uart_debug_out & GPS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8000a98:	4b35      	ldr	r3, [pc, #212]	@ (8000b70 <UART_menu+0x2cc>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f003 0310 	and.w	r3, r3, #16
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <UART_menu+0x204>
 8000aa4:	4b34      	ldr	r3, [pc, #208]	@ (8000b78 <UART_menu+0x2d4>)
 8000aa6:	e000      	b.n	8000aaa <UART_menu+0x206>
 8000aa8:	4b34      	ldr	r3, [pc, #208]	@ (8000b7c <UART_menu+0x2d8>)
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f001 f9ee 	bl	8001e8c <UART_puts>
				  break;
 8000ab0:	e053      	b.n	8000b5a <UART_menu+0x2b6>

		/// ... en reageert ook op een paar letters
		case 'D': /// D: Verandert de Default OSTIME-DELAY, die gebruikt wordt bij de LEDs.
				  /// commando: <b>"d,200"</b> betekent: set delay op 200, NB: spaties worden niet afgevangen...
				  os_delay = atoi(s+2); // skip first 2 characters
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	3302      	adds	r3, #2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f00f ff7a 	bl	80109b0 <atoi>
 8000abc:	4603      	mov	r3, r0
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4b34      	ldr	r3, [pc, #208]	@ (8000b94 <UART_menu+0x2f0>)
 8000ac2:	601a      	str	r2, [r3, #0]
				  UART_puts("\r\n os_delay set to: "); UART_putint(os_delay);
 8000ac4:	4834      	ldr	r0, [pc, #208]	@ (8000b98 <UART_menu+0x2f4>)
 8000ac6:	f001 f9e1 	bl	8001e8c <UART_puts>
 8000aca:	4b32      	ldr	r3, [pc, #200]	@ (8000b94 <UART_menu+0x2f0>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 f9f8 	bl	8001ec4 <UART_putint>
				  break;
 8000ad4:	e041      	b.n	8000b5a <UART_menu+0x2b6>

		case 'M': DisplayMenu(); /// M: Displays het menu (zie my_app.c)
 8000ad6:	f000 f8c1 	bl	8000c5c <DisplayMenu>
				  break;
 8000ada:	e03e      	b.n	8000b5a <UART_menu+0x2b6>

		case 'T': DisplayTaskData(); /// T: Displays de stackdata van alle Tasks
 8000adc:	f000 fa3c 	bl	8000f58 <DisplayTaskData>
				  break;
 8000ae0:	e03b      	b.n	8000b5a <UART_menu+0x2b6>
		case 'P': /// P: Verandert de Prioriteit van een taak
				  /// commando, als: <b>"t,9,20"</b> betekent: set Task 9 op priority 20
				  //  eerst: de 2 waarden worden uit de string gehaald met strtok()
			      //  dan: de strings worden naar int geconverteerd
				  //  nb. dit is wel grof geprogrammeerd zo, in het echt maak je hier een mooie functie van.
			      s = strtok(s,    tok); 				 // naar start van string, negeer 't,'
 8000ae2:	69f9      	ldr	r1, [r7, #28]
 8000ae4:	69b8      	ldr	r0, [r7, #24]
 8000ae6:	f010 fa11 	bl	8010f0c <strtok>
 8000aea:	61b8      	str	r0, [r7, #24]
				  s = strtok(NULL, tok); val1 = atoi(s); // volgende = task_id
 8000aec:	69f9      	ldr	r1, [r7, #28]
 8000aee:	2000      	movs	r0, #0
 8000af0:	f010 fa0c 	bl	8010f0c <strtok>
 8000af4:	61b8      	str	r0, [r7, #24]
 8000af6:	69b8      	ldr	r0, [r7, #24]
 8000af8:	f00f ff5a 	bl	80109b0 <atoi>
 8000afc:	6138      	str	r0, [r7, #16]
				  s = strtok(NULL, tok); val2 = atoi(s); // volgende = priority
 8000afe:	69f9      	ldr	r1, [r7, #28]
 8000b00:	2000      	movs	r0, #0
 8000b02:	f010 fa03 	bl	8010f0c <strtok>
 8000b06:	61b8      	str	r0, [r7, #24]
 8000b08:	69b8      	ldr	r0, [r7, #24]
 8000b0a:	f00f ff51 	bl	80109b0 <atoi>
 8000b0e:	60f8      	str	r0, [r7, #12]
				  if (val1 && val2)						 // kleine validiteitscontrole
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d01e      	beq.n	8000b54 <UART_menu+0x2b0>
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d01b      	beq.n	8000b54 <UART_menu+0x2b0>
					  SetTaskPriority(val1, val2);
 8000b1c:	68f9      	ldr	r1, [r7, #12]
 8000b1e:	6938      	ldr	r0, [r7, #16]
 8000b20:	f000 f996 	bl	8000e50 <SetTaskPriority>
				  break;
 8000b24:	e016      	b.n	8000b54 <UART_menu+0x2b0>
		case 'S': /// S: Start/Stop task
				  /// commando, als: <b>"s,9"</b> betekent: start/stop Task 9
				  //  eerst: de waarde worden uit de string gehaald met strtok()
			      //  dan: de string wordt naar int geconverteerd
				  //  nb. dit is wel grof geprogrammeerd zo, in het echt maak je hier een mooie functie van.
			      s = strtok(s,    tok); 				 // naar start van string, negeer 's,'
 8000b26:	69f9      	ldr	r1, [r7, #28]
 8000b28:	69b8      	ldr	r0, [r7, #24]
 8000b2a:	f010 f9ef 	bl	8010f0c <strtok>
 8000b2e:	61b8      	str	r0, [r7, #24]
				  s = strtok(NULL, tok); val1 = atoi(s); // volgende = task_id
 8000b30:	69f9      	ldr	r1, [r7, #28]
 8000b32:	2000      	movs	r0, #0
 8000b34:	f010 f9ea 	bl	8010f0c <strtok>
 8000b38:	61b8      	str	r0, [r7, #24]
 8000b3a:	69b8      	ldr	r0, [r7, #24]
 8000b3c:	f00f ff38 	bl	80109b0 <atoi>
 8000b40:	6138      	str	r0, [r7, #16]
				  if (val1)						 // kleine validiteitscontrole
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d007      	beq.n	8000b58 <UART_menu+0x2b4>
					  StartStopTask(val1);
 8000b48:	6938      	ldr	r0, [r7, #16]
 8000b4a:	f000 f9bd 	bl	8000ec8 <StartStopTask>
				  break;
 8000b4e:	e003      	b.n	8000b58 <UART_menu+0x2b4>
				  break;
 8000b50:	bf00      	nop
 8000b52:	e6b3      	b.n	80008bc <UART_menu+0x18>
				  break;
 8000b54:	bf00      	nop
 8000b56:	e6b1      	b.n	80008bc <UART_menu+0x18>
				  break;
 8000b58:	bf00      	nop
		s = (char *)ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000b5a:	e6af      	b.n	80008bc <UART_menu+0x18>
 8000b5c:	0801208c 	.word	0x0801208c
 8000b60:	080129a8 	.word	0x080129a8
 8000b64:	08012090 	.word	0x08012090
 8000b68:	08012a3c 	.word	0x08012a3c
 8000b6c:	0801209c 	.word	0x0801209c
 8000b70:	20000304 	.word	0x20000304
 8000b74:	080120b0 	.word	0x080120b0
 8000b78:	080120c8 	.word	0x080120c8
 8000b7c:	080120d0 	.word	0x080120d0
 8000b80:	080120d8 	.word	0x080120d8
 8000b84:	080120ec 	.word	0x080120ec
 8000b88:	08012100 	.word	0x08012100
 8000b8c:	08012114 	.word	0x08012114
 8000b90:	08012128 	.word	0x08012128
 8000b94:	20000248 	.word	0x20000248
 8000b98:	08012138 	.word	0x08012138

08000b9c <DisplayVersion>:
* Les: je ziet hoe je handig een lange string kunt opstellen met het '\'-karakter.
* @return void
* @author MSC
*/
void DisplayVersion(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b09c      	sub	sp, #112	@ 0x70
 8000ba0:	af00      	add	r7, sp, #0
	char infobuf[100];
    osVersion_t osv;

    char *functionality =
 8000ba2:	4b24      	ldr	r3, [pc, #144]	@ (8000c34 <DisplayVersion+0x98>)
 8000ba4:	66fb      	str	r3, [r7, #108]	@ 0x6c
en hoe je makkelijk tasks aanmaakt (admin.c) en hoe je de bidirectionele omgang \r\n\
met de UART-comport gebruikt.\r\n\
Zie verder de Doxygen documentatie van de applicatie.\r\n\
Michiel Scager (update: april 2023)\r\n";

	LCD_clear();
 8000ba6:	f000 ff87 	bl	8001ab8 <LCD_clear>
	LCD_puts(app_nameLCD);
 8000baa:	4b23      	ldr	r3, [pc, #140]	@ (8000c38 <DisplayVersion+0x9c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f001 f87a 	bl	8001ca8 <LCD_puts>

	UART_puts(app_name);
 8000bb4:	4b21      	ldr	r3, [pc, #132]	@ (8000c3c <DisplayVersion+0xa0>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 f967 	bl	8001e8c <UART_puts>
	UART_puts(functionality);
 8000bbe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8000bc0:	f001 f964 	bl	8001e8c <UART_puts>

 	osKernelGetInfo(&osv, infobuf, sizeof(infobuf));
 8000bc4:	f107 0108 	add.w	r1, r7, #8
 8000bc8:	463b      	mov	r3, r7
 8000bca:	2264      	movs	r2, #100	@ 0x64
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f00b f929 	bl	800be24 <osKernelGetInfo>
	UART_puts("\t-----");
 8000bd2:	481b      	ldr	r0, [pc, #108]	@ (8000c40 <DisplayVersion+0xa4>)
 8000bd4:	f001 f95a 	bl	8001e8c <UART_puts>
	UART_puts("\r\n\t");                       UART_puts(infobuf);
 8000bd8:	481a      	ldr	r0, [pc, #104]	@ (8000c44 <DisplayVersion+0xa8>)
 8000bda:	f001 f957 	bl	8001e8c <UART_puts>
 8000bde:	f107 0308 	add.w	r3, r7, #8
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 f952 	bl	8001e8c <UART_puts>
	UART_puts("\r\n\tVersion: ");              UART_putint(osv.kernel);
 8000be8:	4817      	ldr	r0, [pc, #92]	@ (8000c48 <DisplayVersion+0xac>)
 8000bea:	f001 f94f 	bl	8001e8c <UART_puts>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f001 f967 	bl	8001ec4 <UART_putint>
	UART_puts("\r\n\tOS Timer freq (MHz): " ); UART_putint(osKernelGetSysTimerFreq()/1000000);
 8000bf6:	4815      	ldr	r0, [pc, #84]	@ (8000c4c <DisplayVersion+0xb0>)
 8000bf8:	f001 f948 	bl	8001e8c <UART_puts>
 8000bfc:	f00b f96a 	bl	800bed4 <osKernelGetSysTimerFreq>
 8000c00:	4603      	mov	r3, r0
 8000c02:	4a13      	ldr	r2, [pc, #76]	@ (8000c50 <DisplayVersion+0xb4>)
 8000c04:	fba2 2303 	umull	r2, r3, r2, r3
 8000c08:	0c9b      	lsrs	r3, r3, #18
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f001 f95a 	bl	8001ec4 <UART_putint>
	UART_puts("\r\n\tOS Tick freq (Hz): " );   UART_putint(osKernelGetTickFreq());
 8000c10:	4810      	ldr	r0, [pc, #64]	@ (8000c54 <DisplayVersion+0xb8>)
 8000c12:	f001 f93b 	bl	8001e8c <UART_puts>
 8000c16:	f00b f953 	bl	800bec0 <osKernelGetTickFreq>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f001 f951 	bl	8001ec4 <UART_putint>
	UART_puts("\r\n\t-----\r\n");
 8000c22:	480d      	ldr	r0, [pc, #52]	@ (8000c58 <DisplayVersion+0xbc>)
 8000c24:	f001 f932 	bl	8001e8c <UART_puts>

    DisplayMenu();
 8000c28:	f000 f818 	bl	8000c5c <DisplayMenu>
}
 8000c2c:	bf00      	nop
 8000c2e:	3770      	adds	r7, #112	@ 0x70
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	08012218 	.word	0x08012218
 8000c38:	20000004 	.word	0x20000004
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	08012388 	.word	0x08012388
 8000c44:	08012390 	.word	0x08012390
 8000c48:	08012394 	.word	0x08012394
 8000c4c:	080123a4 	.word	0x080123a4
 8000c50:	431bde83 	.word	0x431bde83
 8000c54:	080123c0 	.word	0x080123c0
 8000c58:	080123d8 	.word	0x080123d8

08000c5c <DisplayMenu>:
* User Interface (menu) naar UART.
* @return void
* @author MSC
*/
void DisplayMenu(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
	char *menu =
 8000c62:	4b04      	ldr	r3, [pc, #16]	@ (8000c74 <DisplayMenu+0x18>)
 8000c64:	607b      	str	r3, [r7, #4]
 p : change TASK PRIORITY, eg. 'p,7,20' sets priority of task 7 to 20\r\n\
 t : display TASK DATA (number, priority, stack usage, status)\r\n\
 s : start/stop TASK, eg. s,7 starts or stops task 7\r\n\
=====================================================================\r\n";

    UART_puts(menu);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f001 f910 	bl	8001e8c <UART_puts>
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	080123e4 	.word	0x080123e4

08000c78 <error_HaltOS>:
* dus op UART en LCD.
* @param msg Foutmelding
* @return void
*/
void error_HaltOS(char *msg)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	LCD_puts(msg);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f001 f811 	bl	8001ca8 <LCD_puts>
	UART_puts(msg); UART_puts(". Application halted\r\n");
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f001 f900 	bl	8001e8c <UART_puts>
 8000c8c:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <error_HaltOS+0x2c>)
 8000c8e:	f001 f8fd 	bl	8001e8c <UART_puts>

	BUZZER_put(1000);
 8000c92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c96:	f000 fdcd 	bl	8001834 <BUZZER_put>
	vTaskSuspendAll(); // stop alle tasks
 8000c9a:	f00d f9fb 	bl	800e094 <vTaskSuspendAll>

	while (TRUE)
 8000c9e:	bf00      	nop
 8000ca0:	e7fd      	b.n	8000c9e <error_HaltOS+0x26>
 8000ca2:	bf00      	nop
 8000ca4:	08012624 	.word	0x08012624

08000ca8 <CreateHandles>:
/**
* @brief Creates alle handles voor deze applicatie
* @return void
*/
void CreateHandles(void)
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af02      	add	r7, sp, #8
	if (!(hLED_Sem = xSemaphoreCreateMutex()))
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f00b ff33 	bl	800cb1a <xQueueCreateMutex>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	4a36      	ldr	r2, [pc, #216]	@ (8000d90 <CreateHandles+0xe8>)
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	4b35      	ldr	r3, [pc, #212]	@ (8000d90 <CreateHandles+0xe8>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d102      	bne.n	8000cc8 <CreateHandles+0x20>
		error_HaltOS("Error hLED_Sem");
 8000cc2:	4834      	ldr	r0, [pc, #208]	@ (8000d94 <CreateHandles+0xec>)
 8000cc4:	f7ff ffd8 	bl	8000c78 <error_HaltOS>

	if (!(hUART_Queue = xQueueCreate(QSIZE_UART, sizeof(unsigned int))))
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2104      	movs	r1, #4
 8000ccc:	200a      	movs	r0, #10
 8000cce:	f00b feac 	bl	800ca2a <xQueueGenericCreate>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4a30      	ldr	r2, [pc, #192]	@ (8000d98 <CreateHandles+0xf0>)
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	4b2f      	ldr	r3, [pc, #188]	@ (8000d98 <CreateHandles+0xf0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <CreateHandles+0x3e>
		error_HaltOS("Error hUART_Q");
 8000ce0:	482e      	ldr	r0, [pc, #184]	@ (8000d9c <CreateHandles+0xf4>)
 8000ce2:	f7ff ffc9 	bl	8000c78 <error_HaltOS>

	if (!(hGPS_Queue = xQueueCreate(GPS_MAXLEN, sizeof(unsigned char))))
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2101      	movs	r1, #1
 8000cea:	2053      	movs	r0, #83	@ 0x53
 8000cec:	f00b fe9d 	bl	800ca2a <xQueueGenericCreate>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	4a2b      	ldr	r2, [pc, #172]	@ (8000da0 <CreateHandles+0xf8>)
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	4b2a      	ldr	r3, [pc, #168]	@ (8000da0 <CreateHandles+0xf8>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d102      	bne.n	8000d04 <CreateHandles+0x5c>
		error_HaltOS("Error hGPS_Q");
 8000cfe:	4829      	ldr	r0, [pc, #164]	@ (8000da4 <CreateHandles+0xfc>)
 8000d00:	f7ff ffba 	bl	8000c78 <error_HaltOS>

	if (!(hKEY_Event = xEventGroupCreate()))
 8000d04:	f00b fb3a 	bl	800c37c <xEventGroupCreate>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	4a27      	ldr	r2, [pc, #156]	@ (8000da8 <CreateHandles+0x100>)
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	4b26      	ldr	r3, [pc, #152]	@ (8000da8 <CreateHandles+0x100>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d102      	bne.n	8000d1c <CreateHandles+0x74>
		error_HaltOS("Error hLCD_Event");
 8000d16:	4825      	ldr	r0, [pc, #148]	@ (8000dac <CreateHandles+0x104>)
 8000d18:	f7ff ffae 	bl	8000c78 <error_HaltOS>

	if (!(hTimer1 = xTimerCreate("Timer_1", pdMS_TO_TICKS(TIMER1_DELAY), pdTRUE, 0, (TimerCallbackFunction_t)Timer1_Handler)))
 8000d1c:	4b24      	ldr	r3, [pc, #144]	@ (8000db0 <CreateHandles+0x108>)
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2300      	movs	r3, #0
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000d28:	4822      	ldr	r0, [pc, #136]	@ (8000db4 <CreateHandles+0x10c>)
 8000d2a:	f00e fb6d 	bl	800f408 <xTimerCreate>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4a21      	ldr	r2, [pc, #132]	@ (8000db8 <CreateHandles+0x110>)
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4b20      	ldr	r3, [pc, #128]	@ (8000db8 <CreateHandles+0x110>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d102      	bne.n	8000d42 <CreateHandles+0x9a>
		error_HaltOS("Error hTimer1");
 8000d3c:	481f      	ldr	r0, [pc, #124]	@ (8000dbc <CreateHandles+0x114>)
 8000d3e:	f7ff ff9b 	bl	8000c78 <error_HaltOS>

	if (!(hGPS_Mutex = xSemaphoreCreateMutex()))
 8000d42:	2001      	movs	r0, #1
 8000d44:	f00b fee9 	bl	800cb1a <xQueueCreateMutex>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	4a1d      	ldr	r2, [pc, #116]	@ (8000dc0 <CreateHandles+0x118>)
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc0 <CreateHandles+0x118>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d102      	bne.n	8000d5c <CreateHandles+0xb4>
		error_HaltOS("Error hGPS_Mutex");
 8000d56:	481b      	ldr	r0, [pc, #108]	@ (8000dc4 <CreateHandles+0x11c>)
 8000d58:	f7ff ff8e 	bl	8000c78 <error_HaltOS>

	UART_puts("\n\rAll handles created successfully.");
 8000d5c:	481a      	ldr	r0, [pc, #104]	@ (8000dc8 <CreateHandles+0x120>)
 8000d5e:	f001 f895 	bl	8001e8c <UART_puts>

	UART_puts("\n\rTimer set to: ");
 8000d62:	481a      	ldr	r0, [pc, #104]	@ (8000dcc <CreateHandles+0x124>)
 8000d64:	f001 f892 	bl	8001e8c <UART_puts>
	UART_putint((int)TIMER1_DELAY); // (int)-cast is nodig!
 8000d68:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d6c:	f001 f8aa 	bl	8001ec4 <UART_putint>
	xTimerStart(hTimer1, 0); // start de timer...
 8000d70:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <CreateHandles+0x110>)
 8000d72:	681c      	ldr	r4, [r3, #0]
 8000d74:	f00d fa3a 	bl	800e1ec <xTaskGetTickCount>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2300      	movs	r3, #0
 8000d80:	2101      	movs	r1, #1
 8000d82:	4620      	mov	r0, r4
 8000d84:	f00e fb9e 	bl	800f4c4 <xTimerGenericCommand>
}
 8000d88:	bf00      	nop
 8000d8a:	3704      	adds	r7, #4
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd90      	pop	{r4, r7, pc}
 8000d90:	20000310 	.word	0x20000310
 8000d94:	0801263c 	.word	0x0801263c
 8000d98:	20000308 	.word	0x20000308
 8000d9c:	0801264c 	.word	0x0801264c
 8000da0:	2000030c 	.word	0x2000030c
 8000da4:	0801265c 	.word	0x0801265c
 8000da8:	20000314 	.word	0x20000314
 8000dac:	0801266c 	.word	0x0801266c
 8000db0:	08000dd1 	.word	0x08000dd1
 8000db4:	08012680 	.word	0x08012680
 8000db8:	20000318 	.word	0x20000318
 8000dbc:	08012688 	.word	0x08012688
 8000dc0:	2000031c 	.word	0x2000031c
 8000dc4:	08012698 	.word	0x08012698
 8000dc8:	080126ac 	.word	0x080126ac
 8000dcc:	080126d0 	.word	0x080126d0

08000dd0 <Timer1_Handler>:
* @brief Vangt de FreeRTOS software-interrupt op en toggelt een ledje
* @param hTimer1 De handle van de timer
* @return void
*/
void Timer1_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, LEDBLUE);   // turns led on/off
 8000dd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dd8:	4802      	ldr	r0, [pc, #8]	@ (8000de4 <Timer1_Handler+0x14>)
 8000dda:	f002 fb8e 	bl	80034fa <HAL_GPIO_TogglePin>
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40020c00 	.word	0x40020c00

08000de8 <CreateTasks>:
* Let op. Eerst wordt de scheduler gestopt, dan de taken gecreëerd, dan de scheduler gestopt.
* Waarom? Anders gaan taken gelijk beginnen en wachten op taken die nog niet bestaan, dat geeft een rommeltje.
* @return void
*/
void CreateTasks(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
	PTASKDATA ptd = tasks; // tasks == &tasks[0]: both are addresses of first struct
 8000dee:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <CreateTasks+0x5c>)
 8000df0:	607b      	str	r3, [r7, #4]
	vTaskSuspendAll(); // zet de scheduler stil en dwing FreeRTOS om eerst alle taken te starten
 8000df2:	f00d f94f 	bl	800e094 <vTaskSuspendAll>

	for (; ptd->func != NULL; ptd++) // loopje zonder teller; gewoon de pointer steeds ophogen...
 8000df6:	e016      	b.n	8000e26 <CreateTasks+0x3e>
	{
		UART_puts("\r\nCreated: ");
 8000df8:	4813      	ldr	r0, [pc, #76]	@ (8000e48 <CreateTasks+0x60>)
 8000dfa:	f001 f847 	bl	8001e8c <UART_puts>
		UART_puts((char *)ptd->attr.name);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 f842 	bl	8001e8c <UART_puts>

		// nb. kijk naar de haakjes van argument 3: het gaat om het adres van (structure attr).
		ptd->hTask = osThreadNew(ptd->func, ptd->argument, &(ptd->attr));
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6818      	ldr	r0, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6859      	ldr	r1, [r3, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3308      	adds	r3, #8
 8000e14:	461a      	mov	r2, r3
 8000e16:	f00b f869 	bl	800beec <osThreadNew>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (; ptd->func != NULL; ptd++) // loopje zonder teller; gewoon de pointer steeds ophogen...
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3330      	adds	r3, #48	@ 0x30
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1e4      	bne.n	8000df8 <CreateTasks+0x10>
	}

	UART_puts("\r\n");
 8000e2e:	4807      	ldr	r0, [pc, #28]	@ (8000e4c <CreateTasks+0x64>)
 8000e30:	f001 f82c 	bl	8001e8c <UART_puts>
	xTaskResumeAll();   // start nu de scheduler: play ball
 8000e34:	f00d f93c 	bl	800e0b0 <xTaskResumeAll>
	DisplayTaskData();  // display alle taskdata op UART
 8000e38:	f000 f88e 	bl	8000f58 <DisplayTaskData>
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000008 	.word	0x20000008
 8000e48:	080126e4 	.word	0x080126e4
 8000e4c:	080126f0 	.word	0x080126f0

08000e50 <SetTaskPriority>:
* @param task_id Task identifier
* @param new_priority Nieuwe prioriteit
* @return void
*/
void SetTaskPriority(int task_id, int new_priority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
	PTASKDATA ptd = tasks;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	@ (8000ebc <SetTaskPriority+0x6c>)
 8000e5c:	60fb      	str	r3, [r7, #12]
	unsigned int 	task_nr;


	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8000e5e:	2301      	movs	r3, #1
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	e023      	b.n	8000eac <SetTaskPriority+0x5c>
		if (task_nr == task_id) // hebbes
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d119      	bne.n	8000ea0 <SetTaskPriority+0x50>
		{
			ptd->attr.priority = new_priority;			// struct-member
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	621a      	str	r2, [r3, #32]
			vTaskPrioritySet(ptd->hTask, new_priority); // taskpriority
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e76:	683a      	ldr	r2, [r7, #0]
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f00c fef4 	bl	800dc68 <vTaskPrioritySet>
			// of
			// osThreadSetPriority(ptd->hTask, new_priority);

			UART_puts("\r\nSet task "); UART_puts(ptd->attr.name);
 8000e80:	480f      	ldr	r0, [pc, #60]	@ (8000ec0 <SetTaskPriority+0x70>)
 8000e82:	f001 f803 	bl	8001e8c <UART_puts>
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 fffe 	bl	8001e8c <UART_puts>
			UART_puts("'s priority to: "); UART_putint(new_priority);
 8000e90:	480c      	ldr	r0, [pc, #48]	@ (8000ec4 <SetTaskPriority+0x74>)
 8000e92:	f000 fffb 	bl	8001e8c <UART_puts>
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f001 f813 	bl	8001ec4 <UART_putint>
			return;
 8000e9e:	e009      	b.n	8000eb4 <SetTaskPriority+0x64>
	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	3330      	adds	r3, #48	@ 0x30
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1d7      	bne.n	8000e64 <SetTaskPriority+0x14>
		}
}
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	080126f4 	.word	0x080126f4
 8000ec4:	08012700 	.word	0x08012700

08000ec8 <StartStopTask>:
* je alle tasks die op die mutex wachten. En als je de task stopt die de UART leest,
* schiet je jezelf ook in de voet.
* @return void
*/
void StartStopTask(int task_id)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08e      	sub	sp, #56	@ 0x38
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	PTASKDATA ptd = tasks;
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f48 <StartStopTask+0x80>)
 8000ed2:	637b      	str	r3, [r7, #52]	@ 0x34
	unsigned int 	task_nr;
	TaskStatus_t    xTaskDetails;

	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	633b      	str	r3, [r7, #48]	@ 0x30
 8000ed8:	e02e      	b.n	8000f38 <StartStopTask+0x70>
		if (task_nr == task_id) // hebbes
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d124      	bne.n	8000f2c <StartStopTask+0x64>
		{
			vTaskGetInfo (ptd->hTask, &xTaskDetails, pdTRUE, eInvalid);
 8000ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ee4:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000ee6:	f107 010c 	add.w	r1, r7, #12
 8000eea:	2305      	movs	r3, #5
 8000eec:	2201      	movs	r2, #1
 8000eee:	f00d fde5 	bl	800eabc <vTaskGetInfo>
			UART_puts("\r\n");
 8000ef2:	4816      	ldr	r0, [pc, #88]	@ (8000f4c <StartStopTask+0x84>)
 8000ef4:	f000 ffca 	bl	8001e8c <UART_puts>
			UART_puts(ptd->attr.name);
 8000ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 ffc5 	bl	8001e8c <UART_puts>

			// een task kan meerdere statussen hebben; het wordt simpeler
			// als je alleen de eSuspended checkt.
			if (xTaskDetails.eCurrentState == eSuspended)
 8000f02:	7e3b      	ldrb	r3, [r7, #24]
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d108      	bne.n	8000f1a <StartStopTask+0x52>
			{
				vTaskResume(ptd->hTask);
 8000f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f00c fff1 	bl	800def4 <vTaskResume>
				UART_puts(" resumed.");
 8000f12:	480f      	ldr	r0, [pc, #60]	@ (8000f50 <StartStopTask+0x88>)
 8000f14:	f000 ffba 	bl	8001e8c <UART_puts>
			else // bv. eBlocked, eRunning, eInvalid etc.
			{
				vTaskSuspend(ptd->hTask);
				UART_puts(" suspended.");
			}
			return;
 8000f18:	e012      	b.n	8000f40 <StartStopTask+0x78>
				vTaskSuspend(ptd->hTask);
 8000f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f00c ff40 	bl	800dda4 <vTaskSuspend>
				UART_puts(" suspended.");
 8000f24:	480b      	ldr	r0, [pc, #44]	@ (8000f54 <StartStopTask+0x8c>)
 8000f26:	f000 ffb1 	bl	8001e8c <UART_puts>
 8000f2a:	e009      	b.n	8000f40 <StartStopTask+0x78>
	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8000f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f2e:	3330      	adds	r3, #48	@ 0x30
 8000f30:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f34:	3301      	adds	r3, #1
 8000f36:	633b      	str	r3, [r7, #48]	@ 0x30
 8000f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1cc      	bne.n	8000eda <StartStopTask+0x12>
		}
}
 8000f40:	3738      	adds	r7, #56	@ 0x38
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	080126f0 	.word	0x080126f0
 8000f50:	08012714 	.word	0x08012714
 8000f54:	08012720 	.word	0x08012720

08000f58 <DisplayTaskData>:
/**
* @brief Displays de stack-gegevens van alle taken op de UART
* @return void
*/
void DisplayTaskData(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08e      	sub	sp, #56	@ 0x38
 8000f5c:	af00      	add	r7, sp, #0
	PTASKDATA    ptd = tasks;
 8000f5e:	4b47      	ldr	r3, [pc, #284]	@ (800107c <DisplayTaskData+0x124>)
 8000f60:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t  highwatermark;
	TaskStatus_t xTaskDetails;
	unsigned int free, totalalloc = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	633b      	str	r3, [r7, #48]	@ 0x30

	unsigned int task_nr; // tasknr for changing priority

	for (task_nr=1; ptd->func != NULL; ptd++, task_nr++)
 8000f66:	2301      	movs	r3, #1
 8000f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f6a:	e062      	b.n	8001032 <DisplayTaskData+0xda>
	{
		highwatermark = uxTaskGetStackHighWaterMark(ptd->hTask); 	// amount of free bytes
 8000f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f70:	4618      	mov	r0, r3
 8000f72:	f00d fe25 	bl	800ebc0 <uxTaskGetStackHighWaterMark>
 8000f76:	62b8      	str	r0, [r7, #40]	@ 0x28
		free = (highwatermark * 100) / ptd->attr.stack_size; 		// in percentage
 8000f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f7a:	2264      	movs	r2, #100	@ 0x64
 8000f7c:	fb03 f202 	mul.w	r2, r3, r2
 8000f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
		totalalloc += ptd->attr.stack_size;
 8000f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f90:	4413      	add	r3, r2
 8000f92:	633b      	str	r3, [r7, #48]	@ 0x30

		vTaskGetInfo (ptd->hTask, &xTaskDetails, pdTRUE, eInvalid); // get task status
 8000f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f96:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000f98:	4639      	mov	r1, r7
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f00d fd8d 	bl	800eabc <vTaskGetInfo>

		UART_puts("\r\n\t[");        UART_putint(task_nr); UART_puts("] ");
 8000fa2:	4837      	ldr	r0, [pc, #220]	@ (8001080 <DisplayTaskData+0x128>)
 8000fa4:	f000 ff72 	bl	8001e8c <UART_puts>
 8000fa8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000faa:	f000 ff8b 	bl	8001ec4 <UART_putint>
 8000fae:	4835      	ldr	r0, [pc, #212]	@ (8001084 <DisplayTaskData+0x12c>)
 8000fb0:	f000 ff6c 	bl	8001e8c <UART_puts>
		UART_puts(ptd->attr.name);
 8000fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 ff67 	bl	8001e8c <UART_puts>
		UART_puts("\t priority: ");  UART_putint(ptd->attr.priority);
 8000fbe:	4832      	ldr	r0, [pc, #200]	@ (8001088 <DisplayTaskData+0x130>)
 8000fc0:	f000 ff64 	bl	8001e8c <UART_puts>
 8000fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 ff7b 	bl	8001ec4 <UART_putint>
		UART_puts("\t stacksize: "); UART_putint(ptd->attr.stack_size * 4);
 8000fce:	482f      	ldr	r0, [pc, #188]	@ (800108c <DisplayTaskData+0x134>)
 8000fd0:	f000 ff5c 	bl	8001e8c <UART_puts>
 8000fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fd6:	69db      	ldr	r3, [r3, #28]
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 ff72 	bl	8001ec4 <UART_putint>
		UART_puts("\t free: ");  UART_putint((ptd->attr.stack_size- highwatermark) * 4);
 8000fe0:	482b      	ldr	r0, [pc, #172]	@ (8001090 <DisplayTaskData+0x138>)
 8000fe2:	f000 ff53 	bl	8001e8c <UART_puts>
 8000fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fe8:	69da      	ldr	r2, [r3, #28]
 8000fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 ff67 	bl	8001ec4 <UART_putint>
		UART_puts("\t used: ");      UART_putint(100 - free); UART_puts("%");
 8000ff6:	4827      	ldr	r0, [pc, #156]	@ (8001094 <DisplayTaskData+0x13c>)
 8000ff8:	f000 ff48 	bl	8001e8c <UART_puts>
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ffe:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001002:	4618      	mov	r0, r3
 8001004:	f000 ff5e 	bl	8001ec4 <UART_putint>
 8001008:	4823      	ldr	r0, [pc, #140]	@ (8001098 <DisplayTaskData+0x140>)
 800100a:	f000 ff3f 	bl	8001e8c <UART_puts>
		UART_puts("\t status: ");    UART_puts(xTaskDetails.eCurrentState == eSuspended ? "suspended": "running");
 800100e:	4823      	ldr	r0, [pc, #140]	@ (800109c <DisplayTaskData+0x144>)
 8001010:	f000 ff3c 	bl	8001e8c <UART_puts>
 8001014:	7b3b      	ldrb	r3, [r7, #12]
 8001016:	2b03      	cmp	r3, #3
 8001018:	d101      	bne.n	800101e <DisplayTaskData+0xc6>
 800101a:	4b21      	ldr	r3, [pc, #132]	@ (80010a0 <DisplayTaskData+0x148>)
 800101c:	e000      	b.n	8001020 <DisplayTaskData+0xc8>
 800101e:	4b21      	ldr	r3, [pc, #132]	@ (80010a4 <DisplayTaskData+0x14c>)
 8001020:	4618      	mov	r0, r3
 8001022:	f000 ff33 	bl	8001e8c <UART_puts>
	for (task_nr=1; ptd->func != NULL; ptd++, task_nr++)
 8001026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001028:	3330      	adds	r3, #48	@ 0x30
 800102a:	637b      	str	r3, [r7, #52]	@ 0x34
 800102c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800102e:	3301      	adds	r3, #1
 8001030:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d198      	bne.n	8000f6c <DisplayTaskData+0x14>
	}
	UART_puts("\r\n\tTotal heap: "); UART_putint(configTOTAL_HEAP_SIZE);
 800103a:	481b      	ldr	r0, [pc, #108]	@ (80010a8 <DisplayTaskData+0x150>)
 800103c:	f000 ff26 	bl	8001e8c <UART_puts>
 8001040:	f44f 407a 	mov.w	r0, #64000	@ 0xfa00
 8001044:	f000 ff3e 	bl	8001ec4 <UART_putint>
	UART_puts("    Allocated task stack: "); UART_putint(totalalloc * 4);
 8001048:	4818      	ldr	r0, [pc, #96]	@ (80010ac <DisplayTaskData+0x154>)
 800104a:	f000 ff1f 	bl	8001e8c <UART_puts>
 800104e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4618      	mov	r0, r3
 8001054:	f000 ff36 	bl	8001ec4 <UART_putint>
	UART_puts("    Free heap space: "); UART_putint(configTOTAL_HEAP_SIZE - (totalalloc * 4));
 8001058:	4815      	ldr	r0, [pc, #84]	@ (80010b0 <DisplayTaskData+0x158>)
 800105a:	f000 ff17 	bl	8001e8c <UART_puts>
 800105e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001060:	f5c3 537a 	rsb	r3, r3, #16000	@ 0x3e80
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4618      	mov	r0, r3
 8001068:	f000 ff2c 	bl	8001ec4 <UART_putint>
	UART_puts("\r\n");
 800106c:	4811      	ldr	r0, [pc, #68]	@ (80010b4 <DisplayTaskData+0x15c>)
 800106e:	f000 ff0d 	bl	8001e8c <UART_puts>
}
 8001072:	bf00      	nop
 8001074:	3738      	adds	r7, #56	@ 0x38
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000008 	.word	0x20000008
 8001080:	0801272c 	.word	0x0801272c
 8001084:	08012734 	.word	0x08012734
 8001088:	08012738 	.word	0x08012738
 800108c:	08012748 	.word	0x08012748
 8001090:	08012758 	.word	0x08012758
 8001094:	08012764 	.word	0x08012764
 8001098:	08012770 	.word	0x08012770
 800109c:	08012774 	.word	0x08012774
 80010a0:	08012780 	.word	0x08012780
 80010a4:	0801278c 	.word	0x0801278c
 80010a8:	08012794 	.word	0x08012794
 80010ac:	080127a4 	.word	0x080127a4
 80010b0:	080127c0 	.word	0x080127c0
 80010b4:	080126f0 	.word	0x080126f0

080010b8 <fill_GNRMC>:
* GNRMC-struct, mbv strtok(); De struct bevat nu alleen chars - je kunt er ook voor kiezen
* om gelijk met doubles te werken, die je dan met atof(); omzet.
* @return void
*/
void fill_GNRMC(char *message)
{
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b087      	sub	sp, #28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	// example: $GNRMC,164435.000,A,5205.9505,N,00507.0873,E,0.49,21.70,140423,,,A
	//          id    , time     ,s,

	osThreadId_t hTask;

	if (!(hTask = xTaskGetHandle("GPS_parser")))
 80010c0:	484a      	ldr	r0, [pc, #296]	@ (80011ec <fill_GNRMC+0x134>)
 80010c2:	f00d f911 	bl	800e2e8 <xTaskGetHandle>
 80010c6:	6178      	str	r0, [r7, #20]
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d102      	bne.n	80010d4 <fill_GNRMC+0x1c>
				error_HaltOS("Err:ARM_hndle");
 80010ce:	4848      	ldr	r0, [pc, #288]	@ (80011f0 <fill_GNRMC+0x138>)
 80010d0:	f7ff fdd2 	bl	8000c78 <error_HaltOS>

	char *tok = ",";
 80010d4:	4b47      	ldr	r3, [pc, #284]	@ (80011f4 <fill_GNRMC+0x13c>)
 80010d6:	613b      	str	r3, [r7, #16]
	char *s;

	memset(&gnrmc, 0, sizeof(GNRMC)); // clear the struct
 80010d8:	2247      	movs	r2, #71	@ 0x47
 80010da:	2100      	movs	r1, #0
 80010dc:	4846      	ldr	r0, [pc, #280]	@ (80011f8 <fill_GNRMC+0x140>)
 80010de:	f00f feee 	bl	8010ebe <memset>

	s = strtok(message, tok); // 0. header;
 80010e2:	6939      	ldr	r1, [r7, #16]
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f00f ff11 	bl	8010f0c <strtok>
 80010ea:	60f8      	str	r0, [r7, #12]
	strcpy(gnrmc.head, s);
 80010ec:	68f9      	ldr	r1, [r7, #12]
 80010ee:	4842      	ldr	r0, [pc, #264]	@ (80011f8 <fill_GNRMC+0x140>)
 80010f0:	f010 f849 	bl	8011186 <strcpy>

	s = strtok(NULL, tok);    // 1. time; not used
 80010f4:	6939      	ldr	r1, [r7, #16]
 80010f6:	2000      	movs	r0, #0
 80010f8:	f00f ff08 	bl	8010f0c <strtok>
 80010fc:	60f8      	str	r0, [r7, #12]

	s = strtok(NULL, tok);    // 2. valid;
 80010fe:	6939      	ldr	r1, [r7, #16]
 8001100:	2000      	movs	r0, #0
 8001102:	f00f ff03 	bl	8010f0c <strtok>
 8001106:	60f8      	str	r0, [r7, #12]
	gnrmc.status = s[0];
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	781a      	ldrb	r2, [r3, #0]
 800110c:	4b3a      	ldr	r3, [pc, #232]	@ (80011f8 <fill_GNRMC+0x140>)
 800110e:	745a      	strb	r2, [r3, #17]

	s = strtok(NULL, tok);    // 3. latitude;
 8001110:	6939      	ldr	r1, [r7, #16]
 8001112:	2000      	movs	r0, #0
 8001114:	f00f fefa 	bl	8010f0c <strtok>
 8001118:	60f8      	str	r0, [r7, #12]
	strcpy(gnrmc.latitude, s);
 800111a:	68f9      	ldr	r1, [r7, #12]
 800111c:	4837      	ldr	r0, [pc, #220]	@ (80011fc <fill_GNRMC+0x144>)
 800111e:	f010 f832 	bl	8011186 <strcpy>

	s = strtok(NULL, tok);    // 4. N/S; not used
 8001122:	6939      	ldr	r1, [r7, #16]
 8001124:	2000      	movs	r0, #0
 8001126:	f00f fef1 	bl	8010f0c <strtok>
 800112a:	60f8      	str	r0, [r7, #12]

	s = strtok(NULL, tok);    // 5. longitude;
 800112c:	6939      	ldr	r1, [r7, #16]
 800112e:	2000      	movs	r0, #0
 8001130:	f00f feec 	bl	8010f0c <strtok>
 8001134:	60f8      	str	r0, [r7, #12]
	if (s[0] == '0') // if leading '0' is present, remove it
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b30      	cmp	r3, #48	@ 0x30
 800113c:	d10a      	bne.n	8001154 <fill_GNRMC+0x9c>
		memmove(s, s + 1, strlen(s)); // remove leading '0' if present
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	1c5c      	adds	r4, r3, #1
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	f7ff f844 	bl	80001d0 <strlen>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	4621      	mov	r1, r4
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f00f fe9b 	bl	8010e8a <memmove>
	strcpy(gnrmc.longitude, s);
 8001154:	68f9      	ldr	r1, [r7, #12]
 8001156:	482a      	ldr	r0, [pc, #168]	@ (8001200 <fill_GNRMC+0x148>)
 8001158:	f010 f815 	bl	8011186 <strcpy>

	s = strtok(NULL, tok);    // 6. E/W; not used
 800115c:	6939      	ldr	r1, [r7, #16]
 800115e:	2000      	movs	r0, #0
 8001160:	f00f fed4 	bl	8010f0c <strtok>
 8001164:	60f8      	str	r0, [r7, #12]

	s = strtok(NULL, tok);    // 7. speed;
 8001166:	6939      	ldr	r1, [r7, #16]
 8001168:	2000      	movs	r0, #0
 800116a:	f00f fecf 	bl	8010f0c <strtok>
 800116e:	60f8      	str	r0, [r7, #12]
	strcpy(gnrmc.speed, s);
 8001170:	68f9      	ldr	r1, [r7, #12]
 8001172:	4824      	ldr	r0, [pc, #144]	@ (8001204 <fill_GNRMC+0x14c>)
 8001174:	f010 f807 	bl	8011186 <strcpy>

	s = strtok(NULL, tok);    // 8. course;
 8001178:	6939      	ldr	r1, [r7, #16]
 800117a:	2000      	movs	r0, #0
 800117c:	f00f fec6 	bl	8010f0c <strtok>
 8001180:	60f8      	str	r0, [r7, #12]
	strcpy(gnrmc.course, s);
 8001182:	68f9      	ldr	r1, [r7, #12]
 8001184:	4820      	ldr	r0, [pc, #128]	@ (8001208 <fill_GNRMC+0x150>)
 8001186:	f00f fffe 	bl	8011186 <strcpy>

	if (Uart_debug_out & GPS_DEBUG_OUT)
 800118a:	4b20      	ldr	r3, [pc, #128]	@ (800120c <fill_GNRMC+0x154>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	2b00      	cmp	r3, #0
 8001194:	d025      	beq.n	80011e2 <fill_GNRMC+0x12a>
	{
		UART_puts("\r\n\t GPS type: \t");  UART_puts(gnrmc.head);
 8001196:	481e      	ldr	r0, [pc, #120]	@ (8001210 <fill_GNRMC+0x158>)
 8001198:	f000 fe78 	bl	8001e8c <UART_puts>
 800119c:	4816      	ldr	r0, [pc, #88]	@ (80011f8 <fill_GNRMC+0x140>)
 800119e:	f000 fe75 	bl	8001e8c <UART_puts>
		UART_puts("\r\n\t status: \t\t");  UART_putchar(gnrmc.status);
 80011a2:	481c      	ldr	r0, [pc, #112]	@ (8001214 <fill_GNRMC+0x15c>)
 80011a4:	f000 fe72 	bl	8001e8c <UART_puts>
 80011a8:	4b13      	ldr	r3, [pc, #76]	@ (80011f8 <fill_GNRMC+0x140>)
 80011aa:	7c5b      	ldrb	r3, [r3, #17]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 fe5b 	bl	8001e68 <UART_putchar>
		UART_puts("\r\n\t latitude:\t\t"); UART_puts(gnrmc.latitude);
 80011b2:	4819      	ldr	r0, [pc, #100]	@ (8001218 <fill_GNRMC+0x160>)
 80011b4:	f000 fe6a 	bl	8001e8c <UART_puts>
 80011b8:	4810      	ldr	r0, [pc, #64]	@ (80011fc <fill_GNRMC+0x144>)
 80011ba:	f000 fe67 	bl	8001e8c <UART_puts>
		UART_puts("\r\n\t longitude:\t");  UART_puts(gnrmc.longitude);
 80011be:	4817      	ldr	r0, [pc, #92]	@ (800121c <fill_GNRMC+0x164>)
 80011c0:	f000 fe64 	bl	8001e8c <UART_puts>
 80011c4:	480e      	ldr	r0, [pc, #56]	@ (8001200 <fill_GNRMC+0x148>)
 80011c6:	f000 fe61 	bl	8001e8c <UART_puts>
		UART_puts("\r\n\t speed:    \t");  UART_puts(gnrmc.speed);
 80011ca:	4815      	ldr	r0, [pc, #84]	@ (8001220 <fill_GNRMC+0x168>)
 80011cc:	f000 fe5e 	bl	8001e8c <UART_puts>
 80011d0:	480c      	ldr	r0, [pc, #48]	@ (8001204 <fill_GNRMC+0x14c>)
 80011d2:	f000 fe5b 	bl	8001e8c <UART_puts>
		UART_puts("\r\n\t course:   \t");  UART_puts(gnrmc.course);
 80011d6:	4813      	ldr	r0, [pc, #76]	@ (8001224 <fill_GNRMC+0x16c>)
 80011d8:	f000 fe58 	bl	8001e8c <UART_puts>
 80011dc:	480a      	ldr	r0, [pc, #40]	@ (8001208 <fill_GNRMC+0x150>)
 80011de:	f000 fe55 	bl	8001e8c <UART_puts>
	}
}
 80011e2:	bf00      	nop
 80011e4:	371c      	adds	r7, #28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd90      	pop	{r4, r7, pc}
 80011ea:	bf00      	nop
 80011ec:	080127d8 	.word	0x080127d8
 80011f0:	080127e4 	.word	0x080127e4
 80011f4:	080127f4 	.word	0x080127f4
 80011f8:	20000320 	.word	0x20000320
 80011fc:	20000332 	.word	0x20000332
 8001200:	2000033d 	.word	0x2000033d
 8001204:	20000348 	.word	0x20000348
 8001208:	2000034e 	.word	0x2000034e
 800120c:	20000304 	.word	0x20000304
 8001210:	080127f8 	.word	0x080127f8
 8001214:	08012808 	.word	0x08012808
 8001218:	08012818 	.word	0x08012818
 800121c:	08012828 	.word	0x08012828
 8001220:	08012838 	.word	0x08012838
 8001224:	08012848 	.word	0x08012848

08001228 <GPS_getNMEA>:
* binnenkomen. * De handler zet elk inkomende character gelijk op een queue, die hier uitgelezen wordt.
* Vervolgens wordt hiervan een GPS-message opgebouwd en verwerkt.
* @return void
*/
void GPS_getNMEA (void *argument)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b09c      	sub	sp, #112	@ 0x70
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
    char  Q_char;   			// char to receive from queue
	char  MSG_buff[GPS_MAXLEN]; // buffer for GPS-string
	int   pos = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	66fb      	str	r3, [r7, #108]	@ 0x6c
	int   cs;                   // checksum-flag
	int   new_msg = FALSE;      // do we encounter a '$'-char?
 8001234:	2300      	movs	r3, #0
 8001236:	66bb      	str	r3, [r7, #104]	@ 0x68
	int   msg_type = 0;         // do we want this message to be interpreted?
 8001238:	2300      	movs	r3, #0
 800123a:	667b      	str	r3, [r7, #100]	@ 0x64

	UART_puts((char *)__func__); UART_puts("started\n\r");
 800123c:	4855      	ldr	r0, [pc, #340]	@ (8001394 <GPS_getNMEA+0x16c>)
 800123e:	f000 fe25 	bl	8001e8c <UART_puts>
 8001242:	4855      	ldr	r0, [pc, #340]	@ (8001398 <GPS_getNMEA+0x170>)
 8001244:	f000 fe22 	bl	8001e8c <UART_puts>

	while (TRUE)
	{
		xQueueReceive(hGPS_Queue, &Q_char, portMAX_DELAY); // get one char from the q
 8001248:	4b54      	ldr	r3, [pc, #336]	@ (800139c <GPS_getNMEA+0x174>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f107 015f 	add.w	r1, r7, #95	@ 0x5f
 8001250:	f04f 32ff 	mov.w	r2, #4294967295
 8001254:	4618      	mov	r0, r3
 8001256:	f00b fe19 	bl	800ce8c <xQueueReceive>

		//UART_putchar(Q_buff);  // echo, for testing

		if (Q_char == '$') // gotcha, new datastring started
 800125a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800125e:	2b24      	cmp	r3, #36	@ 0x24
 8001260:	d10a      	bne.n	8001278 <GPS_getNMEA+0x50>
		{
			memset(MSG_buff, 0, sizeof(MSG_buff)); // clear buff
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	2253      	movs	r2, #83	@ 0x53
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f00f fe27 	bl	8010ebe <memset>
			pos = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	66fb      	str	r3, [r7, #108]	@ 0x6c
			new_msg = TRUE; // from now on, chars are valid to receive
 8001274:	2301      	movs	r3, #1
 8001276:	66bb      	str	r3, [r7, #104]	@ 0x68
		}

		if (new_msg == FALSE) // char only valid if started by $
 8001278:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 8088 	beq.w	8001390 <GPS_getNMEA+0x168>
			continue;

		MSG_buff[pos] = Q_char; // copy char read from Q into the msg-buf
 8001280:	f897 105f 	ldrb.w	r1, [r7, #95]	@ 0x5f
 8001284:	f107 020c 	add.w	r2, r7, #12
 8001288:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800128a:	4413      	add	r3, r2
 800128c:	460a      	mov	r2, r1
 800128e:	701a      	strb	r2, [r3, #0]

		// if pos==5, the message type (f.i. "$GPGSA) is complete, so we now we can determine
		// if we want the rest of the message... else we skip the rest characters
		if (pos == 5)
 8001290:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001292:	2b05      	cmp	r3, #5
 8001294:	d130      	bne.n	80012f8 <GPS_getNMEA+0xd0>
		{
			msg_type = 0; // reset
 8001296:	2300      	movs	r3, #0
 8001298:	667b      	str	r3, [r7, #100]	@ 0x64

			// next, we decide which message types we want to interpret
			// and we set the message-type for later use...
			if      (!strncmp(&MSG_buff[1], "GNRMC", 5)) msg_type = eGNRMC;
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	3301      	adds	r3, #1
 80012a0:	2205      	movs	r2, #5
 80012a2:	493f      	ldr	r1, [pc, #252]	@ (80013a0 <GPS_getNMEA+0x178>)
 80012a4:	4618      	mov	r0, r3
 80012a6:	f00f fe1f 	bl	8010ee8 <strncmp>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <GPS_getNMEA+0x8e>
 80012b0:	2301      	movs	r3, #1
 80012b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80012b4:	e01a      	b.n	80012ec <GPS_getNMEA+0xc4>
			else if (!strncmp(&MSG_buff[1], "GPGSA", 5)) msg_type = eGPGSA;
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	3301      	adds	r3, #1
 80012bc:	2205      	movs	r2, #5
 80012be:	4939      	ldr	r1, [pc, #228]	@ (80013a4 <GPS_getNMEA+0x17c>)
 80012c0:	4618      	mov	r0, r3
 80012c2:	f00f fe11 	bl	8010ee8 <strncmp>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d102      	bne.n	80012d2 <GPS_getNMEA+0xaa>
 80012cc:	2302      	movs	r3, #2
 80012ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80012d0:	e00c      	b.n	80012ec <GPS_getNMEA+0xc4>
			else if (!strncmp(&MSG_buff[1], "GNGGA", 5)) msg_type = eGNGGA;
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	3301      	adds	r3, #1
 80012d8:	2205      	movs	r2, #5
 80012da:	4933      	ldr	r1, [pc, #204]	@ (80013a8 <GPS_getNMEA+0x180>)
 80012dc:	4618      	mov	r0, r3
 80012de:	f00f fe03 	bl	8010ee8 <strncmp>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d101      	bne.n	80012ec <GPS_getNMEA+0xc4>
 80012e8:	2303      	movs	r3, #3
 80012ea:	667b      	str	r3, [r7, #100]	@ 0x64

			if (!msg_type) // not an interesting message type
 80012ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d102      	bne.n	80012f8 <GPS_getNMEA+0xd0>
			{
				new_msg = FALSE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	66bb      	str	r3, [r7, #104]	@ 0x68
				continue;
 80012f6:	e04c      	b.n	8001392 <GPS_getNMEA+0x16a>
			}
		}

		// if we are here, we are reading the rest of the message into the msg_buff
		////////////////////////////////////////////////////////////////////////////
		if (pos >= GPS_MAXLEN - 1) // avoid overflow (should not happen, but still...)
 80012f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80012fa:	2b51      	cmp	r3, #81	@ 0x51
 80012fc:	dd02      	ble.n	8001304 <GPS_getNMEA+0xdc>
		{
			new_msg = FALSE; // ignore it
 80012fe:	2300      	movs	r3, #0
 8001300:	66bb      	str	r3, [r7, #104]	@ 0x68
			continue;
 8001302:	e046      	b.n	8001392 <GPS_getNMEA+0x16a>
		}

		if (MSG_buff[pos] == '\r') // end of message encountered - all messages end with <CR-13><LF-10>
 8001304:	f107 020c 	add.w	r2, r7, #12
 8001308:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800130a:	4413      	add	r3, r2
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b0d      	cmp	r3, #13
 8001310:	d13a      	bne.n	8001388 <GPS_getNMEA+0x160>
		{
			MSG_buff[pos] = '\0';          // close string
 8001312:	f107 020c 	add.w	r2, r7, #12
 8001316:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001318:	4413      	add	r3, r2
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]
			cs = checksum_valid(MSG_buff); // note, checksumchars (eg "*43") are removed from string
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f88e 	bl	8001444 <checksum_valid>
 8001328:	6638      	str	r0, [r7, #96]	@ 0x60

			if (Uart_debug_out & GPS_DEBUG_OUT) // output to uart if wanted
 800132a:	4b20      	ldr	r3, [pc, #128]	@ (80013ac <GPS_getNMEA+0x184>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0310 	and.w	r3, r3, #16
 8001332:	2b00      	cmp	r3, #0
 8001334:	d010      	beq.n	8001358 <GPS_getNMEA+0x130>
			{
				UART_puts("\r\nGPS (UART4): "); UART_puts(MSG_buff);
 8001336:	481e      	ldr	r0, [pc, #120]	@ (80013b0 <GPS_getNMEA+0x188>)
 8001338:	f000 fda8 	bl	8001e8c <UART_puts>
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	4618      	mov	r0, r3
 8001342:	f000 fda3 	bl	8001e8c <UART_puts>
				UART_puts( cs ? " [cs:OK]\r\n" : " [cs:ERR]\r\n");
 8001346:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <GPS_getNMEA+0x128>
 800134c:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <GPS_getNMEA+0x18c>)
 800134e:	e000      	b.n	8001352 <GPS_getNMEA+0x12a>
 8001350:	4b19      	ldr	r3, [pc, #100]	@ (80013b8 <GPS_getNMEA+0x190>)
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fd9a 	bl	8001e8c <UART_puts>
			}

			if (cs) // checksum okay, so interpret the message
 8001358:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800135a:	2b00      	cmp	r3, #0
 800135c:	d011      	beq.n	8001382 <GPS_getNMEA+0x15a>
			{
				switch(msg_type) // extract data from msg into right struct
 800135e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001360:	2b01      	cmp	r3, #1
 8001362:	d007      	beq.n	8001374 <GPS_getNMEA+0x14c>
 8001364:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001366:	2b00      	cmp	r3, #0
 8001368:	dd0a      	ble.n	8001380 <GPS_getNMEA+0x158>
 800136a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800136c:	3b02      	subs	r3, #2
 800136e:	2b01      	cmp	r3, #1
 8001370:	d806      	bhi.n	8001380 <GPS_getNMEA+0x158>
				{
				case eGNRMC: fill_GNRMC(MSG_buff);
						     // use the data...
						     break;
				case eGPGSA:
				case eGNGGA: break;
 8001372:	e006      	b.n	8001382 <GPS_getNMEA+0x15a>
				case eGNRMC: fill_GNRMC(MSG_buff);
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fe9d 	bl	80010b8 <fill_GNRMC>
						     break;
 800137e:	e000      	b.n	8001382 <GPS_getNMEA+0x15a>
				default:     break;
 8001380:	bf00      	nop
				}
			}

			new_msg = FALSE; // new message possible
 8001382:	2300      	movs	r3, #0
 8001384:	66bb      	str	r3, [r7, #104]	@ 0x68
			continue;
 8001386:	e004      	b.n	8001392 <GPS_getNMEA+0x16a>
		}
		pos++; // proceed reading next char from the queue
 8001388:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800138a:	3301      	adds	r3, #1
 800138c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800138e:	e75b      	b.n	8001248 <GPS_getNMEA+0x20>
			continue;
 8001390:	bf00      	nop
		xQueueReceive(hGPS_Queue, &Q_char, portMAX_DELAY); // get one char from the q
 8001392:	e759      	b.n	8001248 <GPS_getNMEA+0x20>
 8001394:	080129b4 	.word	0x080129b4
 8001398:	08012858 	.word	0x08012858
 800139c:	2000030c 	.word	0x2000030c
 80013a0:	08012864 	.word	0x08012864
 80013a4:	0801286c 	.word	0x0801286c
 80013a8:	08012874 	.word	0x08012874
 80013ac:	20000304 	.word	0x20000304
 80013b0:	0801287c 	.word	0x0801287c
 80013b4:	0801288c 	.word	0x0801288c
 80013b8:	08012898 	.word	0x08012898

080013bc <hex2int>:
}


// source: file:///C:/craigpeacock/NMEA-GPS
int hex2int(char *c)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	int value;

	value = hexchar2int(c[0]);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 f813 	bl	80013f4 <hexchar2int>
 80013ce:	60f8      	str	r0, [r7, #12]
	value = value << 4;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	011b      	lsls	r3, r3, #4
 80013d4:	60fb      	str	r3, [r7, #12]
	value += hexchar2int(c[1]);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3301      	adds	r3, #1
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 f809 	bl	80013f4 <hexchar2int>
 80013e2:	4602      	mov	r2, r0
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]

	return value;
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <hexchar2int>:


int hexchar2int(char c)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9')
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	2b2f      	cmp	r3, #47	@ 0x2f
 8001402:	d905      	bls.n	8001410 <hexchar2int+0x1c>
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	2b39      	cmp	r3, #57	@ 0x39
 8001408:	d802      	bhi.n	8001410 <hexchar2int+0x1c>
        return (c - '0');
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	3b30      	subs	r3, #48	@ 0x30
 800140e:	e013      	b.n	8001438 <hexchar2int+0x44>
    if (c >= 'A' && c <= 'F')
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b40      	cmp	r3, #64	@ 0x40
 8001414:	d905      	bls.n	8001422 <hexchar2int+0x2e>
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	2b46      	cmp	r3, #70	@ 0x46
 800141a:	d802      	bhi.n	8001422 <hexchar2int+0x2e>
        return (c - 'A' + 10);
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	3b37      	subs	r3, #55	@ 0x37
 8001420:	e00a      	b.n	8001438 <hexchar2int+0x44>
    if (c >= 'a' && c <= 'f')
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	2b60      	cmp	r3, #96	@ 0x60
 8001426:	d905      	bls.n	8001434 <hexchar2int+0x40>
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	2b66      	cmp	r3, #102	@ 0x66
 800142c:	d802      	bhi.n	8001434 <hexchar2int+0x40>
        return (c - 'a' + 10);
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	3b57      	subs	r3, #87	@ 0x57
 8001432:	e001      	b.n	8001438 <hexchar2int+0x44>
    return (-1);
 8001434:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <checksum_valid>:


// source: file:///C:/craigpeacock/NMEA-GPS
int checksum_valid(char *string)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	char *checksum_str;
	int checksum, i;
	unsigned char calculated_checksum = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	74fb      	strb	r3, [r7, #19]

	// Checksum is postcede by *
	if ((checksum_str = strchr(string, '*')))
 8001450:	212a      	movs	r1, #42	@ 0x2a
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f00f fd3b 	bl	8010ece <strchr>
 8001458:	60f8      	str	r0, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d022      	beq.n	80014a6 <checksum_valid+0x62>
	{
		*checksum_str = '\0'; // Remove checksum from string
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
		// Calculate checksum, starting after $ (i = 1)
		for (i = 1; i < strlen(string); i++)
 8001466:	2301      	movs	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	e009      	b.n	8001480 <checksum_valid+0x3c>
			calculated_checksum = calculated_checksum ^ string[i];
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	781a      	ldrb	r2, [r3, #0]
 8001474:	7cfb      	ldrb	r3, [r7, #19]
 8001476:	4053      	eors	r3, r2
 8001478:	74fb      	strb	r3, [r7, #19]
		for (i = 1; i < strlen(string); i++)
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	3301      	adds	r3, #1
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7fe fea5 	bl	80001d0 <strlen>
 8001486:	4602      	mov	r2, r0
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	429a      	cmp	r2, r3
 800148c:	d8ee      	bhi.n	800146c <checksum_valid+0x28>

		checksum = hex2int((char *)checksum_str+1);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	3301      	adds	r3, #1
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ff92 	bl	80013bc <hex2int>
 8001498:	60b8      	str	r0, [r7, #8]
		//printf("Checksum Str [%s], Checksum %02X, Calculated Checksum %02X\r\n",(char *)checksum_str+1, checksum, calculated_checksum);
		if (checksum == calculated_checksum)
 800149a:	7cfb      	ldrb	r3, [r7, #19]
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d101      	bne.n	80014a6 <checksum_valid+0x62>
			return (1);
 80014a2:	2301      	movs	r3, #1
 80014a4:	e000      	b.n	80014a8 <checksum_valid+0x64>
	}

	return (0);
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <LED_Task1>:
* @brief Tasks die ledjes manipuleren nadat ze eerst afgeschermd zijn met mutex semaphores.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task1 (void *argument)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 80014b8:	4820      	ldr	r0, [pc, #128]	@ (800153c <LED_Task1+0x8c>)
 80014ba:	f000 fce7 	bl	8001e8c <UART_puts>
 80014be:	4820      	ldr	r0, [pc, #128]	@ (8001540 <LED_Task1+0x90>)
 80014c0:	f000 fce4 	bl	8001e8c <UART_puts>
	int i, leds;

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); /* wacht op toegang tot de semaphore;
 80014c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001544 <LED_Task1+0x94>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	4618      	mov	r0, r3
 80014ce:	f00b fdbf 	bl	800d050 <xQueueSemaphoreTake>
	    * de code hieronder wordt alleen uitgevoerd nadat ik de mutex heb gekregen.
	    * andere tasks die op deze mutex wachten, kunnen pas door nadat ik de mutex
	    * heb vrijgegeven met Give.
	    */
		leds = 128; // start at led nr. 8
 80014d2:	2380      	movs	r3, #128	@ 0x80
 80014d4:	60bb      	str	r3, [r7, #8]
		for (i=0; i<8; i++, leds>>=1)
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	e01c      	b.n	8001516 <LED_Task1+0x66>
		{
        	LED_put(leds); // set leds
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 fc87 	bl	8001df4 <LED_put>
           	osDelay(os_delay);
 80014e6:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <LED_Task1+0x98>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f00a fd90 	bl	800c010 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 80014f0:	4b16      	ldr	r3, [pc, #88]	@ (800154c <LED_Task1+0x9c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d006      	beq.n	800150a <LED_Task1+0x5a>
			{
	    		UART_puts("\r\nM1 led: "); UART_putint(leds);
 80014fc:	4814      	ldr	r0, [pc, #80]	@ (8001550 <LED_Task1+0xa0>)
 80014fe:	f000 fcc5 	bl	8001e8c <UART_puts>
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4618      	mov	r0, r3
 8001506:	f000 fcdd 	bl	8001ec4 <UART_putint>
		for (i=0; i<8; i++, leds>>=1)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	3301      	adds	r3, #1
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	105b      	asrs	r3, r3, #1
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2b07      	cmp	r3, #7
 800151a:	dddf      	ble.n	80014dc <LED_Task1+0x2c>
			}
   		}
     	xSemaphoreGive(hLED_Sem); // geef de semaphore weer vrij voor een ander
 800151c:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <LED_Task1+0x94>)
 800151e:	6818      	ldr	r0, [r3, #0]
 8001520:	2300      	movs	r3, #0
 8001522:	2200      	movs	r2, #0
 8001524:	2100      	movs	r1, #0
 8001526:	f00b fb11 	bl	800cb4c <xQueueGenericSend>
    	taskYIELD(); // done, force context switch, otherwise freeRTOS stays in this task
 800152a:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <LED_Task1+0xa4>)
 800152c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	f3bf 8f4f 	dsb	sy
 8001536:	f3bf 8f6f 	isb	sy
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); /* wacht op toegang tot de semaphore;
 800153a:	e7c3      	b.n	80014c4 <LED_Task1+0x14>
 800153c:	080129c0 	.word	0x080129c0
 8001540:	080128a4 	.word	0x080128a4
 8001544:	20000310 	.word	0x20000310
 8001548:	20000248 	.word	0x20000248
 800154c:	20000304 	.word	0x20000304
 8001550:	080128b0 	.word	0x080128b0
 8001554:	e000ed04 	.word	0xe000ed04

08001558 <LED_Task2>:
* @brief Tasks die ledjes manipuleren nadat ze eerst afgeschermd zijn met mutex semaphores.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task2 (void *argument)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8001560:	4820      	ldr	r0, [pc, #128]	@ (80015e4 <LED_Task2+0x8c>)
 8001562:	f000 fc93 	bl	8001e8c <UART_puts>
 8001566:	4820      	ldr	r0, [pc, #128]	@ (80015e8 <LED_Task2+0x90>)
 8001568:	f000 fc90 	bl	8001e8c <UART_puts>
	int i, leds;

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to enter
 800156c:	4b1f      	ldr	r3, [pc, #124]	@ (80015ec <LED_Task2+0x94>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f04f 31ff 	mov.w	r1, #4294967295
 8001574:	4618      	mov	r0, r3
 8001576:	f00b fd6b 	bl	800d050 <xQueueSemaphoreTake>
		leds = 1;
 800157a:	2301      	movs	r3, #1
 800157c:	60bb      	str	r3, [r7, #8]
		for (i=0; i<8; i++, leds<<=1)
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	e01c      	b.n	80015be <LED_Task2+0x66>
		{
        	LED_put(leds); // set leds
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	b29b      	uxth	r3, r3
 8001588:	4618      	mov	r0, r3
 800158a:	f000 fc33 	bl	8001df4 <LED_put>
          	osDelay(os_delay);
 800158e:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <LED_Task2+0x98>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f00a fd3c 	bl	800c010 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 8001598:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <LED_Task2+0x9c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d006      	beq.n	80015b2 <LED_Task2+0x5a>
			{
	    		UART_puts("\r\n\tM2 led: "); UART_putint(leds);
 80015a4:	4814      	ldr	r0, [pc, #80]	@ (80015f8 <LED_Task2+0xa0>)
 80015a6:	f000 fc71 	bl	8001e8c <UART_puts>
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 fc89 	bl	8001ec4 <UART_putint>
		for (i=0; i<8; i++, leds<<=1)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	3301      	adds	r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2b07      	cmp	r3, #7
 80015c2:	dddf      	ble.n	8001584 <LED_Task2+0x2c>
			}
   		}
     	xSemaphoreGive(hLED_Sem); // free mutex
 80015c4:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <LED_Task2+0x94>)
 80015c6:	6818      	ldr	r0, [r3, #0]
 80015c8:	2300      	movs	r3, #0
 80015ca:	2200      	movs	r2, #0
 80015cc:	2100      	movs	r1, #0
 80015ce:	f00b fabd 	bl	800cb4c <xQueueGenericSend>
       	taskYIELD(); // done, force context switch, otherwise freeRTOS stays in this task
 80015d2:	4b0a      	ldr	r3, [pc, #40]	@ (80015fc <LED_Task2+0xa4>)
 80015d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	f3bf 8f4f 	dsb	sy
 80015de:	f3bf 8f6f 	isb	sy
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to enter
 80015e2:	e7c3      	b.n	800156c <LED_Task2+0x14>
 80015e4:	080129cc 	.word	0x080129cc
 80015e8:	080128a4 	.word	0x080128a4
 80015ec:	20000310 	.word	0x20000310
 80015f0:	20000248 	.word	0x20000248
 80015f4:	20000304 	.word	0x20000304
 80015f8:	080128bc 	.word	0x080128bc
 80015fc:	e000ed04 	.word	0xe000ed04

08001600 <LED_Task3>:
* Task 3 en 4 werken daarnaast nog met tasknotification.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task3 (void *argument)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	int          i, leds;
	osThreadId_t hTask4;

	if (!(hTask4 = xTaskGetHandle("LED_Task4")))
 8001608:	4830      	ldr	r0, [pc, #192]	@ (80016cc <LED_Task3+0xcc>)
 800160a:	f00c fe6d 	bl	800e2e8 <xTaskGetHandle>
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <LED_Task3+0x1c>
	   error_HaltOS("Err:hTask4");
 8001616:	482e      	ldr	r0, [pc, #184]	@ (80016d0 <LED_Task3+0xd0>)
 8001618:	f7ff fb2e 	bl	8000c78 <error_HaltOS>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 800161c:	482d      	ldr	r0, [pc, #180]	@ (80016d4 <LED_Task3+0xd4>)
 800161e:	f000 fc35 	bl	8001e8c <UART_puts>
 8001622:	482d      	ldr	r0, [pc, #180]	@ (80016d8 <LED_Task3+0xd8>)
 8001624:	f000 fc32 	bl	8001e8c <UART_puts>

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to get in...
 8001628:	4b2c      	ldr	r3, [pc, #176]	@ (80016dc <LED_Task3+0xdc>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f04f 31ff 	mov.w	r1, #4294967295
 8001630:	4618      	mov	r0, r3
 8001632:	f00b fd0d 	bl	800d050 <xQueueSemaphoreTake>

	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e02d      	b.n	8001698 <LED_Task3+0x98>
	    {
	    	if 		(i==0)	leds = 8+16; // zichtbaar: 1. waarde i, 2. welke leds aan gaan
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d102      	bne.n	8001648 <LED_Task3+0x48>
 8001642:	2318      	movs	r3, #24
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	e00d      	b.n	8001664 <LED_Task3+0x64>
	    	else if (i==1)  leds = 4+32; // ... had ook met switch-case gekund
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d102      	bne.n	8001654 <LED_Task3+0x54>
 800164e:	2324      	movs	r3, #36	@ 0x24
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	e007      	b.n	8001664 <LED_Task3+0x64>
	    	else if (i==2)  leds = 2+64;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d102      	bne.n	8001660 <LED_Task3+0x60>
 800165a:	2342      	movs	r3, #66	@ 0x42
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	e001      	b.n	8001664 <LED_Task3+0x64>
	    	else 			leds = 1+128;
 8001660:	2381      	movs	r3, #129	@ 0x81
 8001662:	613b      	str	r3, [r7, #16]

	    	LED_put(leds);     // set leds
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	b29b      	uxth	r3, r3
 8001668:	4618      	mov	r0, r3
 800166a:	f000 fbc3 	bl	8001df4 <LED_put>
	    	osDelay(os_delay); // snelheid bepalen, kan veranderd worden via user interface
 800166e:	4b1c      	ldr	r3, [pc, #112]	@ (80016e0 <LED_Task3+0xe0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f00a fccc 	bl	800c010 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 8001678:	4b1a      	ldr	r3, [pc, #104]	@ (80016e4 <LED_Task3+0xe4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b00      	cmp	r3, #0
 8001682:	d006      	beq.n	8001692 <LED_Task3+0x92>
			{
				UART_puts("\r\n\t\tM3 led: "); UART_putint(leds);
 8001684:	4818      	ldr	r0, [pc, #96]	@ (80016e8 <LED_Task3+0xe8>)
 8001686:	f000 fc01 	bl	8001e8c <UART_puts>
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4618      	mov	r0, r3
 800168e:	f000 fc19 	bl	8001ec4 <UART_putint>
	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	3301      	adds	r3, #1
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	2b03      	cmp	r3, #3
 800169c:	ddce      	ble.n	800163c <LED_Task3+0x3c>
			}
	    }

     	xSemaphoreGive(hLED_Sem); // free mutex
 800169e:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <LED_Task3+0xdc>)
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	2300      	movs	r3, #0
 80016a4:	2200      	movs	r2, #0
 80016a6:	2100      	movs	r1, #0
 80016a8:	f00b fa50 	bl	800cb4c <xQueueGenericSend>

     	xTaskNotifyGive(hTask4); // give the ball to mutextask4
 80016ac:	2300      	movs	r3, #0
 80016ae:	2202      	movs	r2, #2
 80016b0:	2100      	movs	r1, #0
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f00d fd48 	bl	800f148 <xTaskGenericNotify>
		osDelay(200);
 80016b8:	20c8      	movs	r0, #200	@ 0xc8
 80016ba:	f00a fca9 	bl	800c010 <osDelay>

		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for task 4
 80016be:	f04f 31ff 	mov.w	r1, #4294967295
 80016c2:	2001      	movs	r0, #1
 80016c4:	f00d fc94 	bl	800eff0 <ulTaskNotifyTake>
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to get in...
 80016c8:	e7ae      	b.n	8001628 <LED_Task3+0x28>
 80016ca:	bf00      	nop
 80016cc:	080128c8 	.word	0x080128c8
 80016d0:	080128d4 	.word	0x080128d4
 80016d4:	080129d8 	.word	0x080129d8
 80016d8:	080128a4 	.word	0x080128a4
 80016dc:	20000310 	.word	0x20000310
 80016e0:	20000248 	.word	0x20000248
 80016e4:	20000304 	.word	0x20000304
 80016e8:	080128e0 	.word	0x080128e0

080016ec <LED_Task4>:
* Task 3 en 4 werken daarnaast nog met tasknotification.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task4 (void *argument)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	int          i, leds;
	osThreadId_t hTask3;

	if (!(hTask3 = xTaskGetHandle("LED_Task3")))
 80016f4:	4830      	ldr	r0, [pc, #192]	@ (80017b8 <LED_Task4+0xcc>)
 80016f6:	f00c fdf7 	bl	800e2e8 <xTaskGetHandle>
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d102      	bne.n	8001708 <LED_Task4+0x1c>
	   error_HaltOS("Err:hTask3");
 8001702:	482e      	ldr	r0, [pc, #184]	@ (80017bc <LED_Task4+0xd0>)
 8001704:	f7ff fab8 	bl	8000c78 <error_HaltOS>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8001708:	482d      	ldr	r0, [pc, #180]	@ (80017c0 <LED_Task4+0xd4>)
 800170a:	f000 fbbf 	bl	8001e8c <UART_puts>
 800170e:	482d      	ldr	r0, [pc, #180]	@ (80017c4 <LED_Task4+0xd8>)
 8001710:	f000 fbbc 	bl	8001e8c <UART_puts>

	while(TRUE)
	{
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for notification
 8001714:	f04f 31ff 	mov.w	r1, #4294967295
 8001718:	2001      	movs	r0, #1
 800171a:	f00d fc69 	bl	800eff0 <ulTaskNotifyTake>

	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait for mutex
 800171e:	4b2a      	ldr	r3, [pc, #168]	@ (80017c8 <LED_Task4+0xdc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f04f 31ff 	mov.w	r1, #4294967295
 8001726:	4618      	mov	r0, r3
 8001728:	f00b fc92 	bl	800d050 <xQueueSemaphoreTake>

	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	e02d      	b.n	800178e <LED_Task4+0xa2>
	    {
	    	if 		(i==0)	leds = 1+128; // zichtbaar: 1. waarde i, 2. welke leds aan gaan
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d102      	bne.n	800173e <LED_Task4+0x52>
 8001738:	2381      	movs	r3, #129	@ 0x81
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	e00d      	b.n	800175a <LED_Task4+0x6e>
	    	else if (i==1)  leds = 2+64;  // had ook met switch-case gekund, maar dit is korter...
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d102      	bne.n	800174a <LED_Task4+0x5e>
 8001744:	2342      	movs	r3, #66	@ 0x42
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	e007      	b.n	800175a <LED_Task4+0x6e>
	    	else if (i==2)  leds = 4+32;
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d102      	bne.n	8001756 <LED_Task4+0x6a>
 8001750:	2324      	movs	r3, #36	@ 0x24
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	e001      	b.n	800175a <LED_Task4+0x6e>
	    	else 			leds = 8+16;
 8001756:	2318      	movs	r3, #24
 8001758:	613b      	str	r3, [r7, #16]

	    	LED_put(leds);     // set leds
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	b29b      	uxth	r3, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f000 fb48 	bl	8001df4 <LED_put>
	    	osDelay(os_delay); // snelheid bepalen, waarde os_delay kan veranderd worden via user interface
 8001764:	4b19      	ldr	r3, [pc, #100]	@ (80017cc <LED_Task4+0xe0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f00a fc51 	bl	800c010 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 800176e:	4b18      	ldr	r3, [pc, #96]	@ (80017d0 <LED_Task4+0xe4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	d006      	beq.n	8001788 <LED_Task4+0x9c>
			{
				UART_puts("\r\n\t\t\tM4 led: "); UART_putint(leds);
 800177a:	4816      	ldr	r0, [pc, #88]	@ (80017d4 <LED_Task4+0xe8>)
 800177c:	f000 fb86 	bl	8001e8c <UART_puts>
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	4618      	mov	r0, r3
 8001784:	f000 fb9e 	bl	8001ec4 <UART_putint>
	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	3301      	adds	r3, #1
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	2b03      	cmp	r3, #3
 8001792:	ddce      	ble.n	8001732 <LED_Task4+0x46>
			}
	    }

     	xSemaphoreGive(hLED_Sem); // free mutex
 8001794:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <LED_Task4+0xdc>)
 8001796:	6818      	ldr	r0, [r3, #0]
 8001798:	2300      	movs	r3, #0
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	f00b f9d5 	bl	800cb4c <xQueueGenericSend>
		osDelay(200);
 80017a2:	20c8      	movs	r0, #200	@ 0xc8
 80017a4:	f00a fc34 	bl	800c010 <osDelay>

    	xTaskNotifyGive(hTask3); // give the ball back to task 3
 80017a8:	2300      	movs	r3, #0
 80017aa:	2202      	movs	r2, #2
 80017ac:	2100      	movs	r1, #0
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f00d fcca 	bl	800f148 <xTaskGenericNotify>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for notification
 80017b4:	e7ae      	b.n	8001714 <LED_Task4+0x28>
 80017b6:	bf00      	nop
 80017b8:	080128f0 	.word	0x080128f0
 80017bc:	080128fc 	.word	0x080128fc
 80017c0:	080129e4 	.word	0x080129e4
 80017c4:	080128a4 	.word	0x080128a4
 80017c8:	20000310 	.word	0x20000310
 80017cc:	20000248 	.word	0x20000248
 80017d0:	20000304 	.word	0x20000304
 80017d4:	08012908 	.word	0x08012908

080017d8 <Student_task1>:
* @brief Oefentask voor studenten
* @param argument, kan evt vanuit tasks gebruikt worden
* @return void
*/
void Student_task1 (void *argument)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b098      	sub	sp, #96	@ 0x60
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 80017e0:	4810      	ldr	r0, [pc, #64]	@ (8001824 <Student_task1+0x4c>)
 80017e2:	f000 fb53 	bl	8001e8c <UART_puts>
 80017e6:	4810      	ldr	r0, [pc, #64]	@ (8001828 <Student_task1+0x50>)
 80017e8:	f000 fb50 	bl	8001e8c <UART_puts>
	char buf[80];
	unsigned int i = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	65fb      	str	r3, [r7, #92]	@ 0x5c

	while(TRUE)
	{
       	osDelay(1000);
 80017f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017f4:	f00a fc0c 	bl	800c010 <osDelay>

		if (Uart_debug_out & STUDENT_DEBUG_OUT)
 80017f8:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <Student_task1+0x54>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f5      	beq.n	80017f0 <Student_task1+0x18>
		{
	       	sprintf(buf, "\r\n%s: %u", __func__, i++);
 8001804:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800180a:	f107 000c 	add.w	r0, r7, #12
 800180e:	4a05      	ldr	r2, [pc, #20]	@ (8001824 <Student_task1+0x4c>)
 8001810:	4907      	ldr	r1, [pc, #28]	@ (8001830 <Student_task1+0x58>)
 8001812:	f00f fad5 	bl	8010dc0 <siprintf>
			UART_puts(buf);
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	4618      	mov	r0, r3
 800181c:	f000 fb36 	bl	8001e8c <UART_puts>
       	osDelay(1000);
 8001820:	e7e6      	b.n	80017f0 <Student_task1+0x18>
 8001822:	bf00      	nop
 8001824:	080129f0 	.word	0x080129f0
 8001828:	08012918 	.word	0x08012918
 800182c:	20000304 	.word	0x20000304
 8001830:	08012924 	.word	0x08012924

08001834 <BUZZER_put>:
}

// Maak een piepje met meegegeven lengte
// toevoeging om compatibel te blijven met ARM v4.2
void BUZZER_put(unsigned int time)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
    volatile unsigned int i;
    volatile unsigned int k=0;
 800183c:	2300      	movs	r3, #0
 800183e:	60bb      	str	r3, [r7, #8]

	while (k++<100)
 8001840:	e023      	b.n	800188a <BUZZER_put+0x56>
    {
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8001842:	2201      	movs	r2, #1
 8001844:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001848:	4815      	ldr	r0, [pc, #84]	@ (80018a0 <BUZZER_put+0x6c>)
 800184a:	f001 fe3d 	bl	80034c8 <HAL_GPIO_WritePin>
		for (i=0;i<(time+k);i++);
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	e002      	b.n	800185a <BUZZER_put+0x26>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3301      	adds	r3, #1
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	441a      	add	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	429a      	cmp	r2, r3
 8001864:	d8f6      	bhi.n	8001854 <BUZZER_put+0x20>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800186c:	480c      	ldr	r0, [pc, #48]	@ (80018a0 <BUZZER_put+0x6c>)
 800186e:	f001 fe2b 	bl	80034c8 <HAL_GPIO_WritePin>
		for (i=0;(i<time+k);i++);
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	e002      	b.n	800187e <BUZZER_put+0x4a>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3301      	adds	r3, #1
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	441a      	add	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	429a      	cmp	r2, r3
 8001888:	d8f6      	bhi.n	8001878 <BUZZER_put+0x44>
	while (k++<100)
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	60ba      	str	r2, [r7, #8]
 8001890:	2b63      	cmp	r3, #99	@ 0x63
 8001892:	d9d6      	bls.n	8001842 <BUZZER_put+0xe>
	}
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40020800 	.word	0x40020800

080018a4 <KEYS_init>:
void KEYS_init(void)
/* Keys initialize
 * In this function the ports are set for the keyboard.
 * The rows are outputs and the columns are input.
 */
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	4b18      	ldr	r3, [pc, #96]	@ (8001910 <KEYS_init+0x6c>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a17      	ldr	r2, [pc, #92]	@ (8001910 <KEYS_init+0x6c>)
 80018b4:	f043 0308 	orr.w	r3, r3, #8
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <KEYS_init+0x6c>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef gpio;
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80018c6:	2301      	movs	r3, #1
 80018c8:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
	gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ce:	2303      	movs	r3, #3
 80018d0:	613b      	str	r3, [r7, #16]

	gpio.Pin = KEY_ROW;
 80018d2:	f640 030e 	movw	r3, #2062	@ 0x80e
 80018d6:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(PKEY_ROW, &gpio);
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	4619      	mov	r1, r3
 80018dc:	480d      	ldr	r0, [pc, #52]	@ (8001914 <KEYS_init+0x70>)
 80018de:	f001 fc3f 	bl	8003160 <HAL_GPIO_Init>

	gpio.Pin = KEY_COL;
 80018e2:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80018e6:	607b      	str	r3, [r7, #4]
	gpio.Mode = GPIO_MODE_INPUT;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_PULLDOWN;
 80018ec:	2302      	movs	r3, #2
 80018ee:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PKEY_COL, &gpio);
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	4619      	mov	r1, r3
 80018f4:	4807      	ldr	r0, [pc, #28]	@ (8001914 <KEYS_init+0x70>)
 80018f6:	f001 fc33 	bl	8003160 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_ROW, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	f640 010e 	movw	r1, #2062	@ 0x80e
 8001900:	4804      	ldr	r0, [pc, #16]	@ (8001914 <KEYS_init+0x70>)
 8001902:	f001 fde1 	bl	80034c8 <HAL_GPIO_WritePin>
}
 8001906:	bf00      	nop
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800
 8001914:	40020c00 	.word	0x40020c00

08001918 <KEYS_initISR>:

void KEYS_initISR(int hilo)
/* Keys initialize for ISR
 * Set all lines high
 * */
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, hilo);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	461a      	mov	r2, r3
 8001926:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800192a:	480e      	ldr	r0, [pc, #56]	@ (8001964 <KEYS_initISR+0x4c>)
 800192c:	f001 fdcc 	bl	80034c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, hilo);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	b2db      	uxtb	r3, r3
 8001934:	461a      	mov	r2, r3
 8001936:	2102      	movs	r1, #2
 8001938:	480a      	ldr	r0, [pc, #40]	@ (8001964 <KEYS_initISR+0x4c>)
 800193a:	f001 fdc5 	bl	80034c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, hilo);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	461a      	mov	r2, r3
 8001944:	2108      	movs	r1, #8
 8001946:	4807      	ldr	r0, [pc, #28]	@ (8001964 <KEYS_initISR+0x4c>)
 8001948:	f001 fdbe 	bl	80034c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, hilo);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	461a      	mov	r2, r3
 8001952:	2104      	movs	r1, #4
 8001954:	4803      	ldr	r0, [pc, #12]	@ (8001964 <KEYS_initISR+0x4c>)
 8001956:	f001 fdb7 	bl	80034c8 <HAL_GPIO_WritePin>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40020c00 	.word	0x40020c00

08001968 <KEYS_read>:
/* Keys read
 * This function reads which key is pressed.
 * It does so by making a row high and check if there is a connection with a column.
 * If there is a connection the value is returned.
 */
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
	unsigned int key = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	603b      	str	r3, [r7, #0]
	unsigned out = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800197c:	4827      	ldr	r0, [pc, #156]	@ (8001a1c <KEYS_read+0xb4>)
 800197e:	f001 fda3 	bl	80034c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, 1);
 8001982:	2201      	movs	r2, #1
 8001984:	2108      	movs	r1, #8
 8001986:	4825      	ldr	r0, [pc, #148]	@ (8001a1c <KEYS_read+0xb4>)
 8001988:	f001 fd9e 	bl	80034c8 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 800198c:	f000 f848 	bl	8001a20 <KEYS_kolom>
 8001990:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out= 12+key;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d002      	beq.n	800199e <KEYS_read+0x36>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	330c      	adds	r3, #12
 800199c:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2108      	movs	r1, #8
 80019a2:	481e      	ldr	r0, [pc, #120]	@ (8001a1c <KEYS_read+0xb4>)
 80019a4:	f001 fd90 	bl	80034c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, 1);
 80019a8:	2201      	movs	r2, #1
 80019aa:	2104      	movs	r1, #4
 80019ac:	481b      	ldr	r0, [pc, #108]	@ (8001a1c <KEYS_read+0xb4>)
 80019ae:	f001 fd8b 	bl	80034c8 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 80019b2:	f000 f835 	bl	8001a20 <KEYS_kolom>
 80019b6:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = 8+key;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d002      	beq.n	80019c4 <KEYS_read+0x5c>
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	3308      	adds	r3, #8
 80019c2:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2104      	movs	r1, #4
 80019c8:	4814      	ldr	r0, [pc, #80]	@ (8001a1c <KEYS_read+0xb4>)
 80019ca:	f001 fd7d 	bl	80034c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, 1);
 80019ce:	2201      	movs	r2, #1
 80019d0:	2102      	movs	r1, #2
 80019d2:	4812      	ldr	r0, [pc, #72]	@ (8001a1c <KEYS_read+0xb4>)
 80019d4:	f001 fd78 	bl	80034c8 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 80019d8:	f000 f822 	bl	8001a20 <KEYS_kolom>
 80019dc:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = 4+key;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <KEYS_read+0x82>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	3304      	adds	r3, #4
 80019e8:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2102      	movs	r1, #2
 80019ee:	480b      	ldr	r0, [pc, #44]	@ (8001a1c <KEYS_read+0xb4>)
 80019f0:	f001 fd6a 	bl	80034c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, 1);
 80019f4:	2201      	movs	r2, #1
 80019f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019fa:	4808      	ldr	r0, [pc, #32]	@ (8001a1c <KEYS_read+0xb4>)
 80019fc:	f001 fd64 	bl	80034c8 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 8001a00:	f000 f80e 	bl	8001a20 <KEYS_kolom>
 8001a04:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = key;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <KEYS_read+0xa8>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	607b      	str	r3, [r7, #4]

	return out;
 8001a10:	687b      	ldr	r3, [r7, #4]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40020c00 	.word	0x40020c00

08001a20 <KEYS_kolom>:
unsigned int KEYS_kolom(void)
/* Keys Column
 * In this function the columns are checked if there is a connection.
 * If a column has a connection the return value is the column number.
 */
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
	unsigned int key = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K1) == 1) key = 1;
 8001a2a:	2140      	movs	r1, #64	@ 0x40
 8001a2c:	4814      	ldr	r0, [pc, #80]	@ (8001a80 <KEYS_kolom+0x60>)
 8001a2e:	f001 fd33 	bl	8003498 <HAL_GPIO_ReadPin>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d101      	bne.n	8001a3c <KEYS_kolom+0x1c>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K2) == 1) key = 2;
 8001a3c:	2180      	movs	r1, #128	@ 0x80
 8001a3e:	4810      	ldr	r0, [pc, #64]	@ (8001a80 <KEYS_kolom+0x60>)
 8001a40:	f001 fd2a 	bl	8003498 <HAL_GPIO_ReadPin>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <KEYS_kolom+0x2e>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K3) == 1) key = 3;
 8001a4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a52:	480b      	ldr	r0, [pc, #44]	@ (8001a80 <KEYS_kolom+0x60>)
 8001a54:	f001 fd20 	bl	8003498 <HAL_GPIO_ReadPin>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <KEYS_kolom+0x42>
 8001a5e:	2303      	movs	r3, #3
 8001a60:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K4) == 1) key = 4;
 8001a62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a66:	4806      	ldr	r0, [pc, #24]	@ (8001a80 <KEYS_kolom+0x60>)
 8001a68:	f001 fd16 	bl	8003498 <HAL_GPIO_ReadPin>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <KEYS_kolom+0x56>
 8001a72:	2304      	movs	r3, #4
 8001a74:	607b      	str	r3, [r7, #4]
	return key;
 8001a76:	687b      	ldr	r3, [r7, #4]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40020c00 	.word	0x40020c00

08001a84 <ClearBits>:
static void LCD_writebyte(unsigned char data);

unsigned char curpos = 0; // remember cursorposition

void ClearBits(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_RESET);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2108      	movs	r1, #8
 8001a8c:	4809      	ldr	r0, [pc, #36]	@ (8001ab4 <ClearBits+0x30>)
 8001a8e:	f001 fd1b 	bl	80034c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_RESET);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2110      	movs	r1, #16
 8001a96:	4807      	ldr	r0, [pc, #28]	@ (8001ab4 <ClearBits+0x30>)
 8001a98:	f001 fd16 	bl	80034c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2120      	movs	r1, #32
 8001aa0:	4804      	ldr	r0, [pc, #16]	@ (8001ab4 <ClearBits+0x30>)
 8001aa2:	f001 fd11 	bl	80034c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_RESET);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2140      	movs	r1, #64	@ 0x40
 8001aaa:	4802      	ldr	r0, [pc, #8]	@ (8001ab4 <ClearBits+0x30>)
 8001aac:	f001 fd0c 	bl	80034c8 <HAL_GPIO_WritePin>
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <LCD_clear>:
   LCD_writecontrol(0x02); // cursur home
   curpos=0;               // reset position
}

void LCD_clear(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
   LCD_writecontrol(0x01); // clearscreen
 8001abc:	2001      	movs	r0, #1
 8001abe:	f000 f967 	bl	8001d90 <LCD_writecontrol>
   curpos=0;               // reset position
 8001ac2:	4b04      	ldr	r3, [pc, #16]	@ (8001ad4 <LCD_clear+0x1c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
   HAL_Delay(5);
 8001ac8:	2005      	movs	r0, #5
 8001aca:	f001 f9b1 	bl	8002e30 <HAL_Delay>
//   busyflag();

}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000367 	.word	0x20000367

08001ad8 <LCD_init>:


// init LCD
// Display wordt gebruikt in 4bits modus,2 regels, 5x7 dots font.
void LCD_init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio;	// GPIO init structure
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	4b44      	ldr	r3, [pc, #272]	@ (8001bf4 <LCD_init+0x11c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	4a43      	ldr	r2, [pc, #268]	@ (8001bf4 <LCD_init+0x11c>)
 8001ae8:	f043 0310 	orr.w	r3, r3, #16
 8001aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aee:	4b41      	ldr	r3, [pc, #260]	@ (8001bf4 <LCD_init+0x11c>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf4 <LCD_init+0x11c>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	4a3c      	ldr	r2, [pc, #240]	@ (8001bf4 <LCD_init+0x11c>)
 8001b04:	f043 0304 	orr.w	r3, r3, #4
 8001b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0a:	4b3a      	ldr	r3, [pc, #232]	@ (8001bf4 <LCD_init+0x11c>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	603b      	str	r3, [r7, #0]
 8001b1a:	4b36      	ldr	r3, [pc, #216]	@ (8001bf4 <LCD_init+0x11c>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	4a35      	ldr	r2, [pc, #212]	@ (8001bf4 <LCD_init+0x11c>)
 8001b20:	f043 0308 	orr.w	r3, r3, #8
 8001b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b26:	4b33      	ldr	r3, [pc, #204]	@ (8001bf4 <LCD_init+0x11c>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]

	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8001b32:	2301      	movs	r3, #1
 8001b34:	613b      	str	r3, [r7, #16]
	gpio.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
	gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	61bb      	str	r3, [r7, #24]
	gpio.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8001b3e:	2378      	movs	r3, #120	@ 0x78
 8001b40:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &gpio);
 8001b42:	f107 030c 	add.w	r3, r7, #12
 8001b46:	4619      	mov	r1, r3
 8001b48:	482b      	ldr	r0, [pc, #172]	@ (8001bf8 <LCD_init+0x120>)
 8001b4a:	f001 fb09 	bl	8003160 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 8001b4e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001b52:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &gpio);
 8001b54:	f107 030c 	add.w	r3, r7, #12
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4828      	ldr	r0, [pc, #160]	@ (8001bfc <LCD_init+0x124>)
 8001b5c:	f001 fb00 	bl	8003160 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_0;
 8001b60:	2301      	movs	r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &gpio);
 8001b64:	f107 030c 	add.w	r3, r7, #12
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4825      	ldr	r0, [pc, #148]	@ (8001c00 <LCD_init+0x128>)
 8001b6c:	f001 faf8 	bl	8003160 <HAL_GPIO_Init>
//	GPIOE -> MODER |= ( 1 << 12 );
//	GPIOC -> MODER |= ( 1 << 26 );
//	GPIOC -> MODER |= ( 1 << 30 );
//	GPIOC -> MODER |= ( 1 << 28 );

	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 8001b70:	2200      	movs	r2, #0
 8001b72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b76:	4821      	ldr	r0, [pc, #132]	@ (8001bfc <LCD_init+0x124>)
 8001b78:	f001 fca6 	bl	80034c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2101      	movs	r1, #1
 8001b80:	481f      	ldr	r0, [pc, #124]	@ (8001c00 <LCD_init+0x128>)
 8001b82:	f001 fca1 	bl	80034c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW, GPIO_PIN_RESET);
 8001b86:	2200      	movs	r2, #0
 8001b88:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b8c:	481b      	ldr	r0, [pc, #108]	@ (8001bfc <LCD_init+0x124>)
 8001b8e:	f001 fc9b 	bl	80034c8 <HAL_GPIO_WritePin>

	HAL_Delay(15);//15
 8001b92:	200f      	movs	r0, #15
 8001b94:	f001 f94c 	bl	8002e30 <HAL_Delay>

    LCD_writebyte(0x30); // function-set boot
 8001b98:	2030      	movs	r0, #48	@ 0x30
 8001b9a:	f000 f8c7 	bl	8001d2c <LCD_writebyte>
    HAL_Delay(70);
 8001b9e:	2046      	movs	r0, #70	@ 0x46
 8001ba0:	f001 f946 	bl	8002e30 <HAL_Delay>
    LCD_writebyte(0x30);
 8001ba4:	2030      	movs	r0, #48	@ 0x30
 8001ba6:	f000 f8c1 	bl	8001d2c <LCD_writebyte>
    LCD_writebyte(0x30);
 8001baa:	2030      	movs	r0, #48	@ 0x30
 8001bac:	f000 f8be 	bl	8001d2c <LCD_writebyte>

     // interface op 4 bits
    LCD_writebyte(0x02);
 8001bb0:	2002      	movs	r0, #2
 8001bb2:	f000 f8bb 	bl	8001d2c <LCD_writebyte>
    HAL_Delay(5);
 8001bb6:	2005      	movs	r0, #5
 8001bb8:	f001 f93a 	bl	8002e30 <HAL_Delay>

    LCD_writebyte(0x2C);  // function set
 8001bbc:	202c      	movs	r0, #44	@ 0x2c
 8001bbe:	f000 f8b5 	bl	8001d2c <LCD_writebyte>
    HAL_Delay(15);
 8001bc2:	200f      	movs	r0, #15
 8001bc4:	f001 f934 	bl	8002e30 <HAL_Delay>
    LCD_writebyte(0x0C);  // lcd aan
 8001bc8:	200c      	movs	r0, #12
 8001bca:	f000 f8af 	bl	8001d2c <LCD_writebyte>
    HAL_Delay(15);
 8001bce:	200f      	movs	r0, #15
 8001bd0:	f001 f92e 	bl	8002e30 <HAL_Delay>
    LCD_writebyte(0x01);  // clear screen
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	f000 f8a9 	bl	8001d2c <LCD_writebyte>
    HAL_Delay(15);
 8001bda:	200f      	movs	r0, #15
 8001bdc:	f001 f928 	bl	8002e30 <HAL_Delay>
    LCD_writebyte(0x06);  // entry mode set
 8001be0:	2006      	movs	r0, #6
 8001be2:	f000 f8a3 	bl	8001d2c <LCD_writebyte>
    HAL_Delay(15);
 8001be6:	200f      	movs	r0, #15
 8001be8:	f001 f922 	bl	8002e30 <HAL_Delay>
}
 8001bec:	bf00      	nop
 8001bee:	3720      	adds	r7, #32
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	40020c00 	.word	0x40020c00

08001c04 <LCD_putchar>:

// Zet meegegeven karakter op het scherm
void LCD_putchar(char c)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET);
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c14:	480b      	ldr	r0, [pc, #44]	@ (8001c44 <LCD_putchar+0x40>)
 8001c16:	f001 fc57 	bl	80034c8 <HAL_GPIO_WritePin>
    LCD_writebyte(c);
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 f885 	bl	8001d2c <LCD_writebyte>
    if (++curpos==32) // remember cursorpos
 8001c22:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <LCD_putchar+0x44>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	3301      	adds	r3, #1
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	4b07      	ldr	r3, [pc, #28]	@ (8001c48 <LCD_putchar+0x44>)
 8001c2c:	701a      	strb	r2, [r3, #0]
 8001c2e:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <LCD_putchar+0x44>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b20      	cmp	r3, #32
 8001c34:	d102      	bne.n	8001c3c <LCD_putchar+0x38>
    	curpos=0;
 8001c36:	4b04      	ldr	r3, [pc, #16]	@ (8001c48 <LCD_putchar+0x44>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40020800 	.word	0x40020800
 8001c48:	20000367 	.word	0x20000367

08001c4c <LCD_put>:

// Zet meegegeven string op het scherm
void LCD_put(char *string)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
#ifdef eenregel
   	unsigned char j;
#endif
    unsigned char k;
	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    for (k=0; string[k]; k++)
 8001c54:	2300      	movs	r3, #0
 8001c56:	73bb      	strb	r3, [r7, #14]
 8001c58:	e019      	b.n	8001c8e <LCD_put+0x42>
	{

#ifdef eenregel
    	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    	if(curpos==8) // at 8, goto next valid lcd-position
 8001c5a:	4b12      	ldr	r3, [pc, #72]	@ (8001ca4 <LCD_put+0x58>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d10b      	bne.n	8001c7a <LCD_put+0x2e>
        for (j=0; j<32; j++) LCD_cursor_right();
 8001c62:	2300      	movs	r3, #0
 8001c64:	73fb      	strb	r3, [r7, #15]
 8001c66:	e005      	b.n	8001c74 <LCD_put+0x28>
 8001c68:	2014      	movs	r0, #20
 8001c6a:	f000 f891 	bl	8001d90 <LCD_writecontrol>
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	3301      	adds	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	2b1f      	cmp	r3, #31
 8001c78:	d9f6      	bls.n	8001c68 <LCD_put+0x1c>
#endif
        LCD_putchar(string[k]);
 8001c7a:	7bbb      	ldrb	r3, [r7, #14]
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ffbe 	bl	8001c04 <LCD_putchar>
    for (k=0; string[k]; k++)
 8001c88:	7bbb      	ldrb	r3, [r7, #14]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	73bb      	strb	r3, [r7, #14]
 8001c8e:	7bbb      	ldrb	r3, [r7, #14]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	4413      	add	r3, r2
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1df      	bne.n	8001c5a <LCD_put+0xe>
    }
}
 8001c9a:	bf00      	nop
 8001c9c:	bf00      	nop
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000367 	.word	0x20000367

08001ca8 <LCD_puts>:

void LCD_puts(char *c)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
    LCD_put(c);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ffcb 	bl	8001c4c <LCD_put>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <LCD_writenibble>:
	LCD_put(&s[i+1]); // first, set i to starting pos, undo one i-- too much
}

// Stuurt een 4-bits commando naar het display
static void LCD_writenibble(unsigned char data)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
    ClearBits();
 8001cca:	f7ff fedb 	bl	8001a84 <ClearBits>

    if (data & 0x01)
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d004      	beq.n	8001ce2 <LCD_writenibble+0x22>
		HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_SET);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	2140      	movs	r1, #64	@ 0x40
 8001cdc:	4812      	ldr	r0, [pc, #72]	@ (8001d28 <LCD_writenibble+0x68>)
 8001cde:	f001 fbf3 	bl	80034c8 <HAL_GPIO_WritePin>

	if (data & 0x02)
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d004      	beq.n	8001cf6 <LCD_writenibble+0x36>
		HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_SET);
 8001cec:	2201      	movs	r2, #1
 8001cee:	2120      	movs	r1, #32
 8001cf0:	480d      	ldr	r0, [pc, #52]	@ (8001d28 <LCD_writenibble+0x68>)
 8001cf2:	f001 fbe9 	bl	80034c8 <HAL_GPIO_WritePin>

	if (data & 0x04)
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d004      	beq.n	8001d0a <LCD_writenibble+0x4a>
		HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_SET);
 8001d00:	2201      	movs	r2, #1
 8001d02:	2110      	movs	r1, #16
 8001d04:	4808      	ldr	r0, [pc, #32]	@ (8001d28 <LCD_writenibble+0x68>)
 8001d06:	f001 fbdf 	bl	80034c8 <HAL_GPIO_WritePin>

	if (data & 0x08)
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d004      	beq.n	8001d1e <LCD_writenibble+0x5e>
		HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_SET);
 8001d14:	2201      	movs	r2, #1
 8001d16:	2108      	movs	r1, #8
 8001d18:	4803      	ldr	r0, [pc, #12]	@ (8001d28 <LCD_writenibble+0x68>)
 8001d1a:	f001 fbd5 	bl	80034c8 <HAL_GPIO_WritePin>

}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000

08001d2c <LCD_writebyte>:


// Stuurt een 8-bits commando naar het display
static void LCD_writebyte(unsigned char data)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
    /* hoogste 4 bits */
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 8001d36:	2201      	movs	r2, #1
 8001d38:	2101      	movs	r1, #1
 8001d3a:	4814      	ldr	r0, [pc, #80]	@ (8001d8c <LCD_writebyte+0x60>)
 8001d3c:	f001 fbc4 	bl	80034c8 <HAL_GPIO_WritePin>
    LCD_writenibble((data>>4)&0x0F);
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	091b      	lsrs	r3, r3, #4
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff ffba 	bl	8001cc0 <LCD_writenibble>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2101      	movs	r1, #1
 8001d50:	480e      	ldr	r0, [pc, #56]	@ (8001d8c <LCD_writebyte+0x60>)
 8001d52:	f001 fbb9 	bl	80034c8 <HAL_GPIO_WritePin>

    HAL_Delay(2);
 8001d56:	2002      	movs	r0, #2
 8001d58:	f001 f86a 	bl	8002e30 <HAL_Delay>

    /* laagste 4 bits */
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	2101      	movs	r1, #1
 8001d60:	480a      	ldr	r0, [pc, #40]	@ (8001d8c <LCD_writebyte+0x60>)
 8001d62:	f001 fbb1 	bl	80034c8 <HAL_GPIO_WritePin>
    LCD_writenibble(data&0x0F);
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	f003 030f 	and.w	r3, r3, #15
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ffa6 	bl	8001cc0 <LCD_writenibble>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8001d74:	2200      	movs	r2, #0
 8001d76:	2101      	movs	r1, #1
 8001d78:	4804      	ldr	r0, [pc, #16]	@ (8001d8c <LCD_writebyte+0x60>)
 8001d7a:	f001 fba5 	bl	80034c8 <HAL_GPIO_WritePin>

    HAL_Delay(2);
 8001d7e:	2002      	movs	r0, #2
 8001d80:	f001 f856 	bl	8002e30 <HAL_Delay>
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40020c00 	.word	0x40020c00

08001d90 <LCD_writecontrol>:

// Stuurt een commando naar het display
void LCD_writecontrol(unsigned char data)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001da0:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <LCD_writecontrol+0x28>)
 8001da2:	f001 fb91 	bl	80034c8 <HAL_GPIO_WritePin>
    LCD_writebyte(data);
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ffbf 	bl	8001d2c <LCD_writebyte>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40020800 	.word	0x40020800

08001dbc <LED_init>:

/* LED Initialize
 * This function initializes the pins reset state
 */
void LED_init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P_LED_SER, LED_SER_Pin, GPIO_PIN_RESET);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001dc6:	4809      	ldr	r0, [pc, #36]	@ (8001dec <LED_init+0x30>)
 8001dc8:	f001 fb7e 	bl	80034c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_RESET);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dd2:	4807      	ldr	r0, [pc, #28]	@ (8001df0 <LED_init+0x34>)
 8001dd4:	f001 fb78 	bl	80034c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_SET);
 8001dd8:	2201      	movs	r2, #1
 8001dda:	2102      	movs	r1, #2
 8001ddc:	4804      	ldr	r0, [pc, #16]	@ (8001df0 <LED_init+0x34>)
 8001dde:	f001 fb73 	bl	80034c8 <HAL_GPIO_WritePin>
    LED_put(0);
 8001de2:	2000      	movs	r0, #0
 8001de4:	f000 f806 	bl	8001df4 <LED_put>
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40020000 	.word	0x40020000
 8001df0:	40020400 	.word	0x40020400

08001df4 <LED_put>:

/* LED put
 * This function puts an 8 bit value to the LEDs, where left is the LSB
 */
void LED_put(unsigned short led_byte)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	80fb      	strh	r3, [r7, #6]
     unsigned int i;

     for(i=128; i>=1; i>>=1)
 8001dfe:	2380      	movs	r3, #128	@ 0x80
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	e01c      	b.n	8001e3e <LED_put+0x4a>
     {
       	  HAL_GPIO_WritePin(P_LED_SER, LED_SER_Pin, (led_byte & i) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001e04:	88fa      	ldrh	r2, [r7, #6]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	bf14      	ite	ne
 8001e0e:	2301      	movne	r3, #1
 8001e10:	2300      	moveq	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e1a:	4811      	ldr	r0, [pc, #68]	@ (8001e60 <LED_put+0x6c>)
 8001e1c:	f001 fb54 	bl	80034c8 <HAL_GPIO_WritePin>

          HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_SET);
 8001e20:	2201      	movs	r2, #1
 8001e22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e26:	480f      	ldr	r0, [pc, #60]	@ (8001e64 <LED_put+0x70>)
 8001e28:	f001 fb4e 	bl	80034c8 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_RESET);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e32:	480c      	ldr	r0, [pc, #48]	@ (8001e64 <LED_put+0x70>)
 8001e34:	f001 fb48 	bl	80034c8 <HAL_GPIO_WritePin>
     for(i=128; i>=1; i>>=1)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	085b      	lsrs	r3, r3, #1
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1df      	bne.n	8001e04 <LED_put+0x10>
     }

     HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_SET);
 8001e44:	2201      	movs	r2, #1
 8001e46:	2102      	movs	r1, #2
 8001e48:	4806      	ldr	r0, [pc, #24]	@ (8001e64 <LED_put+0x70>)
 8001e4a:	f001 fb3d 	bl	80034c8 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_RESET);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2102      	movs	r1, #2
 8001e52:	4804      	ldr	r0, [pc, #16]	@ (8001e64 <LED_put+0x70>)
 8001e54:	f001 fb38 	bl	80034c8 <HAL_GPIO_WritePin>
}
 8001e58:	bf00      	nop
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40020000 	.word	0x40020000
 8001e64:	40020400 	.word	0x40020400

08001e68 <UART_putchar>:
 // done in CUBE

}

void UART_putchar(unsigned char c)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
	 HAL_UART_Transmit(&huart2, &c, 1, 100);
 8001e72:	1df9      	adds	r1, r7, #7
 8001e74:	2364      	movs	r3, #100	@ 0x64
 8001e76:	2201      	movs	r2, #1
 8001e78:	4803      	ldr	r0, [pc, #12]	@ (8001e88 <UART_putchar+0x20>)
 8001e7a:	f005 fc15 	bl	80076a8 <HAL_UART_Transmit>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200004a4 	.word	0x200004a4

08001e8c <UART_puts>:

void UART_puts(const char *s)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	volatile unsigned int i;

	for (i=0; s[i]; i++)
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	e009      	b.n	8001eae <UART_puts+0x22>
		UART_putchar(s[i]);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff ffe0 	bl	8001e68 <UART_putchar>
	for (i=0; s[i]; i++)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1ef      	bne.n	8001e9a <UART_puts+0xe>
}
 8001eba:	bf00      	nop
 8001ebc:	bf00      	nop
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <UART_putint>:
    return rc;
}

// Stuurt meegegeven getal uit op de UART
void UART_putint(unsigned int num)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
    UART_putnum(num, 10);
 8001ecc:	210a      	movs	r1, #10
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f804 	bl	8001edc <UART_putnum>
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <UART_putnum>:

// Stuurt meegegeven getal uit op de UART in het aangegeven getallenstelsel
void UART_putnum(unsigned int num, unsigned char deel)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	70fb      	strb	r3, [r7, #3]
    static unsigned char chars[16] = "0123456789ABCDEF";
    unsigned int rest;
    signed char c[16];
    signed int i=15;
 8001ee8:	230f      	movs	r3, #15
 8001eea:	61fb      	str	r3, [r7, #28]

    // Zet de integer om naar een string
    if(num==0)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d129      	bne.n	8001f46 <UART_putnum+0x6a>
    {
        c[i]='0';
 8001ef2:	f107 0208 	add.w	r2, r7, #8
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	4413      	add	r3, r2
 8001efa:	2230      	movs	r2, #48	@ 0x30
 8001efc:	701a      	strb	r2, [r3, #0]
        i--;
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	e030      	b.n	8001f68 <UART_putnum+0x8c>
    }
    else
    {
        while(num>0)
        {
            rest=num%deel;
 8001f06:	78fa      	ldrb	r2, [r7, #3]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8001f0e:	fb01 f202 	mul.w	r2, r1, r2
 8001f12:	1a9b      	subs	r3, r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
            num/=deel;
 8001f16:	78fb      	ldrb	r3, [r7, #3]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1e:	607b      	str	r3, [r7, #4]
            c[i]=chars[rest];
 8001f20:	4a15      	ldr	r2, [pc, #84]	@ (8001f78 <UART_putnum+0x9c>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	4413      	add	r3, r2
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	b259      	sxtb	r1, r3
 8001f2a:	f107 0208 	add.w	r2, r7, #8
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	4413      	add	r3, r2
 8001f32:	460a      	mov	r2, r1
 8001f34:	701a      	strb	r2, [r3, #0]
            i--;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	61fb      	str	r3, [r7, #28]

            if(i==0) // it ends here
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <UART_putnum+0x6a>
                num=0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	607b      	str	r3, [r7, #4]
        while(num>0)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1dc      	bne.n	8001f06 <UART_putnum+0x2a>
        }
    }

    // Stuur de string uit
    while(i<15)
 8001f4c:	e00c      	b.n	8001f68 <UART_putnum+0x8c>
    {
        i++;
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3301      	adds	r3, #1
 8001f52:	61fb      	str	r3, [r7, #28]
        UART_putchar(c[i]);
 8001f54:	f107 0208 	add.w	r2, r7, #8
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f993 3000 	ldrsb.w	r3, [r3]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff ff80 	bl	8001e68 <UART_putchar>
    while(i<15)
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	2b0e      	cmp	r3, #14
 8001f6c:	ddef      	ble.n	8001f4e <UART_putnum+0x72>
    }
}
 8001f6e:	bf00      	nop
 8001f70:	bf00      	nop
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	2000024c 	.word	0x2000024c

08001f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f80:	f000 ff14 	bl	8002dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f84:	f000 f830 	bl	8001fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f88:	f000 f980 	bl	800228c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001f8c:	f000 f896 	bl	80020bc <MX_I2C1_Init>
  MX_I2S3_Init();
 8001f90:	f000 f8c2 	bl	8002118 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001f94:	f000 f8f0 	bl	8002178 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001f98:	f000 f94e 	bl	8002238 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8001f9c:	f000 f922 	bl	80021e4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  LCD_init();
 8001fa0:	f7ff fd9a 	bl	8001ad8 <LCD_init>
  KEYS_init();
 8001fa4:	f7ff fc7e 	bl	80018a4 <KEYS_init>
  KEYS_initISR(1); // set all lines high once
 8001fa8:	2001      	movs	r0, #1
 8001faa:	f7ff fcb5 	bl	8001918 <KEYS_initISR>
  LED_init();
 8001fae:	f7ff ff05 	bl	8001dbc <LED_init>

  DisplayVersion();
 8001fb2:	f7fe fdf3 	bl	8000b9c <DisplayVersion>
  osDelay(500); // time to read version
 8001fb6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001fba:	f00a f829 	bl	800c010 <osDelay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001fbe:	f009 ff0d 	bl	800bddc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001fc2:	4a06      	ldr	r2, [pc, #24]	@ (8001fdc <main+0x60>)
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4806      	ldr	r0, [pc, #24]	@ (8001fe0 <main+0x64>)
 8001fc8:	f009 ff90 	bl	800beec <osThreadNew>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4a05      	ldr	r2, [pc, #20]	@ (8001fe4 <main+0x68>)
 8001fd0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001fd2:	f009 ff4f 	bl	800be74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001fd6:	bf00      	nop
 8001fd8:	e7fd      	b.n	8001fd6 <main+0x5a>
 8001fda:	bf00      	nop
 8001fdc:	08012a00 	.word	0x08012a00
 8001fe0:	080025b5 	.word	0x080025b5
 8001fe4:	200004ec 	.word	0x200004ec

08001fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b094      	sub	sp, #80	@ 0x50
 8001fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fee:	f107 0320 	add.w	r3, r7, #32
 8001ff2:	2230      	movs	r2, #48	@ 0x30
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f00e ff61 	bl	8010ebe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ffc:	f107 030c 	add.w	r3, r7, #12
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800200c:	2300      	movs	r3, #0
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	4b28      	ldr	r3, [pc, #160]	@ (80020b4 <SystemClock_Config+0xcc>)
 8002012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002014:	4a27      	ldr	r2, [pc, #156]	@ (80020b4 <SystemClock_Config+0xcc>)
 8002016:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800201a:	6413      	str	r3, [r2, #64]	@ 0x40
 800201c:	4b25      	ldr	r3, [pc, #148]	@ (80020b4 <SystemClock_Config+0xcc>)
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002028:	2300      	movs	r3, #0
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	4b22      	ldr	r3, [pc, #136]	@ (80020b8 <SystemClock_Config+0xd0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a21      	ldr	r2, [pc, #132]	@ (80020b8 <SystemClock_Config+0xd0>)
 8002032:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	4b1f      	ldr	r3, [pc, #124]	@ (80020b8 <SystemClock_Config+0xd0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002044:	2301      	movs	r3, #1
 8002046:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002048:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800204c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800204e:	2302      	movs	r3, #2
 8002050:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002052:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002056:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002058:	2308      	movs	r3, #8
 800205a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800205c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002060:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002062:	2302      	movs	r3, #2
 8002064:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002066:	2307      	movs	r3, #7
 8002068:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800206a:	f107 0320 	add.w	r3, r7, #32
 800206e:	4618      	mov	r0, r3
 8002070:	f004 f99a 	bl	80063a8 <HAL_RCC_OscConfig>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800207a:	f000 fadf 	bl	800263c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800207e:	230f      	movs	r3, #15
 8002080:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002082:	2302      	movs	r3, #2
 8002084:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800208a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800208e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002090:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002094:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002096:	f107 030c 	add.w	r3, r7, #12
 800209a:	2105      	movs	r1, #5
 800209c:	4618      	mov	r0, r3
 800209e:	f004 fbfb 	bl	8006898 <HAL_RCC_ClockConfig>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80020a8:	f000 fac8 	bl	800263c <Error_Handler>
  }
}
 80020ac:	bf00      	nop
 80020ae:	3750      	adds	r7, #80	@ 0x50
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40007000 	.word	0x40007000

080020bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020c0:	4b12      	ldr	r3, [pc, #72]	@ (800210c <MX_I2C1_Init+0x50>)
 80020c2:	4a13      	ldr	r2, [pc, #76]	@ (8002110 <MX_I2C1_Init+0x54>)
 80020c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020c6:	4b11      	ldr	r3, [pc, #68]	@ (800210c <MX_I2C1_Init+0x50>)
 80020c8:	4a12      	ldr	r2, [pc, #72]	@ (8002114 <MX_I2C1_Init+0x58>)
 80020ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020cc:	4b0f      	ldr	r3, [pc, #60]	@ (800210c <MX_I2C1_Init+0x50>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	@ (800210c <MX_I2C1_Init+0x50>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020d8:	4b0c      	ldr	r3, [pc, #48]	@ (800210c <MX_I2C1_Init+0x50>)
 80020da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020e0:	4b0a      	ldr	r3, [pc, #40]	@ (800210c <MX_I2C1_Init+0x50>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020e6:	4b09      	ldr	r3, [pc, #36]	@ (800210c <MX_I2C1_Init+0x50>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020ec:	4b07      	ldr	r3, [pc, #28]	@ (800210c <MX_I2C1_Init+0x50>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020f2:	4b06      	ldr	r3, [pc, #24]	@ (800210c <MX_I2C1_Init+0x50>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020f8:	4804      	ldr	r0, [pc, #16]	@ (800210c <MX_I2C1_Init+0x50>)
 80020fa:	f003 fb71 	bl	80057e0 <HAL_I2C_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002104:	f000 fa9a 	bl	800263c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000368 	.word	0x20000368
 8002110:	40005400 	.word	0x40005400
 8002114:	000186a0 	.word	0x000186a0

08002118 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800211c:	4b13      	ldr	r3, [pc, #76]	@ (800216c <MX_I2S3_Init+0x54>)
 800211e:	4a14      	ldr	r2, [pc, #80]	@ (8002170 <MX_I2S3_Init+0x58>)
 8002120:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002122:	4b12      	ldr	r3, [pc, #72]	@ (800216c <MX_I2S3_Init+0x54>)
 8002124:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002128:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800212a:	4b10      	ldr	r3, [pc, #64]	@ (800216c <MX_I2S3_Init+0x54>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002130:	4b0e      	ldr	r3, [pc, #56]	@ (800216c <MX_I2S3_Init+0x54>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002136:	4b0d      	ldr	r3, [pc, #52]	@ (800216c <MX_I2S3_Init+0x54>)
 8002138:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800213c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800213e:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <MX_I2S3_Init+0x54>)
 8002140:	4a0c      	ldr	r2, [pc, #48]	@ (8002174 <MX_I2S3_Init+0x5c>)
 8002142:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002144:	4b09      	ldr	r3, [pc, #36]	@ (800216c <MX_I2S3_Init+0x54>)
 8002146:	2200      	movs	r2, #0
 8002148:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800214a:	4b08      	ldr	r3, [pc, #32]	@ (800216c <MX_I2S3_Init+0x54>)
 800214c:	2200      	movs	r2, #0
 800214e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002150:	4b06      	ldr	r3, [pc, #24]	@ (800216c <MX_I2S3_Init+0x54>)
 8002152:	2200      	movs	r2, #0
 8002154:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002156:	4805      	ldr	r0, [pc, #20]	@ (800216c <MX_I2S3_Init+0x54>)
 8002158:	f003 fc86 	bl	8005a68 <HAL_I2S_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8002162:	f000 fa6b 	bl	800263c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	200003bc 	.word	0x200003bc
 8002170:	40003c00 	.word	0x40003c00
 8002174:	00017700 	.word	0x00017700

08002178 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800217c:	4b17      	ldr	r3, [pc, #92]	@ (80021dc <MX_SPI1_Init+0x64>)
 800217e:	4a18      	ldr	r2, [pc, #96]	@ (80021e0 <MX_SPI1_Init+0x68>)
 8002180:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002182:	4b16      	ldr	r3, [pc, #88]	@ (80021dc <MX_SPI1_Init+0x64>)
 8002184:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002188:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800218a:	4b14      	ldr	r3, [pc, #80]	@ (80021dc <MX_SPI1_Init+0x64>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002190:	4b12      	ldr	r3, [pc, #72]	@ (80021dc <MX_SPI1_Init+0x64>)
 8002192:	2200      	movs	r2, #0
 8002194:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002196:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <MX_SPI1_Init+0x64>)
 8002198:	2200      	movs	r2, #0
 800219a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800219c:	4b0f      	ldr	r3, [pc, #60]	@ (80021dc <MX_SPI1_Init+0x64>)
 800219e:	2200      	movs	r2, #0
 80021a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021a2:	4b0e      	ldr	r3, [pc, #56]	@ (80021dc <MX_SPI1_Init+0x64>)
 80021a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021aa:	4b0c      	ldr	r3, [pc, #48]	@ (80021dc <MX_SPI1_Init+0x64>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021b0:	4b0a      	ldr	r3, [pc, #40]	@ (80021dc <MX_SPI1_Init+0x64>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021b6:	4b09      	ldr	r3, [pc, #36]	@ (80021dc <MX_SPI1_Init+0x64>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021bc:	4b07      	ldr	r3, [pc, #28]	@ (80021dc <MX_SPI1_Init+0x64>)
 80021be:	2200      	movs	r2, #0
 80021c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80021c2:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <MX_SPI1_Init+0x64>)
 80021c4:	220a      	movs	r2, #10
 80021c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021c8:	4804      	ldr	r0, [pc, #16]	@ (80021dc <MX_SPI1_Init+0x64>)
 80021ca:	f004 fef9 	bl	8006fc0 <HAL_SPI_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80021d4:	f000 fa32 	bl	800263c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20000404 	.word	0x20000404
 80021e0:	40013000 	.word	0x40013000

080021e4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80021e8:	4b11      	ldr	r3, [pc, #68]	@ (8002230 <MX_UART4_Init+0x4c>)
 80021ea:	4a12      	ldr	r2, [pc, #72]	@ (8002234 <MX_UART4_Init+0x50>)
 80021ec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80021ee:	4b10      	ldr	r3, [pc, #64]	@ (8002230 <MX_UART4_Init+0x4c>)
 80021f0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80021f4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80021f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002230 <MX_UART4_Init+0x4c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80021fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002230 <MX_UART4_Init+0x4c>)
 80021fe:	2200      	movs	r2, #0
 8002200:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002202:	4b0b      	ldr	r3, [pc, #44]	@ (8002230 <MX_UART4_Init+0x4c>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002208:	4b09      	ldr	r3, [pc, #36]	@ (8002230 <MX_UART4_Init+0x4c>)
 800220a:	220c      	movs	r2, #12
 800220c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800220e:	4b08      	ldr	r3, [pc, #32]	@ (8002230 <MX_UART4_Init+0x4c>)
 8002210:	2200      	movs	r2, #0
 8002212:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002214:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <MX_UART4_Init+0x4c>)
 8002216:	2200      	movs	r2, #0
 8002218:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800221a:	4805      	ldr	r0, [pc, #20]	@ (8002230 <MX_UART4_Init+0x4c>)
 800221c:	f005 f9f4 	bl	8007608 <HAL_UART_Init>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002226:	f000 fa09 	bl	800263c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	2000045c 	.word	0x2000045c
 8002234:	40004c00 	.word	0x40004c00

08002238 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800223c:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <MX_USART2_UART_Init+0x4c>)
 800223e:	4a12      	ldr	r2, [pc, #72]	@ (8002288 <MX_USART2_UART_Init+0x50>)
 8002240:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002242:	4b10      	ldr	r3, [pc, #64]	@ (8002284 <MX_USART2_UART_Init+0x4c>)
 8002244:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002248:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800224a:	4b0e      	ldr	r3, [pc, #56]	@ (8002284 <MX_USART2_UART_Init+0x4c>)
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002250:	4b0c      	ldr	r3, [pc, #48]	@ (8002284 <MX_USART2_UART_Init+0x4c>)
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002256:	4b0b      	ldr	r3, [pc, #44]	@ (8002284 <MX_USART2_UART_Init+0x4c>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800225c:	4b09      	ldr	r3, [pc, #36]	@ (8002284 <MX_USART2_UART_Init+0x4c>)
 800225e:	220c      	movs	r2, #12
 8002260:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002262:	4b08      	ldr	r3, [pc, #32]	@ (8002284 <MX_USART2_UART_Init+0x4c>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002268:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <MX_USART2_UART_Init+0x4c>)
 800226a:	2200      	movs	r2, #0
 800226c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800226e:	4805      	ldr	r0, [pc, #20]	@ (8002284 <MX_USART2_UART_Init+0x4c>)
 8002270:	f005 f9ca 	bl	8007608 <HAL_UART_Init>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800227a:	f000 f9df 	bl	800263c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	200004a4 	.word	0x200004a4
 8002288:	40004400 	.word	0x40004400

0800228c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08c      	sub	sp, #48	@ 0x30
 8002290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002292:	f107 031c 	add.w	r3, r7, #28
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	60da      	str	r2, [r3, #12]
 80022a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	61bb      	str	r3, [r7, #24]
 80022a6:	4b8e      	ldr	r3, [pc, #568]	@ (80024e0 <MX_GPIO_Init+0x254>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	4a8d      	ldr	r2, [pc, #564]	@ (80024e0 <MX_GPIO_Init+0x254>)
 80022ac:	f043 0310 	orr.w	r3, r3, #16
 80022b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b2:	4b8b      	ldr	r3, [pc, #556]	@ (80024e0 <MX_GPIO_Init+0x254>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	61bb      	str	r3, [r7, #24]
 80022bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	4b87      	ldr	r3, [pc, #540]	@ (80024e0 <MX_GPIO_Init+0x254>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	4a86      	ldr	r2, [pc, #536]	@ (80024e0 <MX_GPIO_Init+0x254>)
 80022c8:	f043 0304 	orr.w	r3, r3, #4
 80022cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ce:	4b84      	ldr	r3, [pc, #528]	@ (80024e0 <MX_GPIO_Init+0x254>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	4b80      	ldr	r3, [pc, #512]	@ (80024e0 <MX_GPIO_Init+0x254>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	4a7f      	ldr	r2, [pc, #508]	@ (80024e0 <MX_GPIO_Init+0x254>)
 80022e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ea:	4b7d      	ldr	r3, [pc, #500]	@ (80024e0 <MX_GPIO_Init+0x254>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	4b79      	ldr	r3, [pc, #484]	@ (80024e0 <MX_GPIO_Init+0x254>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fe:	4a78      	ldr	r2, [pc, #480]	@ (80024e0 <MX_GPIO_Init+0x254>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6313      	str	r3, [r2, #48]	@ 0x30
 8002306:	4b76      	ldr	r3, [pc, #472]	@ (80024e0 <MX_GPIO_Init+0x254>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	4b72      	ldr	r3, [pc, #456]	@ (80024e0 <MX_GPIO_Init+0x254>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231a:	4a71      	ldr	r2, [pc, #452]	@ (80024e0 <MX_GPIO_Init+0x254>)
 800231c:	f043 0302 	orr.w	r3, r3, #2
 8002320:	6313      	str	r3, [r2, #48]	@ 0x30
 8002322:	4b6f      	ldr	r3, [pc, #444]	@ (80024e0 <MX_GPIO_Init+0x254>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	607b      	str	r3, [r7, #4]
 8002332:	4b6b      	ldr	r3, [pc, #428]	@ (80024e0 <MX_GPIO_Init+0x254>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002336:	4a6a      	ldr	r2, [pc, #424]	@ (80024e0 <MX_GPIO_Init+0x254>)
 8002338:	f043 0308 	orr.w	r3, r3, #8
 800233c:	6313      	str	r3, [r2, #48]	@ 0x30
 800233e:	4b68      	ldr	r3, [pc, #416]	@ (80024e0 <MX_GPIO_Init+0x254>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800234a:	2200      	movs	r2, #0
 800234c:	2108      	movs	r1, #8
 800234e:	4865      	ldr	r0, [pc, #404]	@ (80024e4 <MX_GPIO_Init+0x258>)
 8002350:	f001 f8ba 	bl	80034c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002354:	2201      	movs	r2, #1
 8002356:	2101      	movs	r1, #1
 8002358:	4863      	ldr	r0, [pc, #396]	@ (80024e8 <MX_GPIO_Init+0x25c>)
 800235a:	f001 f8b5 	bl	80034c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RCK_Pin|LED_SCK_Pin, GPIO_PIN_RESET);
 800235e:	2200      	movs	r2, #0
 8002360:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002364:	4861      	ldr	r0, [pc, #388]	@ (80024ec <MX_GPIO_Init+0x260>)
 8002366:	f001 f8af 	bl	80034c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800236a:	2200      	movs	r2, #0
 800236c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8002370:	485f      	ldr	r0, [pc, #380]	@ (80024f0 <MX_GPIO_Init+0x264>)
 8002372:	f001 f8a9 	bl	80034c8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8002376:	2200      	movs	r2, #0
 8002378:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800237c:	485a      	ldr	r0, [pc, #360]	@ (80024e8 <MX_GPIO_Init+0x25c>)
 800237e:	f001 f8a3 	bl	80034c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SER_GPIO_Port, LED_SER_Pin, GPIO_PIN_RESET);
 8002382:	2200      	movs	r2, #0
 8002384:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002388:	485a      	ldr	r0, [pc, #360]	@ (80024f4 <MX_GPIO_Init+0x268>)
 800238a:	f001 f89d 	bl	80034c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800238e:	2308      	movs	r3, #8
 8002390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002392:	2301      	movs	r3, #1
 8002394:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239a:	2300      	movs	r3, #0
 800239c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800239e:	f107 031c 	add.w	r3, r7, #28
 80023a2:	4619      	mov	r1, r3
 80023a4:	484f      	ldr	r0, [pc, #316]	@ (80024e4 <MX_GPIO_Init+0x258>)
 80023a6:	f000 fedb 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|Buzzer_Pin;
 80023aa:	f240 1301 	movw	r3, #257	@ 0x101
 80023ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b0:	2301      	movs	r3, #1
 80023b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	2300      	movs	r3, #0
 80023ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023bc:	f107 031c 	add.w	r3, r7, #28
 80023c0:	4619      	mov	r1, r3
 80023c2:	4849      	ldr	r0, [pc, #292]	@ (80024e8 <MX_GPIO_Init+0x25c>)
 80023c4:	f000 fecc 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80023c8:	2308      	movs	r3, #8
 80023ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023cc:	2302      	movs	r3, #2
 80023ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023d8:	2305      	movs	r3, #5
 80023da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80023dc:	f107 031c 	add.w	r3, r7, #28
 80023e0:	4619      	mov	r1, r3
 80023e2:	4841      	ldr	r0, [pc, #260]	@ (80024e8 <MX_GPIO_Init+0x25c>)
 80023e4:	f000 febc 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : Key_int_Pin */
  GPIO_InitStruct.Pin = Key_int_Pin;
 80023e8:	2301      	movs	r3, #1
 80023ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023ec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80023f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Key_int_GPIO_Port, &GPIO_InitStruct);
 80023f6:	f107 031c 	add.w	r3, r7, #28
 80023fa:	4619      	mov	r1, r3
 80023fc:	483b      	ldr	r0, [pc, #236]	@ (80024ec <MX_GPIO_Init+0x260>)
 80023fe:	f000 feaf 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RCK_Pin LED_SCK_Pin */
  GPIO_InitStruct.Pin = LED_RCK_Pin|LED_SCK_Pin;
 8002402:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002408:	2301      	movs	r3, #1
 800240a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002410:	2300      	movs	r3, #0
 8002412:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002414:	f107 031c 	add.w	r3, r7, #28
 8002418:	4619      	mov	r1, r3
 800241a:	4834      	ldr	r0, [pc, #208]	@ (80024ec <MX_GPIO_Init+0x260>)
 800241c:	f000 fea0 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002420:	2304      	movs	r3, #4
 8002422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002424:	2300      	movs	r3, #0
 8002426:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800242c:	f107 031c 	add.w	r3, r7, #28
 8002430:	4619      	mov	r1, r3
 8002432:	482e      	ldr	r0, [pc, #184]	@ (80024ec <MX_GPIO_Init+0x260>)
 8002434:	f000 fe94 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002438:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800243c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243e:	2302      	movs	r3, #2
 8002440:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002446:	2300      	movs	r3, #0
 8002448:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800244a:	2305      	movs	r3, #5
 800244c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800244e:	f107 031c 	add.w	r3, r7, #28
 8002452:	4619      	mov	r1, r3
 8002454:	4825      	ldr	r0, [pc, #148]	@ (80024ec <MX_GPIO_Init+0x260>)
 8002456:	f000 fe83 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800245a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800245e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002460:	2301      	movs	r3, #1
 8002462:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002468:	2300      	movs	r3, #0
 800246a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800246c:	f107 031c 	add.w	r3, r7, #28
 8002470:	4619      	mov	r1, r3
 8002472:	481f      	ldr	r0, [pc, #124]	@ (80024f0 <MX_GPIO_Init+0x264>)
 8002474:	f000 fe74 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_SER_Pin */
  GPIO_InitStruct.Pin = LED_SER_Pin;
 8002478:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800247c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247e:	2301      	movs	r3, #1
 8002480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002486:	2300      	movs	r3, #0
 8002488:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_SER_GPIO_Port, &GPIO_InitStruct);
 800248a:	f107 031c 	add.w	r3, r7, #28
 800248e:	4619      	mov	r1, r3
 8002490:	4818      	ldr	r0, [pc, #96]	@ (80024f4 <MX_GPIO_Init+0x268>)
 8002492:	f000 fe65 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002496:	2320      	movs	r3, #32
 8002498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800249a:	2300      	movs	r3, #0
 800249c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80024a2:	f107 031c 	add.w	r3, r7, #28
 80024a6:	4619      	mov	r1, r3
 80024a8:	4811      	ldr	r0, [pc, #68]	@ (80024f0 <MX_GPIO_Init+0x264>)
 80024aa:	f000 fe59 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80024ae:	2302      	movs	r3, #2
 80024b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80024b2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80024b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80024bc:	f107 031c 	add.w	r3, r7, #28
 80024c0:	4619      	mov	r1, r3
 80024c2:	4808      	ldr	r0, [pc, #32]	@ (80024e4 <MX_GPIO_Init+0x258>)
 80024c4:	f000 fe4c 	bl	8003160 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80024c8:	2200      	movs	r2, #0
 80024ca:	2105      	movs	r1, #5
 80024cc:	2006      	movs	r0, #6
 80024ce:	f000 fd8b 	bl	8002fe8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80024d2:	2006      	movs	r0, #6
 80024d4:	f000 fda4 	bl	8003020 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80024d8:	bf00      	nop
 80024da:	3730      	adds	r7, #48	@ 0x30
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40020800 	.word	0x40020800
 80024ec:	40020400 	.word	0x40020400
 80024f0:	40020c00 	.word	0x40020c00
 80024f4:	40020000 	.word	0x40020000

080024f8 <HAL_UART_RxCpltCallback>:
  * <p>Demonstreert: xQueueSendFromISR(); portYIELD_FROM_ISR();</p>
  * @param huart
  * @return void.
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
	unsigned char       uart4_char, uart2_char;
	BaseType_t          xHigherPriorityTaskWoken = pdFALSE;
 8002500:	2300      	movs	r3, #0
 8002502:	60bb      	str	r3, [r7, #8]

	// receive terminal user commands
	if (huart->Instance == USART2)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a23      	ldr	r2, [pc, #140]	@ (8002598 <HAL_UART_RxCpltCallback+0xa0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d11d      	bne.n	800254a <HAL_UART_RxCpltCallback+0x52>
	{
		/// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(&huart2, &uart2_char, 1);
 800250e:	f107 030e 	add.w	r3, r7, #14
 8002512:	2201      	movs	r2, #1
 8002514:	4619      	mov	r1, r3
 8002516:	4821      	ldr	r0, [pc, #132]	@ (800259c <HAL_UART_RxCpltCallback+0xa4>)
 8002518:	f005 f951 	bl	80077be <HAL_UART_Receive_IT>

		/// Zet de byte op de UART_queue
		xQueueSendFromISR(hUART_Queue, &uart2_char, &xHigherPriorityTaskWoken);
 800251c:	4b20      	ldr	r3, [pc, #128]	@ (80025a0 <HAL_UART_RxCpltCallback+0xa8>)
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	f107 0208 	add.w	r2, r7, #8
 8002524:	f107 010e 	add.w	r1, r7, #14
 8002528:	2300      	movs	r3, #0
 800252a:	f00a fc11 	bl	800cd50 <xQueueGenericSendFromISR>
		if (xHigherPriorityTaskWoken != pdFALSE)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00a      	beq.n	800254a <HAL_UART_RxCpltCallback+0x52>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d007      	beq.n	800254a <HAL_UART_RxCpltCallback+0x52>
 800253a:	4b1a      	ldr	r3, [pc, #104]	@ (80025a4 <HAL_UART_RxCpltCallback+0xac>)
 800253c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	f3bf 8f4f 	dsb	sy
 8002546:	f3bf 8f6f 	isb	sy
	}

	// receive GPS-data
	if (huart->Instance == UART4)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a16      	ldr	r2, [pc, #88]	@ (80025a8 <HAL_UART_RxCpltCallback+0xb0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d11d      	bne.n	8002590 <HAL_UART_RxCpltCallback+0x98>
	{
		/// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(&huart4, &uart4_char, 1);
 8002554:	f107 030f 	add.w	r3, r7, #15
 8002558:	2201      	movs	r2, #1
 800255a:	4619      	mov	r1, r3
 800255c:	4813      	ldr	r0, [pc, #76]	@ (80025ac <HAL_UART_RxCpltCallback+0xb4>)
 800255e:	f005 f92e 	bl	80077be <HAL_UART_Receive_IT>

		/// Zet de byte op de GPS_queue
		xQueueSendFromISR(hGPS_Queue, &uart4_char, &xHigherPriorityTaskWoken);
 8002562:	4b13      	ldr	r3, [pc, #76]	@ (80025b0 <HAL_UART_RxCpltCallback+0xb8>)
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	f107 0208 	add.w	r2, r7, #8
 800256a:	f107 010f 	add.w	r1, r7, #15
 800256e:	2300      	movs	r3, #0
 8002570:	f00a fbee 	bl	800cd50 <xQueueGenericSendFromISR>
		if (xHigherPriorityTaskWoken != pdFALSE)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <HAL_UART_RxCpltCallback+0x98>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <HAL_UART_RxCpltCallback+0x98>
 8002580:	4b08      	ldr	r3, [pc, #32]	@ (80025a4 <HAL_UART_RxCpltCallback+0xac>)
 8002582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	f3bf 8f4f 	dsb	sy
 800258c:	f3bf 8f6f 	isb	sy
	}

}
 8002590:	bf00      	nop
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40004400 	.word	0x40004400
 800259c:	200004a4 	.word	0x200004a4
 80025a0:	20000308 	.word	0x20000308
 80025a4:	e000ed04 	.word	0xe000ed04
 80025a8:	40004c00 	.word	0x40004c00
 80025ac:	2000045c 	.word	0x2000045c
 80025b0:	2000030c 	.word	0x2000030c

080025b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80025bc:	f00d fef4 	bl	80103a8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  unsigned char byte1, byte2;

  CreateHandles();
 80025c0:	f7fe fb72 	bl	8000ca8 <CreateHandles>
  CreateTasks();
 80025c4:	f7fe fc10 	bl	8000de8 <CreateTasks>

  // start the interrupt handlers after all handles are created
  HAL_UART_Receive_IT(&huart2, &byte2, 1); //start the UART2 interrupt engine for reading
 80025c8:	f107 030e 	add.w	r3, r7, #14
 80025cc:	2201      	movs	r2, #1
 80025ce:	4619      	mov	r1, r3
 80025d0:	480d      	ldr	r0, [pc, #52]	@ (8002608 <StartDefaultTask+0x54>)
 80025d2:	f005 f8f4 	bl	80077be <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &byte1, 1); //start the UART4 interrupt engine GPS
 80025d6:	f107 030f 	add.w	r3, r7, #15
 80025da:	2201      	movs	r2, #1
 80025dc:	4619      	mov	r1, r3
 80025de:	480b      	ldr	r0, [pc, #44]	@ (800260c <StartDefaultTask+0x58>)
 80025e0:	f005 f8ed 	bl	80077be <HAL_UART_Receive_IT>

  UART_putint(byte2); UART_puts("\r\n"); // deze byte (de eerste) is nog een irritante bug.
 80025e4:	7bbb      	ldrb	r3, [r7, #14]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fc6c 	bl	8001ec4 <UART_putint>
 80025ec:	4808      	ldr	r0, [pc, #32]	@ (8002610 <StartDefaultTask+0x5c>)
 80025ee:	f7ff fc4d 	bl	8001e8c <UART_puts>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80025f2:	2001      	movs	r0, #1
 80025f4:	f009 fd0c 	bl	800c010 <osDelay>
    vTaskDelete(defaultTaskHandle); // remove this default task
 80025f8:	4b06      	ldr	r3, [pc, #24]	@ (8002614 <StartDefaultTask+0x60>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f00b fa21 	bl	800da44 <vTaskDelete>
    osDelay(1);
 8002602:	bf00      	nop
 8002604:	e7f5      	b.n	80025f2 <StartDefaultTask+0x3e>
 8002606:	bf00      	nop
 8002608:	200004a4 	.word	0x200004a4
 800260c:	2000045c 	.word	0x2000045c
 8002610:	0801293c 	.word	0x0801293c
 8002614:	200004ec 	.word	0x200004ec

08002618 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a04      	ldr	r2, [pc, #16]	@ (8002638 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d101      	bne.n	800262e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800262a:	f000 fbe1 	bl	8002df0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40010000 	.word	0x40010000

0800263c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002640:	b672      	cpsid	i
}
 8002642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002644:	bf00      	nop
 8002646:	e7fd      	b.n	8002644 <Error_Handler+0x8>

08002648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	607b      	str	r3, [r7, #4]
 8002652:	4b12      	ldr	r3, [pc, #72]	@ (800269c <HAL_MspInit+0x54>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002656:	4a11      	ldr	r2, [pc, #68]	@ (800269c <HAL_MspInit+0x54>)
 8002658:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800265c:	6453      	str	r3, [r2, #68]	@ 0x44
 800265e:	4b0f      	ldr	r3, [pc, #60]	@ (800269c <HAL_MspInit+0x54>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002666:	607b      	str	r3, [r7, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	4b0b      	ldr	r3, [pc, #44]	@ (800269c <HAL_MspInit+0x54>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	4a0a      	ldr	r2, [pc, #40]	@ (800269c <HAL_MspInit+0x54>)
 8002674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002678:	6413      	str	r3, [r2, #64]	@ 0x40
 800267a:	4b08      	ldr	r3, [pc, #32]	@ (800269c <HAL_MspInit+0x54>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002686:	2200      	movs	r2, #0
 8002688:	210f      	movs	r1, #15
 800268a:	f06f 0001 	mvn.w	r0, #1
 800268e:	f000 fcab 	bl	8002fe8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40023800 	.word	0x40023800

080026a0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	@ 0x28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 0314 	add.w	r3, r7, #20
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a19      	ldr	r2, [pc, #100]	@ (8002724 <HAL_I2C_MspInit+0x84>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d12c      	bne.n	800271c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	4b18      	ldr	r3, [pc, #96]	@ (8002728 <HAL_I2C_MspInit+0x88>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	4a17      	ldr	r2, [pc, #92]	@ (8002728 <HAL_I2C_MspInit+0x88>)
 80026cc:	f043 0302 	orr.w	r3, r3, #2
 80026d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026d2:	4b15      	ldr	r3, [pc, #84]	@ (8002728 <HAL_I2C_MspInit+0x88>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80026de:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80026e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026e4:	2312      	movs	r3, #18
 80026e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026e8:	2301      	movs	r3, #1
 80026ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ec:	2300      	movs	r3, #0
 80026ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026f0:	2304      	movs	r3, #4
 80026f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f4:	f107 0314 	add.w	r3, r7, #20
 80026f8:	4619      	mov	r1, r3
 80026fa:	480c      	ldr	r0, [pc, #48]	@ (800272c <HAL_I2C_MspInit+0x8c>)
 80026fc:	f000 fd30 	bl	8003160 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002700:	2300      	movs	r3, #0
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	4b08      	ldr	r3, [pc, #32]	@ (8002728 <HAL_I2C_MspInit+0x88>)
 8002706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002708:	4a07      	ldr	r2, [pc, #28]	@ (8002728 <HAL_I2C_MspInit+0x88>)
 800270a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800270e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002710:	4b05      	ldr	r3, [pc, #20]	@ (8002728 <HAL_I2C_MspInit+0x88>)
 8002712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002714:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800271c:	bf00      	nop
 800271e:	3728      	adds	r7, #40	@ 0x28
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40005400 	.word	0x40005400
 8002728:	40023800 	.word	0x40023800
 800272c:	40020400 	.word	0x40020400

08002730 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08e      	sub	sp, #56	@ 0x38
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a31      	ldr	r2, [pc, #196]	@ (8002820 <HAL_I2S_MspInit+0xf0>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d15a      	bne.n	8002816 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002760:	2301      	movs	r3, #1
 8002762:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002764:	23c0      	movs	r3, #192	@ 0xc0
 8002766:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002768:	2302      	movs	r3, #2
 800276a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800276c:	f107 0314 	add.w	r3, r7, #20
 8002770:	4618      	mov	r0, r3
 8002772:	f004 fae3 	bl	8006d3c <HAL_RCCEx_PeriphCLKConfig>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800277c:	f7ff ff5e 	bl	800263c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002780:	2300      	movs	r3, #0
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	4b27      	ldr	r3, [pc, #156]	@ (8002824 <HAL_I2S_MspInit+0xf4>)
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	4a26      	ldr	r2, [pc, #152]	@ (8002824 <HAL_I2S_MspInit+0xf4>)
 800278a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800278e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002790:	4b24      	ldr	r3, [pc, #144]	@ (8002824 <HAL_I2S_MspInit+0xf4>)
 8002792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002794:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	4b20      	ldr	r3, [pc, #128]	@ (8002824 <HAL_I2S_MspInit+0xf4>)
 80027a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002824 <HAL_I2S_MspInit+0xf4>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002824 <HAL_I2S_MspInit+0xf4>)
 80027ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027b8:	2300      	movs	r3, #0
 80027ba:	60bb      	str	r3, [r7, #8]
 80027bc:	4b19      	ldr	r3, [pc, #100]	@ (8002824 <HAL_I2S_MspInit+0xf4>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c0:	4a18      	ldr	r2, [pc, #96]	@ (8002824 <HAL_I2S_MspInit+0xf4>)
 80027c2:	f043 0304 	orr.w	r3, r3, #4
 80027c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c8:	4b16      	ldr	r3, [pc, #88]	@ (8002824 <HAL_I2S_MspInit+0xf4>)
 80027ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80027d4:	2310      	movs	r3, #16
 80027d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d8:	2302      	movs	r3, #2
 80027da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e0:	2300      	movs	r3, #0
 80027e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027e4:	2306      	movs	r3, #6
 80027e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80027e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ec:	4619      	mov	r1, r3
 80027ee:	480e      	ldr	r0, [pc, #56]	@ (8002828 <HAL_I2S_MspInit+0xf8>)
 80027f0:	f000 fcb6 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80027f4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80027f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fa:	2302      	movs	r3, #2
 80027fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002802:	2300      	movs	r3, #0
 8002804:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002806:	2306      	movs	r3, #6
 8002808:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800280a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800280e:	4619      	mov	r1, r3
 8002810:	4806      	ldr	r0, [pc, #24]	@ (800282c <HAL_I2S_MspInit+0xfc>)
 8002812:	f000 fca5 	bl	8003160 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002816:	bf00      	nop
 8002818:	3738      	adds	r7, #56	@ 0x38
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40003c00 	.word	0x40003c00
 8002824:	40023800 	.word	0x40023800
 8002828:	40020000 	.word	0x40020000
 800282c:	40020800 	.word	0x40020800

08002830 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08a      	sub	sp, #40	@ 0x28
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 0314 	add.w	r3, r7, #20
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a19      	ldr	r2, [pc, #100]	@ (80028b4 <HAL_SPI_MspInit+0x84>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d12b      	bne.n	80028aa <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
 8002856:	4b18      	ldr	r3, [pc, #96]	@ (80028b8 <HAL_SPI_MspInit+0x88>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285a:	4a17      	ldr	r2, [pc, #92]	@ (80028b8 <HAL_SPI_MspInit+0x88>)
 800285c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002860:	6453      	str	r3, [r2, #68]	@ 0x44
 8002862:	4b15      	ldr	r3, [pc, #84]	@ (80028b8 <HAL_SPI_MspInit+0x88>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002866:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	4b11      	ldr	r3, [pc, #68]	@ (80028b8 <HAL_SPI_MspInit+0x88>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	4a10      	ldr	r2, [pc, #64]	@ (80028b8 <HAL_SPI_MspInit+0x88>)
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	6313      	str	r3, [r2, #48]	@ 0x30
 800287e:	4b0e      	ldr	r3, [pc, #56]	@ (80028b8 <HAL_SPI_MspInit+0x88>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800288a:	23e0      	movs	r3, #224	@ 0xe0
 800288c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288e:	2302      	movs	r3, #2
 8002890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002896:	2300      	movs	r3, #0
 8002898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800289a:	2305      	movs	r3, #5
 800289c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289e:	f107 0314 	add.w	r3, r7, #20
 80028a2:	4619      	mov	r1, r3
 80028a4:	4805      	ldr	r0, [pc, #20]	@ (80028bc <HAL_SPI_MspInit+0x8c>)
 80028a6:	f000 fc5b 	bl	8003160 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80028aa:	bf00      	nop
 80028ac:	3728      	adds	r7, #40	@ 0x28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40013000 	.word	0x40013000
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40020000 	.word	0x40020000

080028c0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08c      	sub	sp, #48	@ 0x30
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c8:	f107 031c 	add.w	r3, r7, #28
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
 80028d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a3a      	ldr	r2, [pc, #232]	@ (80029c8 <HAL_UART_MspInit+0x108>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d134      	bne.n	800294c <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	61bb      	str	r3, [r7, #24]
 80028e6:	4b39      	ldr	r3, [pc, #228]	@ (80029cc <HAL_UART_MspInit+0x10c>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	4a38      	ldr	r2, [pc, #224]	@ (80029cc <HAL_UART_MspInit+0x10c>)
 80028ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80028f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028f2:	4b36      	ldr	r3, [pc, #216]	@ (80029cc <HAL_UART_MspInit+0x10c>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028fa:	61bb      	str	r3, [r7, #24]
 80028fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	4b32      	ldr	r3, [pc, #200]	@ (80029cc <HAL_UART_MspInit+0x10c>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	4a31      	ldr	r2, [pc, #196]	@ (80029cc <HAL_UART_MspInit+0x10c>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6313      	str	r3, [r2, #48]	@ 0x30
 800290e:	4b2f      	ldr	r3, [pc, #188]	@ (80029cc <HAL_UART_MspInit+0x10c>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800291a:	2303      	movs	r3, #3
 800291c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291e:	2302      	movs	r3, #2
 8002920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002926:	2303      	movs	r3, #3
 8002928:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800292a:	2308      	movs	r3, #8
 800292c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292e:	f107 031c 	add.w	r3, r7, #28
 8002932:	4619      	mov	r1, r3
 8002934:	4826      	ldr	r0, [pc, #152]	@ (80029d0 <HAL_UART_MspInit+0x110>)
 8002936:	f000 fc13 	bl	8003160 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800293a:	2200      	movs	r2, #0
 800293c:	2105      	movs	r1, #5
 800293e:	2034      	movs	r0, #52	@ 0x34
 8002940:	f000 fb52 	bl	8002fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002944:	2034      	movs	r0, #52	@ 0x34
 8002946:	f000 fb6b 	bl	8003020 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800294a:	e038      	b.n	80029be <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a20      	ldr	r2, [pc, #128]	@ (80029d4 <HAL_UART_MspInit+0x114>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d133      	bne.n	80029be <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	4b1c      	ldr	r3, [pc, #112]	@ (80029cc <HAL_UART_MspInit+0x10c>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	4a1b      	ldr	r2, [pc, #108]	@ (80029cc <HAL_UART_MspInit+0x10c>)
 8002960:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002964:	6413      	str	r3, [r2, #64]	@ 0x40
 8002966:	4b19      	ldr	r3, [pc, #100]	@ (80029cc <HAL_UART_MspInit+0x10c>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <HAL_UART_MspInit+0x10c>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	4a14      	ldr	r2, [pc, #80]	@ (80029cc <HAL_UART_MspInit+0x10c>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6313      	str	r3, [r2, #48]	@ 0x30
 8002982:	4b12      	ldr	r3, [pc, #72]	@ (80029cc <HAL_UART_MspInit+0x10c>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800298e:	230c      	movs	r3, #12
 8002990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002992:	2302      	movs	r3, #2
 8002994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299a:	2303      	movs	r3, #3
 800299c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800299e:	2307      	movs	r3, #7
 80029a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a2:	f107 031c 	add.w	r3, r7, #28
 80029a6:	4619      	mov	r1, r3
 80029a8:	4809      	ldr	r0, [pc, #36]	@ (80029d0 <HAL_UART_MspInit+0x110>)
 80029aa:	f000 fbd9 	bl	8003160 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80029ae:	2200      	movs	r2, #0
 80029b0:	2105      	movs	r1, #5
 80029b2:	2026      	movs	r0, #38	@ 0x26
 80029b4:	f000 fb18 	bl	8002fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029b8:	2026      	movs	r0, #38	@ 0x26
 80029ba:	f000 fb31 	bl	8003020 <HAL_NVIC_EnableIRQ>
}
 80029be:	bf00      	nop
 80029c0:	3730      	adds	r7, #48	@ 0x30
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40004c00 	.word	0x40004c00
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40020000 	.word	0x40020000
 80029d4:	40004400 	.word	0x40004400

080029d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08c      	sub	sp, #48	@ 0x30
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80029e8:	2300      	movs	r3, #0
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	4b2f      	ldr	r3, [pc, #188]	@ (8002aac <HAL_InitTick+0xd4>)
 80029ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f0:	4a2e      	ldr	r2, [pc, #184]	@ (8002aac <HAL_InitTick+0xd4>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80029f8:	4b2c      	ldr	r3, [pc, #176]	@ (8002aac <HAL_InitTick+0xd4>)
 80029fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a04:	f107 020c 	add.w	r2, r7, #12
 8002a08:	f107 0310 	add.w	r3, r7, #16
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f004 f962 	bl	8006cd8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002a14:	f004 f94c 	bl	8006cb0 <HAL_RCC_GetPCLK2Freq>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a20:	4a23      	ldr	r2, [pc, #140]	@ (8002ab0 <HAL_InitTick+0xd8>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	0c9b      	lsrs	r3, r3, #18
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002a2c:	4b21      	ldr	r3, [pc, #132]	@ (8002ab4 <HAL_InitTick+0xdc>)
 8002a2e:	4a22      	ldr	r2, [pc, #136]	@ (8002ab8 <HAL_InitTick+0xe0>)
 8002a30:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002a32:	4b20      	ldr	r3, [pc, #128]	@ (8002ab4 <HAL_InitTick+0xdc>)
 8002a34:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002a38:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ab4 <HAL_InitTick+0xdc>)
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002a40:	4b1c      	ldr	r3, [pc, #112]	@ (8002ab4 <HAL_InitTick+0xdc>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a46:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab4 <HAL_InitTick+0xdc>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a4c:	4b19      	ldr	r3, [pc, #100]	@ (8002ab4 <HAL_InitTick+0xdc>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002a52:	4818      	ldr	r0, [pc, #96]	@ (8002ab4 <HAL_InitTick+0xdc>)
 8002a54:	f004 fb3d 	bl	80070d2 <HAL_TIM_Base_Init>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002a5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d11b      	bne.n	8002a9e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002a66:	4813      	ldr	r0, [pc, #76]	@ (8002ab4 <HAL_InitTick+0xdc>)
 8002a68:	f004 fb8c 	bl	8007184 <HAL_TIM_Base_Start_IT>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002a72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d111      	bne.n	8002a9e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002a7a:	2019      	movs	r0, #25
 8002a7c:	f000 fad0 	bl	8003020 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b0f      	cmp	r3, #15
 8002a84:	d808      	bhi.n	8002a98 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002a86:	2200      	movs	r2, #0
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	2019      	movs	r0, #25
 8002a8c:	f000 faac 	bl	8002fe8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a90:	4a0a      	ldr	r2, [pc, #40]	@ (8002abc <HAL_InitTick+0xe4>)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	e002      	b.n	8002a9e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002a9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3730      	adds	r7, #48	@ 0x30
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	431bde83 	.word	0x431bde83
 8002ab4:	200004f0 	.word	0x200004f0
 8002ab8:	40010000 	.word	0x40010000
 8002abc:	20000260 	.word	0x20000260

08002ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ac4:	bf00      	nop
 8002ac6:	e7fd      	b.n	8002ac4 <NMI_Handler+0x4>

08002ac8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002acc:	bf00      	nop
 8002ace:	e7fd      	b.n	8002acc <HardFault_Handler+0x4>

08002ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ad4:	bf00      	nop
 8002ad6:	e7fd      	b.n	8002ad4 <MemManage_Handler+0x4>

08002ad8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002adc:	bf00      	nop
 8002ade:	e7fd      	b.n	8002adc <BusFault_Handler+0x4>

08002ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ae4:	bf00      	nop
 8002ae6:	e7fd      	b.n	8002ae4 <UsageFault_Handler+0x4>

08002ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
	...

08002af8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
   * Vervolgens wordt de key meegestuurd met een FreeRTOS event, die opgevangen wordt
   * door de task ARM_keys_IRQ(). Daarna wordt, indien nodig, een context switch
   * afgedwongen door portYIELD_FROM_ISR().
   *
   */
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	603b      	str	r3, [r7, #0]
  int        key;

  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 8002b02:	2001      	movs	r0, #1
 8002b04:	f000 fd14 	bl	8003530 <HAL_GPIO_EXTI_IRQHandler>

  key = KEYS_read(); // determine which key is pressed...
 8002b08:	f7fe ff2e 	bl	8001968 <KEYS_read>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	607b      	str	r3, [r7, #4]
  xEventGroupSetBitsFromISR (hKEY_Event, key, &xHigherPriorityTaskWoken);
 8002b10:	4b0f      	ldr	r3, [pc, #60]	@ (8002b50 <EXTI0_IRQHandler+0x58>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	463a      	mov	r2, r7
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f009 fdd7 	bl	800c6cc <xEventGroupSetBitsFromISR>

  // KEYS_initISR(0); // set all lines lo if you want repeating keys
  KEYS_initISR(1);    // set all lines hi for reading all 16 keys
 8002b1e:	2001      	movs	r0, #1
 8002b20:	f7fe fefa 	bl	8001918 <KEYS_initISR>
  if (xHigherPriorityTaskWoken != pdFALSE)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <EXTI0_IRQHandler+0x48>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d007      	beq.n	8002b40 <EXTI0_IRQHandler+0x48>
 8002b30:	4b08      	ldr	r3, [pc, #32]	@ (8002b54 <EXTI0_IRQHandler+0x5c>)
 8002b32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 8002b40:	2001      	movs	r0, #1
 8002b42:	f000 fcf5 	bl	8003530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000314 	.word	0x20000314
 8002b54:	e000ed04 	.word	0xe000ed04

08002b58 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b5c:	4802      	ldr	r0, [pc, #8]	@ (8002b68 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002b5e:	f004 fb81 	bl	8007264 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	200004f0 	.word	0x200004f0

08002b6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b70:	4802      	ldr	r0, [pc, #8]	@ (8002b7c <USART2_IRQHandler+0x10>)
 8002b72:	f004 fe49 	bl	8007808 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	200004a4 	.word	0x200004a4

08002b80 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002b84:	4802      	ldr	r0, [pc, #8]	@ (8002b90 <UART4_IRQHandler+0x10>)
 8002b86:	f004 fe3f 	bl	8007808 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	2000045c 	.word	0x2000045c

08002b94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002b98:	4802      	ldr	r0, [pc, #8]	@ (8002ba4 <OTG_FS_IRQHandler+0x10>)
 8002b9a:	f000 ffcd 	bl	8003b38 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20011134 	.word	0x20011134

08002ba8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
	return 1;
 8002bac:	2301      	movs	r3, #1
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <_kill>:

int _kill(int pid, int sig)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002bc2:	f00e fab3 	bl	801112c <__errno>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2216      	movs	r2, #22
 8002bca:	601a      	str	r2, [r3, #0]
	return -1;
 8002bcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <_exit>:

void _exit (int status)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002be0:	f04f 31ff 	mov.w	r1, #4294967295
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff ffe7 	bl	8002bb8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002bea:	bf00      	nop
 8002bec:	e7fd      	b.n	8002bea <_exit+0x12>

08002bee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b086      	sub	sp, #24
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	e00a      	b.n	8002c16 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c00:	f3af 8000 	nop.w
 8002c04:	4601      	mov	r1, r0
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	60ba      	str	r2, [r7, #8]
 8002c0c:	b2ca      	uxtb	r2, r1
 8002c0e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	3301      	adds	r3, #1
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	dbf0      	blt.n	8002c00 <_read+0x12>
	}

return len;
 8002c1e:	687b      	ldr	r3, [r7, #4]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	e009      	b.n	8002c4e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	60ba      	str	r2, [r7, #8]
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	dbf1      	blt.n	8002c3a <_write+0x12>
	}
	return len;
 8002c56:	687b      	ldr	r3, [r7, #4]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <_close>:

int _close(int file)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
	return -1;
 8002c68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c88:	605a      	str	r2, [r3, #4]
	return 0;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <_isatty>:

int _isatty(int file)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	return 1;
 8002ca0:	2301      	movs	r3, #1
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b085      	sub	sp, #20
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
	return 0;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cd0:	4a14      	ldr	r2, [pc, #80]	@ (8002d24 <_sbrk+0x5c>)
 8002cd2:	4b15      	ldr	r3, [pc, #84]	@ (8002d28 <_sbrk+0x60>)
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cdc:	4b13      	ldr	r3, [pc, #76]	@ (8002d2c <_sbrk+0x64>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d102      	bne.n	8002cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ce4:	4b11      	ldr	r3, [pc, #68]	@ (8002d2c <_sbrk+0x64>)
 8002ce6:	4a12      	ldr	r2, [pc, #72]	@ (8002d30 <_sbrk+0x68>)
 8002ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cea:	4b10      	ldr	r3, [pc, #64]	@ (8002d2c <_sbrk+0x64>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d207      	bcs.n	8002d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cf8:	f00e fa18 	bl	801112c <__errno>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	220c      	movs	r2, #12
 8002d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d02:	f04f 33ff 	mov.w	r3, #4294967295
 8002d06:	e009      	b.n	8002d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d08:	4b08      	ldr	r3, [pc, #32]	@ (8002d2c <_sbrk+0x64>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d0e:	4b07      	ldr	r3, [pc, #28]	@ (8002d2c <_sbrk+0x64>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	4a05      	ldr	r2, [pc, #20]	@ (8002d2c <_sbrk+0x64>)
 8002d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20020000 	.word	0x20020000
 8002d28:	00000400 	.word	0x00000400
 8002d2c:	20000538 	.word	0x20000538
 8002d30:	20011660 	.word	0x20011660

08002d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d38:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <SystemInit+0x20>)
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d3e:	4a05      	ldr	r2, [pc, #20]	@ (8002d54 <SystemInit+0x20>)
 8002d40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d5c:	480d      	ldr	r0, [pc, #52]	@ (8002d94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d5e:	490e      	ldr	r1, [pc, #56]	@ (8002d98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d60:	4a0e      	ldr	r2, [pc, #56]	@ (8002d9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d64:	e002      	b.n	8002d6c <LoopCopyDataInit>

08002d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d6a:	3304      	adds	r3, #4

08002d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d70:	d3f9      	bcc.n	8002d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d72:	4a0b      	ldr	r2, [pc, #44]	@ (8002da0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d74:	4c0b      	ldr	r4, [pc, #44]	@ (8002da4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d78:	e001      	b.n	8002d7e <LoopFillZerobss>

08002d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d7c:	3204      	adds	r2, #4

08002d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d80:	d3fb      	bcc.n	8002d7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d82:	f7ff ffd7 	bl	8002d34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d86:	f00e f9d7 	bl	8011138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d8a:	f7ff f8f7 	bl	8001f7c <main>
  bx  lr    
 8002d8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d98:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 8002d9c:	08012c30 	.word	0x08012c30
  ldr r2, =_sbss
 8002da0:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8002da4:	20011660 	.word	0x20011660

08002da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002da8:	e7fe      	b.n	8002da8 <ADC_IRQHandler>
	...

08002dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002db0:	4b0e      	ldr	r3, [pc, #56]	@ (8002dec <HAL_Init+0x40>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a0d      	ldr	r2, [pc, #52]	@ (8002dec <HAL_Init+0x40>)
 8002db6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dec <HAL_Init+0x40>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8002dec <HAL_Init+0x40>)
 8002dc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dc8:	4b08      	ldr	r3, [pc, #32]	@ (8002dec <HAL_Init+0x40>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a07      	ldr	r2, [pc, #28]	@ (8002dec <HAL_Init+0x40>)
 8002dce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dd4:	2003      	movs	r0, #3
 8002dd6:	f000 f8fc 	bl	8002fd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f7ff fdfc 	bl	80029d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002de0:	f7ff fc32 	bl	8002648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40023c00 	.word	0x40023c00

08002df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002df4:	4b06      	ldr	r3, [pc, #24]	@ (8002e10 <HAL_IncTick+0x20>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <HAL_IncTick+0x24>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4413      	add	r3, r2
 8002e00:	4a04      	ldr	r2, [pc, #16]	@ (8002e14 <HAL_IncTick+0x24>)
 8002e02:	6013      	str	r3, [r2, #0]
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	20000264 	.word	0x20000264
 8002e14:	2000053c 	.word	0x2000053c

08002e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e1c:	4b03      	ldr	r3, [pc, #12]	@ (8002e2c <HAL_GetTick+0x14>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	2000053c 	.word	0x2000053c

08002e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e38:	f7ff ffee 	bl	8002e18 <HAL_GetTick>
 8002e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e48:	d005      	beq.n	8002e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e74 <HAL_Delay+0x44>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4413      	add	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e56:	bf00      	nop
 8002e58:	f7ff ffde 	bl	8002e18 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d8f7      	bhi.n	8002e58 <HAL_Delay+0x28>
  {
  }
}
 8002e68:	bf00      	nop
 8002e6a:	bf00      	nop
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20000264 	.word	0x20000264

08002e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e88:	4b0c      	ldr	r3, [pc, #48]	@ (8002ebc <__NVIC_SetPriorityGrouping+0x44>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e94:	4013      	ands	r3, r2
 8002e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ea0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eaa:	4a04      	ldr	r2, [pc, #16]	@ (8002ebc <__NVIC_SetPriorityGrouping+0x44>)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	60d3      	str	r3, [r2, #12]
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ec4:	4b04      	ldr	r3, [pc, #16]	@ (8002ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	0a1b      	lsrs	r3, r3, #8
 8002eca:	f003 0307 	and.w	r3, r3, #7
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	db0b      	blt.n	8002f06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	f003 021f 	and.w	r2, r3, #31
 8002ef4:	4907      	ldr	r1, [pc, #28]	@ (8002f14 <__NVIC_EnableIRQ+0x38>)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	2001      	movs	r0, #1
 8002efe:	fa00 f202 	lsl.w	r2, r0, r2
 8002f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	e000e100 	.word	0xe000e100

08002f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	6039      	str	r1, [r7, #0]
 8002f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	db0a      	blt.n	8002f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	490c      	ldr	r1, [pc, #48]	@ (8002f64 <__NVIC_SetPriority+0x4c>)
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	0112      	lsls	r2, r2, #4
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f40:	e00a      	b.n	8002f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	4908      	ldr	r1, [pc, #32]	@ (8002f68 <__NVIC_SetPriority+0x50>)
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	3b04      	subs	r3, #4
 8002f50:	0112      	lsls	r2, r2, #4
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	440b      	add	r3, r1
 8002f56:	761a      	strb	r2, [r3, #24]
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	e000e100 	.word	0xe000e100
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b089      	sub	sp, #36	@ 0x24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f1c3 0307 	rsb	r3, r3, #7
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	bf28      	it	cs
 8002f8a:	2304      	movcs	r3, #4
 8002f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	3304      	adds	r3, #4
 8002f92:	2b06      	cmp	r3, #6
 8002f94:	d902      	bls.n	8002f9c <NVIC_EncodePriority+0x30>
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	3b03      	subs	r3, #3
 8002f9a:	e000      	b.n	8002f9e <NVIC_EncodePriority+0x32>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43da      	mvns	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	401a      	ands	r2, r3
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbe:	43d9      	mvns	r1, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc4:	4313      	orrs	r3, r2
         );
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3724      	adds	r7, #36	@ 0x24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff ff4c 	bl	8002e78 <__NVIC_SetPriorityGrouping>
}
 8002fe0:	bf00      	nop
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ffa:	f7ff ff61 	bl	8002ec0 <__NVIC_GetPriorityGrouping>
 8002ffe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	6978      	ldr	r0, [r7, #20]
 8003006:	f7ff ffb1 	bl	8002f6c <NVIC_EncodePriority>
 800300a:	4602      	mov	r2, r0
 800300c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003010:	4611      	mov	r1, r2
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff ff80 	bl	8002f18 <__NVIC_SetPriority>
}
 8003018:	bf00      	nop
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff ff54 	bl	8002edc <__NVIC_EnableIRQ>
}
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003048:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800304a:	f7ff fee5 	bl	8002e18 <HAL_GetTick>
 800304e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d008      	beq.n	800306e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2280      	movs	r2, #128	@ 0x80
 8003060:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e052      	b.n	8003114 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0216 	bic.w	r2, r2, #22
 800307c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695a      	ldr	r2, [r3, #20]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800308c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003092:	2b00      	cmp	r3, #0
 8003094:	d103      	bne.n	800309e <HAL_DMA_Abort+0x62>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800309a:	2b00      	cmp	r3, #0
 800309c:	d007      	beq.n	80030ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0208 	bic.w	r2, r2, #8
 80030ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0201 	bic.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030be:	e013      	b.n	80030e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030c0:	f7ff feaa 	bl	8002e18 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b05      	cmp	r3, #5
 80030cc:	d90c      	bls.n	80030e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2220      	movs	r2, #32
 80030d2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2203      	movs	r2, #3
 80030d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e015      	b.n	8003114 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1e4      	bne.n	80030c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030fa:	223f      	movs	r2, #63	@ 0x3f
 80030fc:	409a      	lsls	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d004      	beq.n	800313a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2280      	movs	r2, #128	@ 0x80
 8003134:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e00c      	b.n	8003154 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2205      	movs	r2, #5
 800313e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0201 	bic.w	r2, r2, #1
 8003150:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003160:	b480      	push	{r7}
 8003162:	b089      	sub	sp, #36	@ 0x24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003172:	2300      	movs	r3, #0
 8003174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
 800317a:	e16b      	b.n	8003454 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800317c:	2201      	movs	r2, #1
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4013      	ands	r3, r2
 800318e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	429a      	cmp	r2, r3
 8003196:	f040 815a 	bne.w	800344e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d005      	beq.n	80031b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d130      	bne.n	8003214 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	2203      	movs	r2, #3
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4013      	ands	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031e8:	2201      	movs	r2, #1
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	091b      	lsrs	r3, r3, #4
 80031fe:	f003 0201 	and.w	r2, r3, #1
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	2b03      	cmp	r3, #3
 800321e:	d017      	beq.n	8003250 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	2203      	movs	r2, #3
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d123      	bne.n	80032a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	08da      	lsrs	r2, r3, #3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3208      	adds	r2, #8
 8003264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003268:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	220f      	movs	r2, #15
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	08da      	lsrs	r2, r3, #3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3208      	adds	r2, #8
 800329e:	69b9      	ldr	r1, [r7, #24]
 80032a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	2203      	movs	r2, #3
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0203 	and.w	r2, r3, #3
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 80b4 	beq.w	800344e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	4b60      	ldr	r3, [pc, #384]	@ (800346c <HAL_GPIO_Init+0x30c>)
 80032ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ee:	4a5f      	ldr	r2, [pc, #380]	@ (800346c <HAL_GPIO_Init+0x30c>)
 80032f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80032f6:	4b5d      	ldr	r3, [pc, #372]	@ (800346c <HAL_GPIO_Init+0x30c>)
 80032f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003302:	4a5b      	ldr	r2, [pc, #364]	@ (8003470 <HAL_GPIO_Init+0x310>)
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	3302      	adds	r3, #2
 800330a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	220f      	movs	r2, #15
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a52      	ldr	r2, [pc, #328]	@ (8003474 <HAL_GPIO_Init+0x314>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d02b      	beq.n	8003386 <HAL_GPIO_Init+0x226>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a51      	ldr	r2, [pc, #324]	@ (8003478 <HAL_GPIO_Init+0x318>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d025      	beq.n	8003382 <HAL_GPIO_Init+0x222>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a50      	ldr	r2, [pc, #320]	@ (800347c <HAL_GPIO_Init+0x31c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d01f      	beq.n	800337e <HAL_GPIO_Init+0x21e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a4f      	ldr	r2, [pc, #316]	@ (8003480 <HAL_GPIO_Init+0x320>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d019      	beq.n	800337a <HAL_GPIO_Init+0x21a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a4e      	ldr	r2, [pc, #312]	@ (8003484 <HAL_GPIO_Init+0x324>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d013      	beq.n	8003376 <HAL_GPIO_Init+0x216>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a4d      	ldr	r2, [pc, #308]	@ (8003488 <HAL_GPIO_Init+0x328>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00d      	beq.n	8003372 <HAL_GPIO_Init+0x212>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a4c      	ldr	r2, [pc, #304]	@ (800348c <HAL_GPIO_Init+0x32c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d007      	beq.n	800336e <HAL_GPIO_Init+0x20e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a4b      	ldr	r2, [pc, #300]	@ (8003490 <HAL_GPIO_Init+0x330>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d101      	bne.n	800336a <HAL_GPIO_Init+0x20a>
 8003366:	2307      	movs	r3, #7
 8003368:	e00e      	b.n	8003388 <HAL_GPIO_Init+0x228>
 800336a:	2308      	movs	r3, #8
 800336c:	e00c      	b.n	8003388 <HAL_GPIO_Init+0x228>
 800336e:	2306      	movs	r3, #6
 8003370:	e00a      	b.n	8003388 <HAL_GPIO_Init+0x228>
 8003372:	2305      	movs	r3, #5
 8003374:	e008      	b.n	8003388 <HAL_GPIO_Init+0x228>
 8003376:	2304      	movs	r3, #4
 8003378:	e006      	b.n	8003388 <HAL_GPIO_Init+0x228>
 800337a:	2303      	movs	r3, #3
 800337c:	e004      	b.n	8003388 <HAL_GPIO_Init+0x228>
 800337e:	2302      	movs	r3, #2
 8003380:	e002      	b.n	8003388 <HAL_GPIO_Init+0x228>
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <HAL_GPIO_Init+0x228>
 8003386:	2300      	movs	r3, #0
 8003388:	69fa      	ldr	r2, [r7, #28]
 800338a:	f002 0203 	and.w	r2, r2, #3
 800338e:	0092      	lsls	r2, r2, #2
 8003390:	4093      	lsls	r3, r2
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003398:	4935      	ldr	r1, [pc, #212]	@ (8003470 <HAL_GPIO_Init+0x310>)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	089b      	lsrs	r3, r3, #2
 800339e:	3302      	adds	r3, #2
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003494 <HAL_GPIO_Init+0x334>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	43db      	mvns	r3, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4013      	ands	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033ca:	4a32      	ldr	r2, [pc, #200]	@ (8003494 <HAL_GPIO_Init+0x334>)
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033d0:	4b30      	ldr	r3, [pc, #192]	@ (8003494 <HAL_GPIO_Init+0x334>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	43db      	mvns	r3, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033f4:	4a27      	ldr	r2, [pc, #156]	@ (8003494 <HAL_GPIO_Init+0x334>)
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033fa:	4b26      	ldr	r3, [pc, #152]	@ (8003494 <HAL_GPIO_Init+0x334>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	43db      	mvns	r3, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4013      	ands	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800341e:	4a1d      	ldr	r2, [pc, #116]	@ (8003494 <HAL_GPIO_Init+0x334>)
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003424:	4b1b      	ldr	r3, [pc, #108]	@ (8003494 <HAL_GPIO_Init+0x334>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003448:	4a12      	ldr	r2, [pc, #72]	@ (8003494 <HAL_GPIO_Init+0x334>)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	3301      	adds	r3, #1
 8003452:	61fb      	str	r3, [r7, #28]
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	2b0f      	cmp	r3, #15
 8003458:	f67f ae90 	bls.w	800317c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800345c:	bf00      	nop
 800345e:	bf00      	nop
 8003460:	3724      	adds	r7, #36	@ 0x24
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	40013800 	.word	0x40013800
 8003474:	40020000 	.word	0x40020000
 8003478:	40020400 	.word	0x40020400
 800347c:	40020800 	.word	0x40020800
 8003480:	40020c00 	.word	0x40020c00
 8003484:	40021000 	.word	0x40021000
 8003488:	40021400 	.word	0x40021400
 800348c:	40021800 	.word	0x40021800
 8003490:	40021c00 	.word	0x40021c00
 8003494:	40013c00 	.word	0x40013c00

08003498 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	887b      	ldrh	r3, [r7, #2]
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034b0:	2301      	movs	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
 80034b4:	e001      	b.n	80034ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034b6:	2300      	movs	r3, #0
 80034b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	807b      	strh	r3, [r7, #2]
 80034d4:	4613      	mov	r3, r2
 80034d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034d8:	787b      	ldrb	r3, [r7, #1]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034de:	887a      	ldrh	r2, [r7, #2]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034e4:	e003      	b.n	80034ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034e6:	887b      	ldrh	r3, [r7, #2]
 80034e8:	041a      	lsls	r2, r3, #16
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	619a      	str	r2, [r3, #24]
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b085      	sub	sp, #20
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	460b      	mov	r3, r1
 8003504:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800350c:	887a      	ldrh	r2, [r7, #2]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4013      	ands	r3, r2
 8003512:	041a      	lsls	r2, r3, #16
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	43d9      	mvns	r1, r3
 8003518:	887b      	ldrh	r3, [r7, #2]
 800351a:	400b      	ands	r3, r1
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	619a      	str	r2, [r3, #24]
}
 8003522:	bf00      	nop
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
	...

08003530 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800353a:	4b08      	ldr	r3, [pc, #32]	@ (800355c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800353c:	695a      	ldr	r2, [r3, #20]
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	4013      	ands	r3, r2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d006      	beq.n	8003554 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003546:	4a05      	ldr	r2, [pc, #20]	@ (800355c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003548:	88fb      	ldrh	r3, [r7, #6]
 800354a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800354c:	88fb      	ldrh	r3, [r7, #6]
 800354e:	4618      	mov	r0, r3
 8003550:	f000 f806 	bl	8003560 <HAL_GPIO_EXTI_Callback>
  }
}
 8003554:	bf00      	nop
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40013c00 	.word	0x40013c00

08003560 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b086      	sub	sp, #24
 800357a:	af02      	add	r7, sp, #8
 800357c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e059      	b.n	800363c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f00c ff54 	bl	8010450 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2203      	movs	r2, #3
 80035ac:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035b6:	d102      	bne.n	80035be <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f005 f901 	bl	80087ca <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6818      	ldr	r0, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	7c1a      	ldrb	r2, [r3, #16]
 80035d0:	f88d 2000 	strb.w	r2, [sp]
 80035d4:	3304      	adds	r3, #4
 80035d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035d8:	f005 f882 	bl	80086e0 <USB_CoreInit>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d005      	beq.n	80035ee <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2202      	movs	r2, #2
 80035e6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e026      	b.n	800363c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2101      	movs	r1, #1
 80035f4:	4618      	mov	r0, r3
 80035f6:	f005 f8f9 	bl	80087ec <USB_SetCurrentMode>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e017      	b.n	800363c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	7c1a      	ldrb	r2, [r3, #16]
 8003614:	f88d 2000 	strb.w	r2, [sp]
 8003618:	3304      	adds	r3, #4
 800361a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800361c:	f005 faa2 	bl	8008b64 <USB_HostInit>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2202      	movs	r2, #2
 800362a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e004      	b.n	800363c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003644:	b590      	push	{r4, r7, lr}
 8003646:	b08b      	sub	sp, #44	@ 0x2c
 8003648:	af04      	add	r7, sp, #16
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	4608      	mov	r0, r1
 800364e:	4611      	mov	r1, r2
 8003650:	461a      	mov	r2, r3
 8003652:	4603      	mov	r3, r0
 8003654:	70fb      	strb	r3, [r7, #3]
 8003656:	460b      	mov	r3, r1
 8003658:	70bb      	strb	r3, [r7, #2]
 800365a:	4613      	mov	r3, r2
 800365c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800365e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003660:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003668:	2b01      	cmp	r3, #1
 800366a:	d101      	bne.n	8003670 <HAL_HCD_HC_Init+0x2c>
 800366c:	2302      	movs	r3, #2
 800366e:	e09d      	b.n	80037ac <HAL_HCD_HC_Init+0x168>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003678:	78fa      	ldrb	r2, [r7, #3]
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	1a9b      	subs	r3, r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	3319      	adds	r3, #25
 8003688:	2200      	movs	r2, #0
 800368a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800368c:	78fa      	ldrb	r2, [r7, #3]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	3314      	adds	r3, #20
 800369c:	787a      	ldrb	r2, [r7, #1]
 800369e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80036a0:	78fa      	ldrb	r2, [r7, #3]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	1a9b      	subs	r3, r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	3315      	adds	r3, #21
 80036b0:	78fa      	ldrb	r2, [r7, #3]
 80036b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80036b4:	78fa      	ldrb	r2, [r7, #3]
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	1a9b      	subs	r3, r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	3326      	adds	r3, #38	@ 0x26
 80036c4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80036c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80036ca:	78fa      	ldrb	r2, [r7, #3]
 80036cc:	78bb      	ldrb	r3, [r7, #2]
 80036ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036d2:	b2d8      	uxtb	r0, r3
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	3316      	adds	r3, #22
 80036e2:	4602      	mov	r2, r0
 80036e4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80036e6:	78fb      	ldrb	r3, [r7, #3]
 80036e8:	4619      	mov	r1, r3
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 fbc8 	bl	8003e80 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80036f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	da0a      	bge.n	800370e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80036f8:	78fa      	ldrb	r2, [r7, #3]
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	4613      	mov	r3, r2
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	1a9b      	subs	r3, r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	3317      	adds	r3, #23
 8003708:	2201      	movs	r2, #1
 800370a:	701a      	strb	r2, [r3, #0]
 800370c:	e009      	b.n	8003722 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800370e:	78fa      	ldrb	r2, [r7, #3]
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	1a9b      	subs	r3, r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	3317      	adds	r3, #23
 800371e:	2200      	movs	r2, #0
 8003720:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f005 fb80 	bl	8008e2c <USB_GetHostSpeed>
 800372c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800372e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003732:	2b01      	cmp	r3, #1
 8003734:	d10b      	bne.n	800374e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003736:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800373a:	2b01      	cmp	r3, #1
 800373c:	d107      	bne.n	800374e <HAL_HCD_HC_Init+0x10a>
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d104      	bne.n	800374e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2bbc      	cmp	r3, #188	@ 0xbc
 8003748:	d901      	bls.n	800374e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800374a:	23bc      	movs	r3, #188	@ 0xbc
 800374c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800374e:	78fa      	ldrb	r2, [r7, #3]
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	1a9b      	subs	r3, r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	3318      	adds	r3, #24
 800375e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003762:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003764:	78fa      	ldrb	r2, [r7, #3]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	b298      	uxth	r0, r3
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	3328      	adds	r3, #40	@ 0x28
 8003778:	4602      	mov	r2, r0
 800377a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	b29b      	uxth	r3, r3
 8003784:	787c      	ldrb	r4, [r7, #1]
 8003786:	78ba      	ldrb	r2, [r7, #2]
 8003788:	78f9      	ldrb	r1, [r7, #3]
 800378a:	9302      	str	r3, [sp, #8]
 800378c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003790:	9301      	str	r3, [sp, #4]
 8003792:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	4623      	mov	r3, r4
 800379a:	f005 fb6f 	bl	8008e7c <USB_HC_Init>
 800379e:	4603      	mov	r3, r0
 80037a0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	371c      	adds	r7, #28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd90      	pop	{r4, r7, pc}

080037b4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_HCD_HC_Halt+0x1e>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e00f      	b.n	80037f2 <HAL_HCD_HC_Halt+0x3e>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	78fa      	ldrb	r2, [r7, #3]
 80037e0:	4611      	mov	r1, r2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f005 ff01 	bl	80095ea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
	...

080037fc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	4608      	mov	r0, r1
 8003806:	4611      	mov	r1, r2
 8003808:	461a      	mov	r2, r3
 800380a:	4603      	mov	r3, r0
 800380c:	70fb      	strb	r3, [r7, #3]
 800380e:	460b      	mov	r3, r1
 8003810:	70bb      	strb	r3, [r7, #2]
 8003812:	4613      	mov	r3, r2
 8003814:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003816:	78fa      	ldrb	r2, [r7, #3]
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	4613      	mov	r3, r2
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	1a9b      	subs	r3, r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	3317      	adds	r3, #23
 8003826:	78ba      	ldrb	r2, [r7, #2]
 8003828:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800382a:	78fa      	ldrb	r2, [r7, #3]
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	4613      	mov	r3, r2
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	1a9b      	subs	r3, r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	3326      	adds	r3, #38	@ 0x26
 800383a:	787a      	ldrb	r2, [r7, #1]
 800383c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800383e:	7c3b      	ldrb	r3, [r7, #16]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d114      	bne.n	800386e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003844:	78fa      	ldrb	r2, [r7, #3]
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	4613      	mov	r3, r2
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	1a9b      	subs	r3, r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	332a      	adds	r3, #42	@ 0x2a
 8003854:	2203      	movs	r2, #3
 8003856:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003858:	78fa      	ldrb	r2, [r7, #3]
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	4613      	mov	r3, r2
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	3319      	adds	r3, #25
 8003868:	7f3a      	ldrb	r2, [r7, #28]
 800386a:	701a      	strb	r2, [r3, #0]
 800386c:	e009      	b.n	8003882 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800386e:	78fa      	ldrb	r2, [r7, #3]
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	1a9b      	subs	r3, r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	332a      	adds	r3, #42	@ 0x2a
 800387e:	2202      	movs	r2, #2
 8003880:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003882:	787b      	ldrb	r3, [r7, #1]
 8003884:	2b03      	cmp	r3, #3
 8003886:	f200 8102 	bhi.w	8003a8e <HAL_HCD_HC_SubmitRequest+0x292>
 800388a:	a201      	add	r2, pc, #4	@ (adr r2, 8003890 <HAL_HCD_HC_SubmitRequest+0x94>)
 800388c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003890:	080038a1 	.word	0x080038a1
 8003894:	08003a79 	.word	0x08003a79
 8003898:	08003965 	.word	0x08003965
 800389c:	080039ef 	.word	0x080039ef
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80038a0:	7c3b      	ldrb	r3, [r7, #16]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	f040 80f5 	bne.w	8003a92 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80038a8:	78bb      	ldrb	r3, [r7, #2]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d12d      	bne.n	800390a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80038ae:	8b3b      	ldrh	r3, [r7, #24]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d109      	bne.n	80038c8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80038b4:	78fa      	ldrb	r2, [r7, #3]
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	333d      	adds	r3, #61	@ 0x3d
 80038c4:	2201      	movs	r2, #1
 80038c6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80038c8:	78fa      	ldrb	r2, [r7, #3]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	333d      	adds	r3, #61	@ 0x3d
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10a      	bne.n	80038f4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038de:	78fa      	ldrb	r2, [r7, #3]
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	1a9b      	subs	r3, r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	440b      	add	r3, r1
 80038ec:	332a      	adds	r3, #42	@ 0x2a
 80038ee:	2200      	movs	r2, #0
 80038f0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80038f2:	e0ce      	b.n	8003a92 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	1a9b      	subs	r3, r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	332a      	adds	r3, #42	@ 0x2a
 8003904:	2202      	movs	r2, #2
 8003906:	701a      	strb	r2, [r3, #0]
      break;
 8003908:	e0c3      	b.n	8003a92 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	331a      	adds	r3, #26
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b01      	cmp	r3, #1
 800391e:	f040 80b8 	bne.w	8003a92 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	333c      	adds	r3, #60	@ 0x3c
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10a      	bne.n	800394e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003938:	78fa      	ldrb	r2, [r7, #3]
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	332a      	adds	r3, #42	@ 0x2a
 8003948:	2200      	movs	r2, #0
 800394a:	701a      	strb	r2, [r3, #0]
      break;
 800394c:	e0a1      	b.n	8003a92 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800394e:	78fa      	ldrb	r2, [r7, #3]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	332a      	adds	r3, #42	@ 0x2a
 800395e:	2202      	movs	r2, #2
 8003960:	701a      	strb	r2, [r3, #0]
      break;
 8003962:	e096      	b.n	8003a92 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003964:	78bb      	ldrb	r3, [r7, #2]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d120      	bne.n	80039ac <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	1a9b      	subs	r3, r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	333d      	adds	r3, #61	@ 0x3d
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10a      	bne.n	8003996 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003980:	78fa      	ldrb	r2, [r7, #3]
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	1a9b      	subs	r3, r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	332a      	adds	r3, #42	@ 0x2a
 8003990:	2200      	movs	r2, #0
 8003992:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003994:	e07e      	b.n	8003a94 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003996:	78fa      	ldrb	r2, [r7, #3]
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	1a9b      	subs	r3, r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	440b      	add	r3, r1
 80039a4:	332a      	adds	r3, #42	@ 0x2a
 80039a6:	2202      	movs	r2, #2
 80039a8:	701a      	strb	r2, [r3, #0]
      break;
 80039aa:	e073      	b.n	8003a94 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80039ac:	78fa      	ldrb	r2, [r7, #3]
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	1a9b      	subs	r3, r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	333c      	adds	r3, #60	@ 0x3c
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10a      	bne.n	80039d8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039c2:	78fa      	ldrb	r2, [r7, #3]
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	4613      	mov	r3, r2
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	1a9b      	subs	r3, r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	440b      	add	r3, r1
 80039d0:	332a      	adds	r3, #42	@ 0x2a
 80039d2:	2200      	movs	r2, #0
 80039d4:	701a      	strb	r2, [r3, #0]
      break;
 80039d6:	e05d      	b.n	8003a94 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039d8:	78fa      	ldrb	r2, [r7, #3]
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	4613      	mov	r3, r2
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	332a      	adds	r3, #42	@ 0x2a
 80039e8:	2202      	movs	r2, #2
 80039ea:	701a      	strb	r2, [r3, #0]
      break;
 80039ec:	e052      	b.n	8003a94 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80039ee:	78bb      	ldrb	r3, [r7, #2]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d120      	bne.n	8003a36 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80039f4:	78fa      	ldrb	r2, [r7, #3]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	333d      	adds	r3, #61	@ 0x3d
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10a      	bne.n	8003a20 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	1a9b      	subs	r3, r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	332a      	adds	r3, #42	@ 0x2a
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003a1e:	e039      	b.n	8003a94 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a20:	78fa      	ldrb	r2, [r7, #3]
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	4613      	mov	r3, r2
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	1a9b      	subs	r3, r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	332a      	adds	r3, #42	@ 0x2a
 8003a30:	2202      	movs	r2, #2
 8003a32:	701a      	strb	r2, [r3, #0]
      break;
 8003a34:	e02e      	b.n	8003a94 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003a36:	78fa      	ldrb	r2, [r7, #3]
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	1a9b      	subs	r3, r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	440b      	add	r3, r1
 8003a44:	333c      	adds	r3, #60	@ 0x3c
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10a      	bne.n	8003a62 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a4c:	78fa      	ldrb	r2, [r7, #3]
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	1a9b      	subs	r3, r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	332a      	adds	r3, #42	@ 0x2a
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	701a      	strb	r2, [r3, #0]
      break;
 8003a60:	e018      	b.n	8003a94 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a62:	78fa      	ldrb	r2, [r7, #3]
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	1a9b      	subs	r3, r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	332a      	adds	r3, #42	@ 0x2a
 8003a72:	2202      	movs	r2, #2
 8003a74:	701a      	strb	r2, [r3, #0]
      break;
 8003a76:	e00d      	b.n	8003a94 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a78:	78fa      	ldrb	r2, [r7, #3]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	332a      	adds	r3, #42	@ 0x2a
 8003a88:	2200      	movs	r2, #0
 8003a8a:	701a      	strb	r2, [r3, #0]
      break;
 8003a8c:	e002      	b.n	8003a94 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003a8e:	bf00      	nop
 8003a90:	e000      	b.n	8003a94 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003a92:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003a94:	78fa      	ldrb	r2, [r7, #3]
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	332c      	adds	r3, #44	@ 0x2c
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003aa8:	78fa      	ldrb	r2, [r7, #3]
 8003aaa:	8b39      	ldrh	r1, [r7, #24]
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	1a9b      	subs	r3, r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4403      	add	r3, r0
 8003ab8:	3334      	adds	r3, #52	@ 0x34
 8003aba:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003abc:	78fa      	ldrb	r2, [r7, #3]
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	334c      	adds	r3, #76	@ 0x4c
 8003acc:	2200      	movs	r2, #0
 8003ace:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003ad0:	78fa      	ldrb	r2, [r7, #3]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	3338      	adds	r3, #56	@ 0x38
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003ae4:	78fa      	ldrb	r2, [r7, #3]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	1a9b      	subs	r3, r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	3315      	adds	r3, #21
 8003af4:	78fa      	ldrb	r2, [r7, #3]
 8003af6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003af8:	78fa      	ldrb	r2, [r7, #3]
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	1a9b      	subs	r3, r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	334d      	adds	r3, #77	@ 0x4d
 8003b08:	2200      	movs	r2, #0
 8003b0a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6818      	ldr	r0, [r3, #0]
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	4613      	mov	r3, r2
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	1a9b      	subs	r3, r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	3310      	adds	r3, #16
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	4413      	add	r3, r2
 8003b20:	1d19      	adds	r1, r3, #4
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	799b      	ldrb	r3, [r3, #6]
 8003b26:	461a      	mov	r2, r3
 8003b28:	f005 fad4 	bl	80090d4 <USB_HC_StartXfer>
 8003b2c:	4603      	mov	r3, r0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop

08003b38 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f004 ffc2 	bl	8008ad8 <USB_GetMode>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	f040 80fb 	bne.w	8003d52 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f004 ff85 	bl	8008a70 <USB_ReadInterrupts>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 80f1 	beq.w	8003d50 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f004 ff7c 	bl	8008a70 <USB_ReadInterrupts>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b82:	d104      	bne.n	8003b8e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003b8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f004 ff6c 	bl	8008a70 <USB_ReadInterrupts>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ba2:	d104      	bne.n	8003bae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003bac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f004 ff5c 	bl	8008a70 <USB_ReadInterrupts>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003bbe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003bc2:	d104      	bne.n	8003bce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003bcc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f004 ff4c 	bl	8008a70 <USB_ReadInterrupts>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d103      	bne.n	8003bea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2202      	movs	r2, #2
 8003be8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f004 ff3e 	bl	8008a70 <USB_ReadInterrupts>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bfe:	d120      	bne.n	8003c42 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003c08:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d113      	bne.n	8003c42 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003c1a:	2110      	movs	r1, #16
 8003c1c:	6938      	ldr	r0, [r7, #16]
 8003c1e:	f004 fe31 	bl	8008884 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003c22:	6938      	ldr	r0, [r7, #16]
 8003c24:	f004 fe60 	bl	80088e8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	7a5b      	ldrb	r3, [r3, #9]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d105      	bne.n	8003c3c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2101      	movs	r1, #1
 8003c36:	4618      	mov	r0, r3
 8003c38:	f005 f858 	bl	8008cec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f00c fc85 	bl	801054c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f004 ff12 	bl	8008a70 <USB_ReadInterrupts>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c56:	d102      	bne.n	8003c5e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f001 fd4d 	bl	80056f8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f004 ff04 	bl	8008a70 <USB_ReadInterrupts>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d106      	bne.n	8003c80 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f00c fc4e 	bl	8010514 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2208      	movs	r2, #8
 8003c7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f004 fef3 	bl	8008a70 <USB_ReadInterrupts>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c94:	d139      	bne.n	8003d0a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f005 fc94 	bl	80095c8 <USB_HC_ReadInterrupt>
 8003ca0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	617b      	str	r3, [r7, #20]
 8003ca6:	e025      	b.n	8003cf4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d018      	beq.n	8003cee <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cd2:	d106      	bne.n	8003ce2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	4619      	mov	r1, r3
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f905 	bl	8003eea <HCD_HC_IN_IRQHandler>
 8003ce0:	e005      	b.n	8003cee <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 ff67 	bl	8004bbc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	795b      	ldrb	r3, [r3, #5]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d3d3      	bcc.n	8003ca8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f004 feae 	bl	8008a70 <USB_ReadInterrupts>
 8003d14:	4603      	mov	r3, r0
 8003d16:	f003 0310 	and.w	r3, r3, #16
 8003d1a:	2b10      	cmp	r3, #16
 8003d1c:	d101      	bne.n	8003d22 <HAL_HCD_IRQHandler+0x1ea>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <HAL_HCD_IRQHandler+0x1ec>
 8003d22:	2300      	movs	r3, #0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d014      	beq.n	8003d52 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699a      	ldr	r2, [r3, #24]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0210 	bic.w	r2, r2, #16
 8003d36:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f001 fbfe 	bl	800553a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	699a      	ldr	r2, [r3, #24]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f042 0210 	orr.w	r2, r2, #16
 8003d4c:	619a      	str	r2, [r3, #24]
 8003d4e:	e000      	b.n	8003d52 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003d50:	bf00      	nop
    }
  }
}
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_HCD_Start+0x16>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e013      	b.n	8003d96 <HAL_HCD_Start+0x3e>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f005 f81c 	bl	8008dba <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f004 fd0e 	bl	80087a8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b082      	sub	sp, #8
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_HCD_Stop+0x16>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e00d      	b.n	8003dd0 <HAL_HCD_Stop+0x32>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f005 fd6f 	bl	80098a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f004 ffbe 	bl	8008d66 <USB_ResetPort>
 8003dea:	4603      	mov	r3, r0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003e00:	78fa      	ldrb	r2, [r7, #3]
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	4613      	mov	r3, r2
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	1a9b      	subs	r3, r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	334c      	adds	r3, #76	@ 0x4c
 8003e10:	781b      	ldrb	r3, [r3, #0]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	460b      	mov	r3, r1
 8003e28:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003e2a:	78fa      	ldrb	r2, [r7, #3]
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	1a9b      	subs	r3, r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	440b      	add	r3, r1
 8003e38:	3338      	adds	r3, #56	@ 0x38
 8003e3a:	681b      	ldr	r3, [r3, #0]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f005 f800 	bl	8008e5a <USB_GetCurrentFrame>
 8003e5a:	4603      	mov	r3, r0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f004 ffdb 	bl	8008e2c <USB_GetHostSpeed>
 8003e76:	4603      	mov	r3, r0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003e8c:	78fa      	ldrb	r2, [r7, #3]
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	4613      	mov	r3, r2
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	1a9b      	subs	r3, r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	331a      	adds	r3, #26
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003ea0:	78fa      	ldrb	r2, [r7, #3]
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	1a9b      	subs	r3, r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	331b      	adds	r3, #27
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003eb4:	78fa      	ldrb	r2, [r7, #3]
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	1a9b      	subs	r3, r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	3325      	adds	r3, #37	@ 0x25
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003ec8:	78fa      	ldrb	r2, [r7, #3]
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	1a9b      	subs	r3, r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	3324      	adds	r3, #36	@ 0x24
 8003ed8:	2200      	movs	r2, #0
 8003eda:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b086      	sub	sp, #24
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	78fa      	ldrb	r2, [r7, #3]
 8003f06:	4611      	mov	r1, r2
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f004 fdc4 	bl	8008a96 <USB_ReadChInterrupts>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d11a      	bne.n	8003f4e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003f18:	78fb      	ldrb	r3, [r7, #3]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f24:	461a      	mov	r2, r3
 8003f26:	2304      	movs	r3, #4
 8003f28:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003f2a:	78fa      	ldrb	r2, [r7, #3]
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	1a9b      	subs	r3, r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	440b      	add	r3, r1
 8003f38:	334d      	adds	r3, #77	@ 0x4d
 8003f3a:	2207      	movs	r2, #7
 8003f3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	78fa      	ldrb	r2, [r7, #3]
 8003f44:	4611      	mov	r1, r2
 8003f46:	4618      	mov	r0, r3
 8003f48:	f005 fb4f 	bl	80095ea <USB_HC_Halt>
 8003f4c:	e09e      	b.n	800408c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	78fa      	ldrb	r2, [r7, #3]
 8003f54:	4611      	mov	r1, r2
 8003f56:	4618      	mov	r0, r3
 8003f58:	f004 fd9d 	bl	8008a96 <USB_ReadChInterrupts>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f66:	d11b      	bne.n	8003fa0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f74:	461a      	mov	r2, r3
 8003f76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003f7c:	78fa      	ldrb	r2, [r7, #3]
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	4613      	mov	r3, r2
 8003f82:	011b      	lsls	r3, r3, #4
 8003f84:	1a9b      	subs	r3, r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	334d      	adds	r3, #77	@ 0x4d
 8003f8c:	2208      	movs	r2, #8
 8003f8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	78fa      	ldrb	r2, [r7, #3]
 8003f96:	4611      	mov	r1, r2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f005 fb26 	bl	80095ea <USB_HC_Halt>
 8003f9e:	e075      	b.n	800408c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	78fa      	ldrb	r2, [r7, #3]
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f004 fd74 	bl	8008a96 <USB_ReadChInterrupts>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d11a      	bne.n	8003fee <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	2308      	movs	r3, #8
 8003fc8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003fca:	78fa      	ldrb	r2, [r7, #3]
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	011b      	lsls	r3, r3, #4
 8003fd2:	1a9b      	subs	r3, r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	334d      	adds	r3, #77	@ 0x4d
 8003fda:	2206      	movs	r2, #6
 8003fdc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	78fa      	ldrb	r2, [r7, #3]
 8003fe4:	4611      	mov	r1, r2
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f005 faff 	bl	80095ea <USB_HC_Halt>
 8003fec:	e04e      	b.n	800408c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	78fa      	ldrb	r2, [r7, #3]
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f004 fd4d 	bl	8008a96 <USB_ReadChInterrupts>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004006:	d11b      	bne.n	8004040 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004008:	78fb      	ldrb	r3, [r7, #3]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	4413      	add	r3, r2
 8004010:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004014:	461a      	mov	r2, r3
 8004016:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800401a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800401c:	78fa      	ldrb	r2, [r7, #3]
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	334d      	adds	r3, #77	@ 0x4d
 800402c:	2209      	movs	r2, #9
 800402e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	78fa      	ldrb	r2, [r7, #3]
 8004036:	4611      	mov	r1, r2
 8004038:	4618      	mov	r0, r3
 800403a:	f005 fad6 	bl	80095ea <USB_HC_Halt>
 800403e:	e025      	b.n	800408c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	78fa      	ldrb	r2, [r7, #3]
 8004046:	4611      	mov	r1, r2
 8004048:	4618      	mov	r0, r3
 800404a:	f004 fd24 	bl	8008a96 <USB_ReadChInterrupts>
 800404e:	4603      	mov	r3, r0
 8004050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004054:	2b80      	cmp	r3, #128	@ 0x80
 8004056:	d119      	bne.n	800408c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004058:	78fb      	ldrb	r3, [r7, #3]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4413      	add	r3, r2
 8004060:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004064:	461a      	mov	r2, r3
 8004066:	2380      	movs	r3, #128	@ 0x80
 8004068:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800406a:	78fa      	ldrb	r2, [r7, #3]
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	1a9b      	subs	r3, r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	440b      	add	r3, r1
 8004078:	334d      	adds	r3, #77	@ 0x4d
 800407a:	2207      	movs	r2, #7
 800407c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	78fa      	ldrb	r2, [r7, #3]
 8004084:	4611      	mov	r1, r2
 8004086:	4618      	mov	r0, r3
 8004088:	f005 faaf 	bl	80095ea <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	78fa      	ldrb	r2, [r7, #3]
 8004092:	4611      	mov	r1, r2
 8004094:	4618      	mov	r0, r3
 8004096:	f004 fcfe 	bl	8008a96 <USB_ReadChInterrupts>
 800409a:	4603      	mov	r3, r0
 800409c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040a4:	d112      	bne.n	80040cc <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	78fa      	ldrb	r2, [r7, #3]
 80040ac:	4611      	mov	r1, r2
 80040ae:	4618      	mov	r0, r3
 80040b0:	f005 fa9b 	bl	80095ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80040b4:	78fb      	ldrb	r3, [r7, #3]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040c0:	461a      	mov	r2, r3
 80040c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040c6:	6093      	str	r3, [r2, #8]
 80040c8:	f000 bd75 	b.w	8004bb6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	78fa      	ldrb	r2, [r7, #3]
 80040d2:	4611      	mov	r1, r2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f004 fcde 	bl	8008a96 <USB_ReadChInterrupts>
 80040da:	4603      	mov	r3, r0
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	f040 8128 	bne.w	8004336 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80040e6:	78fb      	ldrb	r3, [r7, #3]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040f2:	461a      	mov	r2, r3
 80040f4:	2320      	movs	r3, #32
 80040f6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80040f8:	78fa      	ldrb	r2, [r7, #3]
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	4613      	mov	r3, r2
 80040fe:	011b      	lsls	r3, r3, #4
 8004100:	1a9b      	subs	r3, r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	331b      	adds	r3, #27
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d119      	bne.n	8004142 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800410e:	78fa      	ldrb	r2, [r7, #3]
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	1a9b      	subs	r3, r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	331b      	adds	r3, #27
 800411e:	2200      	movs	r2, #0
 8004120:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004122:	78fb      	ldrb	r3, [r7, #3]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4413      	add	r3, r2
 800412a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	78fa      	ldrb	r2, [r7, #3]
 8004132:	0151      	lsls	r1, r2, #5
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	440a      	add	r2, r1
 8004138:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800413c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004140:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	799b      	ldrb	r3, [r3, #6]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d01b      	beq.n	8004182 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800414a:	78fa      	ldrb	r2, [r7, #3]
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	1a9b      	subs	r3, r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	440b      	add	r3, r1
 8004158:	3330      	adds	r3, #48	@ 0x30
 800415a:	6819      	ldr	r1, [r3, #0]
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	4413      	add	r3, r2
 8004164:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800416e:	78fa      	ldrb	r2, [r7, #3]
 8004170:	1ac9      	subs	r1, r1, r3
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	4613      	mov	r3, r2
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	1a9b      	subs	r3, r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4403      	add	r3, r0
 800417e:	3338      	adds	r3, #56	@ 0x38
 8004180:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004182:	78fa      	ldrb	r2, [r7, #3]
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	4613      	mov	r3, r2
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	1a9b      	subs	r3, r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	440b      	add	r3, r1
 8004190:	334d      	adds	r3, #77	@ 0x4d
 8004192:	2201      	movs	r2, #1
 8004194:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004196:	78fa      	ldrb	r2, [r7, #3]
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	4613      	mov	r3, r2
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	1a9b      	subs	r3, r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	440b      	add	r3, r1
 80041a4:	3344      	adds	r3, #68	@ 0x44
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041b6:	461a      	mov	r2, r3
 80041b8:	2301      	movs	r3, #1
 80041ba:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80041bc:	78fa      	ldrb	r2, [r7, #3]
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	4613      	mov	r3, r2
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	1a9b      	subs	r3, r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	3326      	adds	r3, #38	@ 0x26
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80041d2:	78fa      	ldrb	r2, [r7, #3]
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	4613      	mov	r3, r2
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	1a9b      	subs	r3, r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	3326      	adds	r3, #38	@ 0x26
 80041e2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d110      	bne.n	800420a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	78fa      	ldrb	r2, [r7, #3]
 80041ee:	4611      	mov	r1, r2
 80041f0:	4618      	mov	r0, r3
 80041f2:	f005 f9fa 	bl	80095ea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80041f6:	78fb      	ldrb	r3, [r7, #3]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004202:	461a      	mov	r2, r3
 8004204:	2310      	movs	r3, #16
 8004206:	6093      	str	r3, [r2, #8]
 8004208:	e03d      	b.n	8004286 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800420a:	78fa      	ldrb	r2, [r7, #3]
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	4613      	mov	r3, r2
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	1a9b      	subs	r3, r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	440b      	add	r3, r1
 8004218:	3326      	adds	r3, #38	@ 0x26
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	2b03      	cmp	r3, #3
 800421e:	d00a      	beq.n	8004236 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004220:	78fa      	ldrb	r2, [r7, #3]
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	4613      	mov	r3, r2
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	3326      	adds	r3, #38	@ 0x26
 8004230:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004232:	2b01      	cmp	r3, #1
 8004234:	d127      	bne.n	8004286 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	4413      	add	r3, r2
 800423e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	78fa      	ldrb	r2, [r7, #3]
 8004246:	0151      	lsls	r1, r2, #5
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	440a      	add	r2, r1
 800424c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004250:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004254:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004256:	78fa      	ldrb	r2, [r7, #3]
 8004258:	6879      	ldr	r1, [r7, #4]
 800425a:	4613      	mov	r3, r2
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	1a9b      	subs	r3, r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	440b      	add	r3, r1
 8004264:	334c      	adds	r3, #76	@ 0x4c
 8004266:	2201      	movs	r2, #1
 8004268:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800426a:	78fa      	ldrb	r2, [r7, #3]
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	334c      	adds	r3, #76	@ 0x4c
 800427a:	781a      	ldrb	r2, [r3, #0]
 800427c:	78fb      	ldrb	r3, [r7, #3]
 800427e:	4619      	mov	r1, r3
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f00c f971 	bl	8010568 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	799b      	ldrb	r3, [r3, #6]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d13b      	bne.n	8004306 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800428e:	78fa      	ldrb	r2, [r7, #3]
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	1a9b      	subs	r3, r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	3338      	adds	r3, #56	@ 0x38
 800429e:	6819      	ldr	r1, [r3, #0]
 80042a0:	78fa      	ldrb	r2, [r7, #3]
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	1a9b      	subs	r3, r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4403      	add	r3, r0
 80042ae:	3328      	adds	r3, #40	@ 0x28
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	440b      	add	r3, r1
 80042b4:	1e59      	subs	r1, r3, #1
 80042b6:	78fa      	ldrb	r2, [r7, #3]
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	1a9b      	subs	r3, r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4403      	add	r3, r0
 80042c4:	3328      	adds	r3, #40	@ 0x28
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 8470 	beq.w	8004bb6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80042d6:	78fa      	ldrb	r2, [r7, #3]
 80042d8:	6879      	ldr	r1, [r7, #4]
 80042da:	4613      	mov	r3, r2
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	440b      	add	r3, r1
 80042e4:	333c      	adds	r3, #60	@ 0x3c
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	78fa      	ldrb	r2, [r7, #3]
 80042ea:	f083 0301 	eor.w	r3, r3, #1
 80042ee:	b2d8      	uxtb	r0, r3
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	4613      	mov	r3, r2
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	1a9b      	subs	r3, r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	333c      	adds	r3, #60	@ 0x3c
 80042fe:	4602      	mov	r2, r0
 8004300:	701a      	strb	r2, [r3, #0]
 8004302:	f000 bc58 	b.w	8004bb6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004306:	78fa      	ldrb	r2, [r7, #3]
 8004308:	6879      	ldr	r1, [r7, #4]
 800430a:	4613      	mov	r3, r2
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	1a9b      	subs	r3, r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	440b      	add	r3, r1
 8004314:	333c      	adds	r3, #60	@ 0x3c
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	78fa      	ldrb	r2, [r7, #3]
 800431a:	f083 0301 	eor.w	r3, r3, #1
 800431e:	b2d8      	uxtb	r0, r3
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	1a9b      	subs	r3, r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	440b      	add	r3, r1
 800432c:	333c      	adds	r3, #60	@ 0x3c
 800432e:	4602      	mov	r2, r0
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	f000 bc40 	b.w	8004bb6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	78fa      	ldrb	r2, [r7, #3]
 800433c:	4611      	mov	r1, r2
 800433e:	4618      	mov	r0, r3
 8004340:	f004 fba9 	bl	8008a96 <USB_ReadChInterrupts>
 8004344:	4603      	mov	r3, r0
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b20      	cmp	r3, #32
 800434c:	d131      	bne.n	80043b2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800434e:	78fb      	ldrb	r3, [r7, #3]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	4413      	add	r3, r2
 8004356:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800435a:	461a      	mov	r2, r3
 800435c:	2320      	movs	r3, #32
 800435e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004360:	78fa      	ldrb	r2, [r7, #3]
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	4613      	mov	r3, r2
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	1a9b      	subs	r3, r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	331a      	adds	r3, #26
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	2b01      	cmp	r3, #1
 8004374:	f040 841f 	bne.w	8004bb6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004378:	78fa      	ldrb	r2, [r7, #3]
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	4613      	mov	r3, r2
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	1a9b      	subs	r3, r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	331b      	adds	r3, #27
 8004388:	2201      	movs	r2, #1
 800438a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800438c:	78fa      	ldrb	r2, [r7, #3]
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	1a9b      	subs	r3, r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	334d      	adds	r3, #77	@ 0x4d
 800439c:	2203      	movs	r2, #3
 800439e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	78fa      	ldrb	r2, [r7, #3]
 80043a6:	4611      	mov	r1, r2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f005 f91e 	bl	80095ea <USB_HC_Halt>
 80043ae:	f000 bc02 	b.w	8004bb6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	78fa      	ldrb	r2, [r7, #3]
 80043b8:	4611      	mov	r1, r2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f004 fb6b 	bl	8008a96 <USB_ReadChInterrupts>
 80043c0:	4603      	mov	r3, r0
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	f040 8305 	bne.w	80049d6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043d8:	461a      	mov	r2, r3
 80043da:	2302      	movs	r3, #2
 80043dc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80043de:	78fa      	ldrb	r2, [r7, #3]
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	440b      	add	r3, r1
 80043ec:	334d      	adds	r3, #77	@ 0x4d
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d114      	bne.n	800441e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043f4:	78fa      	ldrb	r2, [r7, #3]
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	4613      	mov	r3, r2
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	1a9b      	subs	r3, r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	440b      	add	r3, r1
 8004402:	334d      	adds	r3, #77	@ 0x4d
 8004404:	2202      	movs	r2, #2
 8004406:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004408:	78fa      	ldrb	r2, [r7, #3]
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	334c      	adds	r3, #76	@ 0x4c
 8004418:	2201      	movs	r2, #1
 800441a:	701a      	strb	r2, [r3, #0]
 800441c:	e2cc      	b.n	80049b8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800441e:	78fa      	ldrb	r2, [r7, #3]
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	4613      	mov	r3, r2
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	1a9b      	subs	r3, r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	440b      	add	r3, r1
 800442c:	334d      	adds	r3, #77	@ 0x4d
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	2b06      	cmp	r3, #6
 8004432:	d114      	bne.n	800445e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004434:	78fa      	ldrb	r2, [r7, #3]
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	4613      	mov	r3, r2
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	1a9b      	subs	r3, r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	334d      	adds	r3, #77	@ 0x4d
 8004444:	2202      	movs	r2, #2
 8004446:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004448:	78fa      	ldrb	r2, [r7, #3]
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	1a9b      	subs	r3, r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	334c      	adds	r3, #76	@ 0x4c
 8004458:	2205      	movs	r2, #5
 800445a:	701a      	strb	r2, [r3, #0]
 800445c:	e2ac      	b.n	80049b8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800445e:	78fa      	ldrb	r2, [r7, #3]
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	4613      	mov	r3, r2
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	1a9b      	subs	r3, r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	440b      	add	r3, r1
 800446c:	334d      	adds	r3, #77	@ 0x4d
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b07      	cmp	r3, #7
 8004472:	d00b      	beq.n	800448c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004474:	78fa      	ldrb	r2, [r7, #3]
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	4613      	mov	r3, r2
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	334d      	adds	r3, #77	@ 0x4d
 8004484:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004486:	2b09      	cmp	r3, #9
 8004488:	f040 80a6 	bne.w	80045d8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800448c:	78fa      	ldrb	r2, [r7, #3]
 800448e:	6879      	ldr	r1, [r7, #4]
 8004490:	4613      	mov	r3, r2
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	1a9b      	subs	r3, r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	334d      	adds	r3, #77	@ 0x4d
 800449c:	2202      	movs	r2, #2
 800449e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80044a0:	78fa      	ldrb	r2, [r7, #3]
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	4613      	mov	r3, r2
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	1a9b      	subs	r3, r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	3344      	adds	r3, #68	@ 0x44
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	1c59      	adds	r1, r3, #1
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	1a9b      	subs	r3, r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4403      	add	r3, r0
 80044c0:	3344      	adds	r3, #68	@ 0x44
 80044c2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044c4:	78fa      	ldrb	r2, [r7, #3]
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	3344      	adds	r3, #68	@ 0x44
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d943      	bls.n	8004562 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80044da:	78fa      	ldrb	r2, [r7, #3]
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	1a9b      	subs	r3, r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	440b      	add	r3, r1
 80044e8:	3344      	adds	r3, #68	@ 0x44
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80044ee:	78fa      	ldrb	r2, [r7, #3]
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	4613      	mov	r3, r2
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	1a9b      	subs	r3, r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	440b      	add	r3, r1
 80044fc:	331a      	adds	r3, #26
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d123      	bne.n	800454c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004504:	78fa      	ldrb	r2, [r7, #3]
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	331b      	adds	r3, #27
 8004514:	2200      	movs	r2, #0
 8004516:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004518:	78fa      	ldrb	r2, [r7, #3]
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	4613      	mov	r3, r2
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	1a9b      	subs	r3, r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	440b      	add	r3, r1
 8004526:	331c      	adds	r3, #28
 8004528:	2200      	movs	r2, #0
 800452a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800452c:	78fb      	ldrb	r3, [r7, #3]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	4413      	add	r3, r2
 8004534:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	78fa      	ldrb	r2, [r7, #3]
 800453c:	0151      	lsls	r1, r2, #5
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	440a      	add	r2, r1
 8004542:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004546:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800454a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800454c:	78fa      	ldrb	r2, [r7, #3]
 800454e:	6879      	ldr	r1, [r7, #4]
 8004550:	4613      	mov	r3, r2
 8004552:	011b      	lsls	r3, r3, #4
 8004554:	1a9b      	subs	r3, r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	440b      	add	r3, r1
 800455a:	334c      	adds	r3, #76	@ 0x4c
 800455c:	2204      	movs	r2, #4
 800455e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004560:	e229      	b.n	80049b6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004562:	78fa      	ldrb	r2, [r7, #3]
 8004564:	6879      	ldr	r1, [r7, #4]
 8004566:	4613      	mov	r3, r2
 8004568:	011b      	lsls	r3, r3, #4
 800456a:	1a9b      	subs	r3, r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	440b      	add	r3, r1
 8004570:	334c      	adds	r3, #76	@ 0x4c
 8004572:	2202      	movs	r2, #2
 8004574:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004576:	78fa      	ldrb	r2, [r7, #3]
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	4613      	mov	r3, r2
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	1a9b      	subs	r3, r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	440b      	add	r3, r1
 8004584:	3326      	adds	r3, #38	@ 0x26
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00b      	beq.n	80045a4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800458c:	78fa      	ldrb	r2, [r7, #3]
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	4613      	mov	r3, r2
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	1a9b      	subs	r3, r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	3326      	adds	r3, #38	@ 0x26
 800459c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800459e:	2b02      	cmp	r3, #2
 80045a0:	f040 8209 	bne.w	80049b6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80045a4:	78fb      	ldrb	r3, [r7, #3]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80045ba:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80045c2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045d0:	461a      	mov	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80045d6:	e1ee      	b.n	80049b6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80045d8:	78fa      	ldrb	r2, [r7, #3]
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	4613      	mov	r3, r2
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	1a9b      	subs	r3, r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	334d      	adds	r3, #77	@ 0x4d
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	2b05      	cmp	r3, #5
 80045ec:	f040 80c8 	bne.w	8004780 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045f0:	78fa      	ldrb	r2, [r7, #3]
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	4613      	mov	r3, r2
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	334d      	adds	r3, #77	@ 0x4d
 8004600:	2202      	movs	r2, #2
 8004602:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004604:	78fa      	ldrb	r2, [r7, #3]
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	4613      	mov	r3, r2
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	1a9b      	subs	r3, r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	440b      	add	r3, r1
 8004612:	331b      	adds	r3, #27
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b01      	cmp	r3, #1
 8004618:	f040 81ce 	bne.w	80049b8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800461c:	78fa      	ldrb	r2, [r7, #3]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	1a9b      	subs	r3, r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	3326      	adds	r3, #38	@ 0x26
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b03      	cmp	r3, #3
 8004630:	d16b      	bne.n	800470a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004632:	78fa      	ldrb	r2, [r7, #3]
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	1a9b      	subs	r3, r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	440b      	add	r3, r1
 8004640:	3348      	adds	r3, #72	@ 0x48
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	1c59      	adds	r1, r3, #1
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	4613      	mov	r3, r2
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	1a9b      	subs	r3, r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4403      	add	r3, r0
 8004652:	3348      	adds	r3, #72	@ 0x48
 8004654:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004656:	78fa      	ldrb	r2, [r7, #3]
 8004658:	6879      	ldr	r1, [r7, #4]
 800465a:	4613      	mov	r3, r2
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	1a9b      	subs	r3, r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	440b      	add	r3, r1
 8004664:	3348      	adds	r3, #72	@ 0x48
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b02      	cmp	r3, #2
 800466a:	d943      	bls.n	80046f4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800466c:	78fa      	ldrb	r2, [r7, #3]
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	4613      	mov	r3, r2
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	3348      	adds	r3, #72	@ 0x48
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004680:	78fa      	ldrb	r2, [r7, #3]
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	4613      	mov	r3, r2
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	1a9b      	subs	r3, r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	440b      	add	r3, r1
 800468e:	331b      	adds	r3, #27
 8004690:	2200      	movs	r2, #0
 8004692:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004694:	78fa      	ldrb	r2, [r7, #3]
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	4613      	mov	r3, r2
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	1a9b      	subs	r3, r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	3344      	adds	r3, #68	@ 0x44
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d809      	bhi.n	80046be <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80046aa:	78fa      	ldrb	r2, [r7, #3]
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	4613      	mov	r3, r2
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	1a9b      	subs	r3, r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	440b      	add	r3, r1
 80046b8:	331c      	adds	r3, #28
 80046ba:	2201      	movs	r2, #1
 80046bc:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80046be:	78fb      	ldrb	r3, [r7, #3]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	78fa      	ldrb	r2, [r7, #3]
 80046ce:	0151      	lsls	r1, r2, #5
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	440a      	add	r2, r1
 80046d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046dc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80046de:	78fa      	ldrb	r2, [r7, #3]
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	4613      	mov	r3, r2
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	1a9b      	subs	r3, r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	440b      	add	r3, r1
 80046ec:	334c      	adds	r3, #76	@ 0x4c
 80046ee:	2204      	movs	r2, #4
 80046f0:	701a      	strb	r2, [r3, #0]
 80046f2:	e014      	b.n	800471e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80046f4:	78fa      	ldrb	r2, [r7, #3]
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	4613      	mov	r3, r2
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	1a9b      	subs	r3, r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	334c      	adds	r3, #76	@ 0x4c
 8004704:	2202      	movs	r2, #2
 8004706:	701a      	strb	r2, [r3, #0]
 8004708:	e009      	b.n	800471e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800470a:	78fa      	ldrb	r2, [r7, #3]
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	334c      	adds	r3, #76	@ 0x4c
 800471a:	2202      	movs	r2, #2
 800471c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800471e:	78fa      	ldrb	r2, [r7, #3]
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	1a9b      	subs	r3, r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	3326      	adds	r3, #38	@ 0x26
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00b      	beq.n	800474c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004734:	78fa      	ldrb	r2, [r7, #3]
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	1a9b      	subs	r3, r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	3326      	adds	r3, #38	@ 0x26
 8004744:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004746:	2b02      	cmp	r3, #2
 8004748:	f040 8136 	bne.w	80049b8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800474c:	78fb      	ldrb	r3, [r7, #3]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	4413      	add	r3, r2
 8004754:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004762:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800476a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800476c:	78fb      	ldrb	r3, [r7, #3]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	4413      	add	r3, r2
 8004774:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004778:	461a      	mov	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	e11b      	b.n	80049b8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004780:	78fa      	ldrb	r2, [r7, #3]
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	4613      	mov	r3, r2
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	1a9b      	subs	r3, r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	440b      	add	r3, r1
 800478e:	334d      	adds	r3, #77	@ 0x4d
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b03      	cmp	r3, #3
 8004794:	f040 8081 	bne.w	800489a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004798:	78fa      	ldrb	r2, [r7, #3]
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	4613      	mov	r3, r2
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	1a9b      	subs	r3, r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	334d      	adds	r3, #77	@ 0x4d
 80047a8:	2202      	movs	r2, #2
 80047aa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80047ac:	78fa      	ldrb	r2, [r7, #3]
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	4613      	mov	r3, r2
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	1a9b      	subs	r3, r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	331b      	adds	r3, #27
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	f040 80fa 	bne.w	80049b8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80047c4:	78fa      	ldrb	r2, [r7, #3]
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	4613      	mov	r3, r2
 80047ca:	011b      	lsls	r3, r3, #4
 80047cc:	1a9b      	subs	r3, r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	440b      	add	r3, r1
 80047d2:	334c      	adds	r3, #76	@ 0x4c
 80047d4:	2202      	movs	r2, #2
 80047d6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80047d8:	78fb      	ldrb	r3, [r7, #3]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	78fa      	ldrb	r2, [r7, #3]
 80047e8:	0151      	lsls	r1, r2, #5
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	440a      	add	r2, r1
 80047ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80047f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047f6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80047f8:	78fb      	ldrb	r3, [r7, #3]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	78fa      	ldrb	r2, [r7, #3]
 8004808:	0151      	lsls	r1, r2, #5
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	440a      	add	r2, r1
 800480e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004816:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	4413      	add	r3, r2
 8004820:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	78fa      	ldrb	r2, [r7, #3]
 8004828:	0151      	lsls	r1, r2, #5
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	440a      	add	r2, r1
 800482e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004832:	f023 0320 	bic.w	r3, r3, #32
 8004836:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004838:	78fa      	ldrb	r2, [r7, #3]
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	4613      	mov	r3, r2
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	1a9b      	subs	r3, r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	3326      	adds	r3, #38	@ 0x26
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00b      	beq.n	8004866 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800484e:	78fa      	ldrb	r2, [r7, #3]
 8004850:	6879      	ldr	r1, [r7, #4]
 8004852:	4613      	mov	r3, r2
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	1a9b      	subs	r3, r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	440b      	add	r3, r1
 800485c:	3326      	adds	r3, #38	@ 0x26
 800485e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004860:	2b02      	cmp	r3, #2
 8004862:	f040 80a9 	bne.w	80049b8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	4413      	add	r3, r2
 800486e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800487c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004884:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004886:	78fb      	ldrb	r3, [r7, #3]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	4413      	add	r3, r2
 800488e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004892:	461a      	mov	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	e08e      	b.n	80049b8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800489a:	78fa      	ldrb	r2, [r7, #3]
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	4613      	mov	r3, r2
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	1a9b      	subs	r3, r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	440b      	add	r3, r1
 80048a8:	334d      	adds	r3, #77	@ 0x4d
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d143      	bne.n	8004938 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048b0:	78fa      	ldrb	r2, [r7, #3]
 80048b2:	6879      	ldr	r1, [r7, #4]
 80048b4:	4613      	mov	r3, r2
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	1a9b      	subs	r3, r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	440b      	add	r3, r1
 80048be:	334d      	adds	r3, #77	@ 0x4d
 80048c0:	2202      	movs	r2, #2
 80048c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80048c4:	78fa      	ldrb	r2, [r7, #3]
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	4613      	mov	r3, r2
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	1a9b      	subs	r3, r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	440b      	add	r3, r1
 80048d2:	334c      	adds	r3, #76	@ 0x4c
 80048d4:	2202      	movs	r2, #2
 80048d6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80048d8:	78fa      	ldrb	r2, [r7, #3]
 80048da:	6879      	ldr	r1, [r7, #4]
 80048dc:	4613      	mov	r3, r2
 80048de:	011b      	lsls	r3, r3, #4
 80048e0:	1a9b      	subs	r3, r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	440b      	add	r3, r1
 80048e6:	3326      	adds	r3, #38	@ 0x26
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80048ee:	78fa      	ldrb	r2, [r7, #3]
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	4613      	mov	r3, r2
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	1a9b      	subs	r3, r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	440b      	add	r3, r1
 80048fc:	3326      	adds	r3, #38	@ 0x26
 80048fe:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004900:	2b02      	cmp	r3, #2
 8004902:	d159      	bne.n	80049b8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4413      	add	r3, r2
 800490c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800491a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004922:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004924:	78fb      	ldrb	r3, [r7, #3]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	4413      	add	r3, r2
 800492c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004930:	461a      	mov	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6013      	str	r3, [r2, #0]
 8004936:	e03f      	b.n	80049b8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004938:	78fa      	ldrb	r2, [r7, #3]
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	4613      	mov	r3, r2
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	1a9b      	subs	r3, r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	334d      	adds	r3, #77	@ 0x4d
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b08      	cmp	r3, #8
 800494c:	d126      	bne.n	800499c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800494e:	78fa      	ldrb	r2, [r7, #3]
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	4613      	mov	r3, r2
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	1a9b      	subs	r3, r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	440b      	add	r3, r1
 800495c:	334d      	adds	r3, #77	@ 0x4d
 800495e:	2202      	movs	r2, #2
 8004960:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004962:	78fa      	ldrb	r2, [r7, #3]
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	4613      	mov	r3, r2
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	1a9b      	subs	r3, r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	440b      	add	r3, r1
 8004970:	3344      	adds	r3, #68	@ 0x44
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	1c59      	adds	r1, r3, #1
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	4613      	mov	r3, r2
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	1a9b      	subs	r3, r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4403      	add	r3, r0
 8004982:	3344      	adds	r3, #68	@ 0x44
 8004984:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004986:	78fa      	ldrb	r2, [r7, #3]
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	4613      	mov	r3, r2
 800498c:	011b      	lsls	r3, r3, #4
 800498e:	1a9b      	subs	r3, r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	440b      	add	r3, r1
 8004994:	334c      	adds	r3, #76	@ 0x4c
 8004996:	2204      	movs	r2, #4
 8004998:	701a      	strb	r2, [r3, #0]
 800499a:	e00d      	b.n	80049b8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800499c:	78fa      	ldrb	r2, [r7, #3]
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	4613      	mov	r3, r2
 80049a2:	011b      	lsls	r3, r3, #4
 80049a4:	1a9b      	subs	r3, r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	334d      	adds	r3, #77	@ 0x4d
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	f000 8100 	beq.w	8004bb4 <HCD_HC_IN_IRQHandler+0xcca>
 80049b4:	e000      	b.n	80049b8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80049b6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80049b8:	78fa      	ldrb	r2, [r7, #3]
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	4613      	mov	r3, r2
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	1a9b      	subs	r3, r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	440b      	add	r3, r1
 80049c6:	334c      	adds	r3, #76	@ 0x4c
 80049c8:	781a      	ldrb	r2, [r3, #0]
 80049ca:	78fb      	ldrb	r3, [r7, #3]
 80049cc:	4619      	mov	r1, r3
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f00b fdca 	bl	8010568 <HAL_HCD_HC_NotifyURBChange_Callback>
 80049d4:	e0ef      	b.n	8004bb6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	78fa      	ldrb	r2, [r7, #3]
 80049dc:	4611      	mov	r1, r2
 80049de:	4618      	mov	r0, r3
 80049e0:	f004 f859 	bl	8008a96 <USB_ReadChInterrupts>
 80049e4:	4603      	mov	r3, r0
 80049e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ea:	2b40      	cmp	r3, #64	@ 0x40
 80049ec:	d12f      	bne.n	8004a4e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80049ee:	78fb      	ldrb	r3, [r7, #3]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049fa:	461a      	mov	r2, r3
 80049fc:	2340      	movs	r3, #64	@ 0x40
 80049fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004a00:	78fa      	ldrb	r2, [r7, #3]
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	4613      	mov	r3, r2
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	334d      	adds	r3, #77	@ 0x4d
 8004a10:	2205      	movs	r2, #5
 8004a12:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004a14:	78fa      	ldrb	r2, [r7, #3]
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	1a9b      	subs	r3, r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	440b      	add	r3, r1
 8004a22:	331a      	adds	r3, #26
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d109      	bne.n	8004a3e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004a2a:	78fa      	ldrb	r2, [r7, #3]
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	011b      	lsls	r3, r3, #4
 8004a32:	1a9b      	subs	r3, r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	3344      	adds	r3, #68	@ 0x44
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	78fa      	ldrb	r2, [r7, #3]
 8004a44:	4611      	mov	r1, r2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f004 fdcf 	bl	80095ea <USB_HC_Halt>
 8004a4c:	e0b3      	b.n	8004bb6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	78fa      	ldrb	r2, [r7, #3]
 8004a54:	4611      	mov	r1, r2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f004 f81d 	bl	8008a96 <USB_ReadChInterrupts>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	f003 0310 	and.w	r3, r3, #16
 8004a62:	2b10      	cmp	r3, #16
 8004a64:	f040 80a7 	bne.w	8004bb6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004a68:	78fa      	ldrb	r2, [r7, #3]
 8004a6a:	6879      	ldr	r1, [r7, #4]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	011b      	lsls	r3, r3, #4
 8004a70:	1a9b      	subs	r3, r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	3326      	adds	r3, #38	@ 0x26
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	d11b      	bne.n	8004ab6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004a7e:	78fa      	ldrb	r2, [r7, #3]
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	4613      	mov	r3, r2
 8004a84:	011b      	lsls	r3, r3, #4
 8004a86:	1a9b      	subs	r3, r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	3344      	adds	r3, #68	@ 0x44
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004a92:	78fa      	ldrb	r2, [r7, #3]
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	334d      	adds	r3, #77	@ 0x4d
 8004aa2:	2204      	movs	r2, #4
 8004aa4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	78fa      	ldrb	r2, [r7, #3]
 8004aac:	4611      	mov	r1, r2
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f004 fd9b 	bl	80095ea <USB_HC_Halt>
 8004ab4:	e03f      	b.n	8004b36 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ab6:	78fa      	ldrb	r2, [r7, #3]
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	4613      	mov	r3, r2
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	1a9b      	subs	r3, r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	440b      	add	r3, r1
 8004ac4:	3326      	adds	r3, #38	@ 0x26
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00a      	beq.n	8004ae2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004acc:	78fa      	ldrb	r2, [r7, #3]
 8004ace:	6879      	ldr	r1, [r7, #4]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	1a9b      	subs	r3, r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	440b      	add	r3, r1
 8004ada:	3326      	adds	r3, #38	@ 0x26
 8004adc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d129      	bne.n	8004b36 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004ae2:	78fa      	ldrb	r2, [r7, #3]
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	1a9b      	subs	r3, r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	440b      	add	r3, r1
 8004af0:	3344      	adds	r3, #68	@ 0x44
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	799b      	ldrb	r3, [r3, #6]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <HCD_HC_IN_IRQHandler+0xc2a>
 8004afe:	78fa      	ldrb	r2, [r7, #3]
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	4613      	mov	r3, r2
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	1a9b      	subs	r3, r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	440b      	add	r3, r1
 8004b0c:	331b      	adds	r3, #27
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d110      	bne.n	8004b36 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004b14:	78fa      	ldrb	r2, [r7, #3]
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	1a9b      	subs	r3, r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	334d      	adds	r3, #77	@ 0x4d
 8004b24:	2204      	movs	r2, #4
 8004b26:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	78fa      	ldrb	r2, [r7, #3]
 8004b2e:	4611      	mov	r1, r2
 8004b30:	4618      	mov	r0, r3
 8004b32:	f004 fd5a 	bl	80095ea <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004b36:	78fa      	ldrb	r2, [r7, #3]
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	1a9b      	subs	r3, r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	440b      	add	r3, r1
 8004b44:	331b      	adds	r3, #27
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d129      	bne.n	8004ba0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004b4c:	78fa      	ldrb	r2, [r7, #3]
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	1a9b      	subs	r3, r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	331b      	adds	r3, #27
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004b60:	78fb      	ldrb	r3, [r7, #3]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	78fa      	ldrb	r2, [r7, #3]
 8004b70:	0151      	lsls	r1, r2, #5
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	440a      	add	r2, r1
 8004b76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b7e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004b80:	78fb      	ldrb	r3, [r7, #3]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	78fa      	ldrb	r2, [r7, #3]
 8004b90:	0151      	lsls	r1, r2, #5
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	440a      	add	r2, r1
 8004b96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b9a:	f043 0320 	orr.w	r3, r3, #32
 8004b9e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bac:	461a      	mov	r2, r3
 8004bae:	2310      	movs	r3, #16
 8004bb0:	6093      	str	r3, [r2, #8]
 8004bb2:	e000      	b.n	8004bb6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004bb4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004bb6:	3718      	adds	r7, #24
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	78fa      	ldrb	r2, [r7, #3]
 8004bd8:	4611      	mov	r1, r2
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f003 ff5b 	bl	8008a96 <USB_ReadChInterrupts>
 8004be0:	4603      	mov	r3, r0
 8004be2:	f003 0304 	and.w	r3, r3, #4
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d11b      	bne.n	8004c22 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004bea:	78fb      	ldrb	r3, [r7, #3]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	2304      	movs	r3, #4
 8004bfa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004bfc:	78fa      	ldrb	r2, [r7, #3]
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	4613      	mov	r3, r2
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	1a9b      	subs	r3, r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	334d      	adds	r3, #77	@ 0x4d
 8004c0c:	2207      	movs	r2, #7
 8004c0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	78fa      	ldrb	r2, [r7, #3]
 8004c16:	4611      	mov	r1, r2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f004 fce6 	bl	80095ea <USB_HC_Halt>
 8004c1e:	f000 bc89 	b.w	8005534 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	78fa      	ldrb	r2, [r7, #3]
 8004c28:	4611      	mov	r1, r2
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f003 ff33 	bl	8008a96 <USB_ReadChInterrupts>
 8004c30:	4603      	mov	r3, r0
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	f040 8082 	bne.w	8004d40 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004c3c:	78fb      	ldrb	r3, [r7, #3]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c48:	461a      	mov	r2, r3
 8004c4a:	2320      	movs	r3, #32
 8004c4c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004c4e:	78fa      	ldrb	r2, [r7, #3]
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	1a9b      	subs	r3, r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	3319      	adds	r3, #25
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d124      	bne.n	8004cae <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004c64:	78fa      	ldrb	r2, [r7, #3]
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	1a9b      	subs	r3, r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	3319      	adds	r3, #25
 8004c74:	2200      	movs	r2, #0
 8004c76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004c78:	78fa      	ldrb	r2, [r7, #3]
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	1a9b      	subs	r3, r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	334c      	adds	r3, #76	@ 0x4c
 8004c88:	2202      	movs	r2, #2
 8004c8a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004c8c:	78fa      	ldrb	r2, [r7, #3]
 8004c8e:	6879      	ldr	r1, [r7, #4]
 8004c90:	4613      	mov	r3, r2
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	1a9b      	subs	r3, r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	334d      	adds	r3, #77	@ 0x4d
 8004c9c:	2203      	movs	r2, #3
 8004c9e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	78fa      	ldrb	r2, [r7, #3]
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f004 fc9e 	bl	80095ea <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004cae:	78fa      	ldrb	r2, [r7, #3]
 8004cb0:	6879      	ldr	r1, [r7, #4]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	011b      	lsls	r3, r3, #4
 8004cb6:	1a9b      	subs	r3, r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	440b      	add	r3, r1
 8004cbc:	331a      	adds	r3, #26
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	f040 8437 	bne.w	8005534 <HCD_HC_OUT_IRQHandler+0x978>
 8004cc6:	78fa      	ldrb	r2, [r7, #3]
 8004cc8:	6879      	ldr	r1, [r7, #4]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	011b      	lsls	r3, r3, #4
 8004cce:	1a9b      	subs	r3, r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	440b      	add	r3, r1
 8004cd4:	331b      	adds	r3, #27
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f040 842b 	bne.w	8005534 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004cde:	78fa      	ldrb	r2, [r7, #3]
 8004ce0:	6879      	ldr	r1, [r7, #4]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	1a9b      	subs	r3, r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	440b      	add	r3, r1
 8004cec:	3326      	adds	r3, #38	@ 0x26
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d009      	beq.n	8004d08 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004cf4:	78fa      	ldrb	r2, [r7, #3]
 8004cf6:	6879      	ldr	r1, [r7, #4]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	1a9b      	subs	r3, r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	440b      	add	r3, r1
 8004d02:	331b      	adds	r3, #27
 8004d04:	2201      	movs	r2, #1
 8004d06:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004d08:	78fa      	ldrb	r2, [r7, #3]
 8004d0a:	6879      	ldr	r1, [r7, #4]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	1a9b      	subs	r3, r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	334d      	adds	r3, #77	@ 0x4d
 8004d18:	2203      	movs	r2, #3
 8004d1a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	78fa      	ldrb	r2, [r7, #3]
 8004d22:	4611      	mov	r1, r2
 8004d24:	4618      	mov	r0, r3
 8004d26:	f004 fc60 	bl	80095ea <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004d2a:	78fa      	ldrb	r2, [r7, #3]
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	1a9b      	subs	r3, r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	440b      	add	r3, r1
 8004d38:	3344      	adds	r3, #68	@ 0x44
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	e3f9      	b.n	8005534 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	78fa      	ldrb	r2, [r7, #3]
 8004d46:	4611      	mov	r1, r2
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f003 fea4 	bl	8008a96 <USB_ReadChInterrupts>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d58:	d111      	bne.n	8004d7e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004d5a:	78fb      	ldrb	r3, [r7, #3]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d66:	461a      	mov	r2, r3
 8004d68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d6c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	78fa      	ldrb	r2, [r7, #3]
 8004d74:	4611      	mov	r1, r2
 8004d76:	4618      	mov	r0, r3
 8004d78:	f004 fc37 	bl	80095ea <USB_HC_Halt>
 8004d7c:	e3da      	b.n	8005534 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	78fa      	ldrb	r2, [r7, #3]
 8004d84:	4611      	mov	r1, r2
 8004d86:	4618      	mov	r0, r3
 8004d88:	f003 fe85 	bl	8008a96 <USB_ReadChInterrupts>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d168      	bne.n	8004e68 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004d96:	78fa      	ldrb	r2, [r7, #3]
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	011b      	lsls	r3, r3, #4
 8004d9e:	1a9b      	subs	r3, r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	440b      	add	r3, r1
 8004da4:	3344      	adds	r3, #68	@ 0x44
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	78fa      	ldrb	r2, [r7, #3]
 8004db0:	4611      	mov	r1, r2
 8004db2:	4618      	mov	r0, r3
 8004db4:	f003 fe6f 	bl	8008a96 <USB_ReadChInterrupts>
 8004db8:	4603      	mov	r3, r0
 8004dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dbe:	2b40      	cmp	r3, #64	@ 0x40
 8004dc0:	d112      	bne.n	8004de8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004dc2:	78fa      	ldrb	r2, [r7, #3]
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	011b      	lsls	r3, r3, #4
 8004dca:	1a9b      	subs	r3, r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	440b      	add	r3, r1
 8004dd0:	3319      	adds	r3, #25
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004dd6:	78fb      	ldrb	r3, [r7, #3]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004de2:	461a      	mov	r2, r3
 8004de4:	2340      	movs	r3, #64	@ 0x40
 8004de6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004de8:	78fa      	ldrb	r2, [r7, #3]
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	4613      	mov	r3, r2
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	1a9b      	subs	r3, r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	331b      	adds	r3, #27
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d019      	beq.n	8004e32 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004dfe:	78fa      	ldrb	r2, [r7, #3]
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	4613      	mov	r3, r2
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	1a9b      	subs	r3, r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	331b      	adds	r3, #27
 8004e0e:	2200      	movs	r2, #0
 8004e10:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004e12:	78fb      	ldrb	r3, [r7, #3]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	78fa      	ldrb	r2, [r7, #3]
 8004e22:	0151      	lsls	r1, r2, #5
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	440a      	add	r2, r1
 8004e28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e30:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004e32:	78fb      	ldrb	r3, [r7, #3]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e3e:	461a      	mov	r2, r3
 8004e40:	2301      	movs	r3, #1
 8004e42:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004e44:	78fa      	ldrb	r2, [r7, #3]
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	1a9b      	subs	r3, r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	440b      	add	r3, r1
 8004e52:	334d      	adds	r3, #77	@ 0x4d
 8004e54:	2201      	movs	r2, #1
 8004e56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	78fa      	ldrb	r2, [r7, #3]
 8004e5e:	4611      	mov	r1, r2
 8004e60:	4618      	mov	r0, r3
 8004e62:	f004 fbc2 	bl	80095ea <USB_HC_Halt>
 8004e66:	e365      	b.n	8005534 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	78fa      	ldrb	r2, [r7, #3]
 8004e6e:	4611      	mov	r1, r2
 8004e70:	4618      	mov	r0, r3
 8004e72:	f003 fe10 	bl	8008a96 <USB_ReadChInterrupts>
 8004e76:	4603      	mov	r3, r0
 8004e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e7c:	2b40      	cmp	r3, #64	@ 0x40
 8004e7e:	d139      	bne.n	8004ef4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004e80:	78fa      	ldrb	r2, [r7, #3]
 8004e82:	6879      	ldr	r1, [r7, #4]
 8004e84:	4613      	mov	r3, r2
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	1a9b      	subs	r3, r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	440b      	add	r3, r1
 8004e8e:	334d      	adds	r3, #77	@ 0x4d
 8004e90:	2205      	movs	r2, #5
 8004e92:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004e94:	78fa      	ldrb	r2, [r7, #3]
 8004e96:	6879      	ldr	r1, [r7, #4]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	1a9b      	subs	r3, r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	331a      	adds	r3, #26
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d109      	bne.n	8004ebe <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004eaa:	78fa      	ldrb	r2, [r7, #3]
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	1a9b      	subs	r3, r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	440b      	add	r3, r1
 8004eb8:	3319      	adds	r3, #25
 8004eba:	2201      	movs	r2, #1
 8004ebc:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004ebe:	78fa      	ldrb	r2, [r7, #3]
 8004ec0:	6879      	ldr	r1, [r7, #4]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	011b      	lsls	r3, r3, #4
 8004ec6:	1a9b      	subs	r3, r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	440b      	add	r3, r1
 8004ecc:	3344      	adds	r3, #68	@ 0x44
 8004ece:	2200      	movs	r2, #0
 8004ed0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	78fa      	ldrb	r2, [r7, #3]
 8004ed8:	4611      	mov	r1, r2
 8004eda:	4618      	mov	r0, r3
 8004edc:	f004 fb85 	bl	80095ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004ee0:	78fb      	ldrb	r3, [r7, #3]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eec:	461a      	mov	r2, r3
 8004eee:	2340      	movs	r3, #64	@ 0x40
 8004ef0:	6093      	str	r3, [r2, #8]
 8004ef2:	e31f      	b.n	8005534 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	78fa      	ldrb	r2, [r7, #3]
 8004efa:	4611      	mov	r1, r2
 8004efc:	4618      	mov	r0, r3
 8004efe:	f003 fdca 	bl	8008a96 <USB_ReadChInterrupts>
 8004f02:	4603      	mov	r3, r0
 8004f04:	f003 0308 	and.w	r3, r3, #8
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d11a      	bne.n	8004f42 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004f0c:	78fb      	ldrb	r3, [r7, #3]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f18:	461a      	mov	r2, r3
 8004f1a:	2308      	movs	r3, #8
 8004f1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004f1e:	78fa      	ldrb	r2, [r7, #3]
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	334d      	adds	r3, #77	@ 0x4d
 8004f2e:	2206      	movs	r2, #6
 8004f30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	78fa      	ldrb	r2, [r7, #3]
 8004f38:	4611      	mov	r1, r2
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f004 fb55 	bl	80095ea <USB_HC_Halt>
 8004f40:	e2f8      	b.n	8005534 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	78fa      	ldrb	r2, [r7, #3]
 8004f48:	4611      	mov	r1, r2
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f003 fda3 	bl	8008a96 <USB_ReadChInterrupts>
 8004f50:	4603      	mov	r3, r0
 8004f52:	f003 0310 	and.w	r3, r3, #16
 8004f56:	2b10      	cmp	r3, #16
 8004f58:	d144      	bne.n	8004fe4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004f5a:	78fa      	ldrb	r2, [r7, #3]
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	011b      	lsls	r3, r3, #4
 8004f62:	1a9b      	subs	r3, r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	440b      	add	r3, r1
 8004f68:	3344      	adds	r3, #68	@ 0x44
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004f6e:	78fa      	ldrb	r2, [r7, #3]
 8004f70:	6879      	ldr	r1, [r7, #4]
 8004f72:	4613      	mov	r3, r2
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	1a9b      	subs	r3, r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	440b      	add	r3, r1
 8004f7c:	334d      	adds	r3, #77	@ 0x4d
 8004f7e:	2204      	movs	r2, #4
 8004f80:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004f82:	78fa      	ldrb	r2, [r7, #3]
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	1a9b      	subs	r3, r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	3319      	adds	r3, #25
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d114      	bne.n	8004fc2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004f98:	78fa      	ldrb	r2, [r7, #3]
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	1a9b      	subs	r3, r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	3318      	adds	r3, #24
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d109      	bne.n	8004fc2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004fae:	78fa      	ldrb	r2, [r7, #3]
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	1a9b      	subs	r3, r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	440b      	add	r3, r1
 8004fbc:	3319      	adds	r3, #25
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	78fa      	ldrb	r2, [r7, #3]
 8004fc8:	4611      	mov	r1, r2
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f004 fb0d 	bl	80095ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fdc:	461a      	mov	r2, r3
 8004fde:	2310      	movs	r3, #16
 8004fe0:	6093      	str	r3, [r2, #8]
 8004fe2:	e2a7      	b.n	8005534 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	78fa      	ldrb	r2, [r7, #3]
 8004fea:	4611      	mov	r1, r2
 8004fec:	4618      	mov	r0, r3
 8004fee:	f003 fd52 	bl	8008a96 <USB_ReadChInterrupts>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ff8:	2b80      	cmp	r3, #128	@ 0x80
 8004ffa:	f040 8083 	bne.w	8005104 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	799b      	ldrb	r3, [r3, #6]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d111      	bne.n	800502a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005006:	78fa      	ldrb	r2, [r7, #3]
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	4613      	mov	r3, r2
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	1a9b      	subs	r3, r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	440b      	add	r3, r1
 8005014:	334d      	adds	r3, #77	@ 0x4d
 8005016:	2207      	movs	r2, #7
 8005018:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	78fa      	ldrb	r2, [r7, #3]
 8005020:	4611      	mov	r1, r2
 8005022:	4618      	mov	r0, r3
 8005024:	f004 fae1 	bl	80095ea <USB_HC_Halt>
 8005028:	e062      	b.n	80050f0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800502a:	78fa      	ldrb	r2, [r7, #3]
 800502c:	6879      	ldr	r1, [r7, #4]
 800502e:	4613      	mov	r3, r2
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	1a9b      	subs	r3, r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	440b      	add	r3, r1
 8005038:	3344      	adds	r3, #68	@ 0x44
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	1c59      	adds	r1, r3, #1
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	4613      	mov	r3, r2
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	1a9b      	subs	r3, r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4403      	add	r3, r0
 800504a:	3344      	adds	r3, #68	@ 0x44
 800504c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800504e:	78fa      	ldrb	r2, [r7, #3]
 8005050:	6879      	ldr	r1, [r7, #4]
 8005052:	4613      	mov	r3, r2
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	1a9b      	subs	r3, r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	440b      	add	r3, r1
 800505c:	3344      	adds	r3, #68	@ 0x44
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b02      	cmp	r3, #2
 8005062:	d922      	bls.n	80050aa <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005064:	78fa      	ldrb	r2, [r7, #3]
 8005066:	6879      	ldr	r1, [r7, #4]
 8005068:	4613      	mov	r3, r2
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	1a9b      	subs	r3, r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	440b      	add	r3, r1
 8005072:	3344      	adds	r3, #68	@ 0x44
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005078:	78fa      	ldrb	r2, [r7, #3]
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	4613      	mov	r3, r2
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	1a9b      	subs	r3, r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	334c      	adds	r3, #76	@ 0x4c
 8005088:	2204      	movs	r2, #4
 800508a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800508c:	78fa      	ldrb	r2, [r7, #3]
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	4613      	mov	r3, r2
 8005092:	011b      	lsls	r3, r3, #4
 8005094:	1a9b      	subs	r3, r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	440b      	add	r3, r1
 800509a:	334c      	adds	r3, #76	@ 0x4c
 800509c:	781a      	ldrb	r2, [r3, #0]
 800509e:	78fb      	ldrb	r3, [r7, #3]
 80050a0:	4619      	mov	r1, r3
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f00b fa60 	bl	8010568 <HAL_HCD_HC_NotifyURBChange_Callback>
 80050a8:	e022      	b.n	80050f0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80050aa:	78fa      	ldrb	r2, [r7, #3]
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	1a9b      	subs	r3, r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	334c      	adds	r3, #76	@ 0x4c
 80050ba:	2202      	movs	r2, #2
 80050bc:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80050be:	78fb      	ldrb	r3, [r7, #3]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80050d4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80050dc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80050de:	78fb      	ldrb	r3, [r7, #3]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050ea:	461a      	mov	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050fc:	461a      	mov	r2, r3
 80050fe:	2380      	movs	r3, #128	@ 0x80
 8005100:	6093      	str	r3, [r2, #8]
 8005102:	e217      	b.n	8005534 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	78fa      	ldrb	r2, [r7, #3]
 800510a:	4611      	mov	r1, r2
 800510c:	4618      	mov	r0, r3
 800510e:	f003 fcc2 	bl	8008a96 <USB_ReadChInterrupts>
 8005112:	4603      	mov	r3, r0
 8005114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005118:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800511c:	d11b      	bne.n	8005156 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800511e:	78fa      	ldrb	r2, [r7, #3]
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	4613      	mov	r3, r2
 8005124:	011b      	lsls	r3, r3, #4
 8005126:	1a9b      	subs	r3, r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	440b      	add	r3, r1
 800512c:	334d      	adds	r3, #77	@ 0x4d
 800512e:	2209      	movs	r2, #9
 8005130:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	78fa      	ldrb	r2, [r7, #3]
 8005138:	4611      	mov	r1, r2
 800513a:	4618      	mov	r0, r3
 800513c:	f004 fa55 	bl	80095ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005140:	78fb      	ldrb	r3, [r7, #3]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	4413      	add	r3, r2
 8005148:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800514c:	461a      	mov	r2, r3
 800514e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005152:	6093      	str	r3, [r2, #8]
 8005154:	e1ee      	b.n	8005534 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	78fa      	ldrb	r2, [r7, #3]
 800515c:	4611      	mov	r1, r2
 800515e:	4618      	mov	r0, r3
 8005160:	f003 fc99 	bl	8008a96 <USB_ReadChInterrupts>
 8005164:	4603      	mov	r3, r0
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b02      	cmp	r3, #2
 800516c:	f040 81df 	bne.w	800552e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005170:	78fb      	ldrb	r3, [r7, #3]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	4413      	add	r3, r2
 8005178:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800517c:	461a      	mov	r2, r3
 800517e:	2302      	movs	r3, #2
 8005180:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005182:	78fa      	ldrb	r2, [r7, #3]
 8005184:	6879      	ldr	r1, [r7, #4]
 8005186:	4613      	mov	r3, r2
 8005188:	011b      	lsls	r3, r3, #4
 800518a:	1a9b      	subs	r3, r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	440b      	add	r3, r1
 8005190:	334d      	adds	r3, #77	@ 0x4d
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	2b01      	cmp	r3, #1
 8005196:	f040 8093 	bne.w	80052c0 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800519a:	78fa      	ldrb	r2, [r7, #3]
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	4613      	mov	r3, r2
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	1a9b      	subs	r3, r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	440b      	add	r3, r1
 80051a8:	334d      	adds	r3, #77	@ 0x4d
 80051aa:	2202      	movs	r2, #2
 80051ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80051ae:	78fa      	ldrb	r2, [r7, #3]
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	4613      	mov	r3, r2
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	1a9b      	subs	r3, r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	440b      	add	r3, r1
 80051bc:	334c      	adds	r3, #76	@ 0x4c
 80051be:	2201      	movs	r2, #1
 80051c0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80051c2:	78fa      	ldrb	r2, [r7, #3]
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	4613      	mov	r3, r2
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	1a9b      	subs	r3, r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	440b      	add	r3, r1
 80051d0:	3326      	adds	r3, #38	@ 0x26
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d00b      	beq.n	80051f0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80051d8:	78fa      	ldrb	r2, [r7, #3]
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	4613      	mov	r3, r2
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	1a9b      	subs	r3, r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	440b      	add	r3, r1
 80051e6:	3326      	adds	r3, #38	@ 0x26
 80051e8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80051ea:	2b03      	cmp	r3, #3
 80051ec:	f040 8190 	bne.w	8005510 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	799b      	ldrb	r3, [r3, #6]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d115      	bne.n	8005224 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80051f8:	78fa      	ldrb	r2, [r7, #3]
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	1a9b      	subs	r3, r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	333d      	adds	r3, #61	@ 0x3d
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	78fa      	ldrb	r2, [r7, #3]
 800520c:	f083 0301 	eor.w	r3, r3, #1
 8005210:	b2d8      	uxtb	r0, r3
 8005212:	6879      	ldr	r1, [r7, #4]
 8005214:	4613      	mov	r3, r2
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	1a9b      	subs	r3, r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	440b      	add	r3, r1
 800521e:	333d      	adds	r3, #61	@ 0x3d
 8005220:	4602      	mov	r2, r0
 8005222:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	799b      	ldrb	r3, [r3, #6]
 8005228:	2b01      	cmp	r3, #1
 800522a:	f040 8171 	bne.w	8005510 <HCD_HC_OUT_IRQHandler+0x954>
 800522e:	78fa      	ldrb	r2, [r7, #3]
 8005230:	6879      	ldr	r1, [r7, #4]
 8005232:	4613      	mov	r3, r2
 8005234:	011b      	lsls	r3, r3, #4
 8005236:	1a9b      	subs	r3, r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	440b      	add	r3, r1
 800523c:	3334      	adds	r3, #52	@ 0x34
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 8165 	beq.w	8005510 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005246:	78fa      	ldrb	r2, [r7, #3]
 8005248:	6879      	ldr	r1, [r7, #4]
 800524a:	4613      	mov	r3, r2
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	1a9b      	subs	r3, r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	440b      	add	r3, r1
 8005254:	3334      	adds	r3, #52	@ 0x34
 8005256:	6819      	ldr	r1, [r3, #0]
 8005258:	78fa      	ldrb	r2, [r7, #3]
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	4613      	mov	r3, r2
 800525e:	011b      	lsls	r3, r3, #4
 8005260:	1a9b      	subs	r3, r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4403      	add	r3, r0
 8005266:	3328      	adds	r3, #40	@ 0x28
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	440b      	add	r3, r1
 800526c:	1e59      	subs	r1, r3, #1
 800526e:	78fa      	ldrb	r2, [r7, #3]
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	4613      	mov	r3, r2
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	1a9b      	subs	r3, r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4403      	add	r3, r0
 800527c:	3328      	adds	r3, #40	@ 0x28
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	fbb1 f3f3 	udiv	r3, r1, r3
 8005284:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 813f 	beq.w	8005510 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005292:	78fa      	ldrb	r2, [r7, #3]
 8005294:	6879      	ldr	r1, [r7, #4]
 8005296:	4613      	mov	r3, r2
 8005298:	011b      	lsls	r3, r3, #4
 800529a:	1a9b      	subs	r3, r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	440b      	add	r3, r1
 80052a0:	333d      	adds	r3, #61	@ 0x3d
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	78fa      	ldrb	r2, [r7, #3]
 80052a6:	f083 0301 	eor.w	r3, r3, #1
 80052aa:	b2d8      	uxtb	r0, r3
 80052ac:	6879      	ldr	r1, [r7, #4]
 80052ae:	4613      	mov	r3, r2
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	1a9b      	subs	r3, r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	440b      	add	r3, r1
 80052b8:	333d      	adds	r3, #61	@ 0x3d
 80052ba:	4602      	mov	r2, r0
 80052bc:	701a      	strb	r2, [r3, #0]
 80052be:	e127      	b.n	8005510 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80052c0:	78fa      	ldrb	r2, [r7, #3]
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	4613      	mov	r3, r2
 80052c6:	011b      	lsls	r3, r3, #4
 80052c8:	1a9b      	subs	r3, r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	440b      	add	r3, r1
 80052ce:	334d      	adds	r3, #77	@ 0x4d
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	d120      	bne.n	8005318 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80052d6:	78fa      	ldrb	r2, [r7, #3]
 80052d8:	6879      	ldr	r1, [r7, #4]
 80052da:	4613      	mov	r3, r2
 80052dc:	011b      	lsls	r3, r3, #4
 80052de:	1a9b      	subs	r3, r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	440b      	add	r3, r1
 80052e4:	334d      	adds	r3, #77	@ 0x4d
 80052e6:	2202      	movs	r2, #2
 80052e8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80052ea:	78fa      	ldrb	r2, [r7, #3]
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	4613      	mov	r3, r2
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	1a9b      	subs	r3, r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	440b      	add	r3, r1
 80052f8:	331b      	adds	r3, #27
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	f040 8107 	bne.w	8005510 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005302:	78fa      	ldrb	r2, [r7, #3]
 8005304:	6879      	ldr	r1, [r7, #4]
 8005306:	4613      	mov	r3, r2
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	1a9b      	subs	r3, r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	440b      	add	r3, r1
 8005310:	334c      	adds	r3, #76	@ 0x4c
 8005312:	2202      	movs	r2, #2
 8005314:	701a      	strb	r2, [r3, #0]
 8005316:	e0fb      	b.n	8005510 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005318:	78fa      	ldrb	r2, [r7, #3]
 800531a:	6879      	ldr	r1, [r7, #4]
 800531c:	4613      	mov	r3, r2
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	1a9b      	subs	r3, r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	440b      	add	r3, r1
 8005326:	334d      	adds	r3, #77	@ 0x4d
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2b04      	cmp	r3, #4
 800532c:	d13a      	bne.n	80053a4 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800532e:	78fa      	ldrb	r2, [r7, #3]
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	4613      	mov	r3, r2
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	1a9b      	subs	r3, r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	440b      	add	r3, r1
 800533c:	334d      	adds	r3, #77	@ 0x4d
 800533e:	2202      	movs	r2, #2
 8005340:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005342:	78fa      	ldrb	r2, [r7, #3]
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	4613      	mov	r3, r2
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	1a9b      	subs	r3, r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	440b      	add	r3, r1
 8005350:	334c      	adds	r3, #76	@ 0x4c
 8005352:	2202      	movs	r2, #2
 8005354:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005356:	78fa      	ldrb	r2, [r7, #3]
 8005358:	6879      	ldr	r1, [r7, #4]
 800535a:	4613      	mov	r3, r2
 800535c:	011b      	lsls	r3, r3, #4
 800535e:	1a9b      	subs	r3, r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	440b      	add	r3, r1
 8005364:	331b      	adds	r3, #27
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2b01      	cmp	r3, #1
 800536a:	f040 80d1 	bne.w	8005510 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800536e:	78fa      	ldrb	r2, [r7, #3]
 8005370:	6879      	ldr	r1, [r7, #4]
 8005372:	4613      	mov	r3, r2
 8005374:	011b      	lsls	r3, r3, #4
 8005376:	1a9b      	subs	r3, r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	440b      	add	r3, r1
 800537c:	331b      	adds	r3, #27
 800537e:	2200      	movs	r2, #0
 8005380:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005382:	78fb      	ldrb	r3, [r7, #3]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	4413      	add	r3, r2
 800538a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	78fa      	ldrb	r2, [r7, #3]
 8005392:	0151      	lsls	r1, r2, #5
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	440a      	add	r2, r1
 8005398:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800539c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053a0:	6053      	str	r3, [r2, #4]
 80053a2:	e0b5      	b.n	8005510 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80053a4:	78fa      	ldrb	r2, [r7, #3]
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	4613      	mov	r3, r2
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	1a9b      	subs	r3, r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	440b      	add	r3, r1
 80053b2:	334d      	adds	r3, #77	@ 0x4d
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	2b05      	cmp	r3, #5
 80053b8:	d114      	bne.n	80053e4 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80053ba:	78fa      	ldrb	r2, [r7, #3]
 80053bc:	6879      	ldr	r1, [r7, #4]
 80053be:	4613      	mov	r3, r2
 80053c0:	011b      	lsls	r3, r3, #4
 80053c2:	1a9b      	subs	r3, r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	440b      	add	r3, r1
 80053c8:	334d      	adds	r3, #77	@ 0x4d
 80053ca:	2202      	movs	r2, #2
 80053cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80053ce:	78fa      	ldrb	r2, [r7, #3]
 80053d0:	6879      	ldr	r1, [r7, #4]
 80053d2:	4613      	mov	r3, r2
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	1a9b      	subs	r3, r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	440b      	add	r3, r1
 80053dc:	334c      	adds	r3, #76	@ 0x4c
 80053de:	2202      	movs	r2, #2
 80053e0:	701a      	strb	r2, [r3, #0]
 80053e2:	e095      	b.n	8005510 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80053e4:	78fa      	ldrb	r2, [r7, #3]
 80053e6:	6879      	ldr	r1, [r7, #4]
 80053e8:	4613      	mov	r3, r2
 80053ea:	011b      	lsls	r3, r3, #4
 80053ec:	1a9b      	subs	r3, r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	440b      	add	r3, r1
 80053f2:	334d      	adds	r3, #77	@ 0x4d
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	2b06      	cmp	r3, #6
 80053f8:	d114      	bne.n	8005424 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80053fa:	78fa      	ldrb	r2, [r7, #3]
 80053fc:	6879      	ldr	r1, [r7, #4]
 80053fe:	4613      	mov	r3, r2
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	1a9b      	subs	r3, r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	440b      	add	r3, r1
 8005408:	334d      	adds	r3, #77	@ 0x4d
 800540a:	2202      	movs	r2, #2
 800540c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800540e:	78fa      	ldrb	r2, [r7, #3]
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	4613      	mov	r3, r2
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	1a9b      	subs	r3, r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	440b      	add	r3, r1
 800541c:	334c      	adds	r3, #76	@ 0x4c
 800541e:	2205      	movs	r2, #5
 8005420:	701a      	strb	r2, [r3, #0]
 8005422:	e075      	b.n	8005510 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005424:	78fa      	ldrb	r2, [r7, #3]
 8005426:	6879      	ldr	r1, [r7, #4]
 8005428:	4613      	mov	r3, r2
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	1a9b      	subs	r3, r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	440b      	add	r3, r1
 8005432:	334d      	adds	r3, #77	@ 0x4d
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	2b07      	cmp	r3, #7
 8005438:	d00a      	beq.n	8005450 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800543a:	78fa      	ldrb	r2, [r7, #3]
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	4613      	mov	r3, r2
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	1a9b      	subs	r3, r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	440b      	add	r3, r1
 8005448:	334d      	adds	r3, #77	@ 0x4d
 800544a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800544c:	2b09      	cmp	r3, #9
 800544e:	d170      	bne.n	8005532 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005450:	78fa      	ldrb	r2, [r7, #3]
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	4613      	mov	r3, r2
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	1a9b      	subs	r3, r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	440b      	add	r3, r1
 800545e:	334d      	adds	r3, #77	@ 0x4d
 8005460:	2202      	movs	r2, #2
 8005462:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005464:	78fa      	ldrb	r2, [r7, #3]
 8005466:	6879      	ldr	r1, [r7, #4]
 8005468:	4613      	mov	r3, r2
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	1a9b      	subs	r3, r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	440b      	add	r3, r1
 8005472:	3344      	adds	r3, #68	@ 0x44
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	1c59      	adds	r1, r3, #1
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	4613      	mov	r3, r2
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	1a9b      	subs	r3, r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4403      	add	r3, r0
 8005484:	3344      	adds	r3, #68	@ 0x44
 8005486:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005488:	78fa      	ldrb	r2, [r7, #3]
 800548a:	6879      	ldr	r1, [r7, #4]
 800548c:	4613      	mov	r3, r2
 800548e:	011b      	lsls	r3, r3, #4
 8005490:	1a9b      	subs	r3, r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	440b      	add	r3, r1
 8005496:	3344      	adds	r3, #68	@ 0x44
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b02      	cmp	r3, #2
 800549c:	d914      	bls.n	80054c8 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800549e:	78fa      	ldrb	r2, [r7, #3]
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	4613      	mov	r3, r2
 80054a4:	011b      	lsls	r3, r3, #4
 80054a6:	1a9b      	subs	r3, r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	440b      	add	r3, r1
 80054ac:	3344      	adds	r3, #68	@ 0x44
 80054ae:	2200      	movs	r2, #0
 80054b0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80054b2:	78fa      	ldrb	r2, [r7, #3]
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	4613      	mov	r3, r2
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	1a9b      	subs	r3, r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	440b      	add	r3, r1
 80054c0:	334c      	adds	r3, #76	@ 0x4c
 80054c2:	2204      	movs	r2, #4
 80054c4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80054c6:	e022      	b.n	800550e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80054c8:	78fa      	ldrb	r2, [r7, #3]
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	4613      	mov	r3, r2
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	1a9b      	subs	r3, r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	440b      	add	r3, r1
 80054d6:	334c      	adds	r3, #76	@ 0x4c
 80054d8:	2202      	movs	r2, #2
 80054da:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80054dc:	78fb      	ldrb	r3, [r7, #3]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80054f2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80054fa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80054fc:	78fb      	ldrb	r3, [r7, #3]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	4413      	add	r3, r2
 8005504:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005508:	461a      	mov	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800550e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005510:	78fa      	ldrb	r2, [r7, #3]
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	4613      	mov	r3, r2
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	1a9b      	subs	r3, r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	440b      	add	r3, r1
 800551e:	334c      	adds	r3, #76	@ 0x4c
 8005520:	781a      	ldrb	r2, [r3, #0]
 8005522:	78fb      	ldrb	r3, [r7, #3]
 8005524:	4619      	mov	r1, r3
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f00b f81e 	bl	8010568 <HAL_HCD_HC_NotifyURBChange_Callback>
 800552c:	e002      	b.n	8005534 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800552e:	bf00      	nop
 8005530:	e000      	b.n	8005534 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8005532:	bf00      	nop
  }
}
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b08a      	sub	sp, #40	@ 0x28
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	f003 030f 	and.w	r3, r3, #15
 800555a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	0c5b      	lsrs	r3, r3, #17
 8005560:	f003 030f 	and.w	r3, r3, #15
 8005564:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	091b      	lsrs	r3, r3, #4
 800556a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800556e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	2b02      	cmp	r3, #2
 8005574:	d004      	beq.n	8005580 <HCD_RXQLVL_IRQHandler+0x46>
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2b05      	cmp	r3, #5
 800557a:	f000 80b6 	beq.w	80056ea <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800557e:	e0b7      	b.n	80056f0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	f000 80b3 	beq.w	80056ee <HCD_RXQLVL_IRQHandler+0x1b4>
 8005588:	6879      	ldr	r1, [r7, #4]
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	4613      	mov	r3, r2
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	1a9b      	subs	r3, r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	440b      	add	r3, r1
 8005596:	332c      	adds	r3, #44	@ 0x2c
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 80a7 	beq.w	80056ee <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80055a0:	6879      	ldr	r1, [r7, #4]
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	4613      	mov	r3, r2
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	1a9b      	subs	r3, r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	440b      	add	r3, r1
 80055ae:	3338      	adds	r3, #56	@ 0x38
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	18d1      	adds	r1, r2, r3
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	4613      	mov	r3, r2
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	1a9b      	subs	r3, r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4403      	add	r3, r0
 80055c4:	3334      	adds	r3, #52	@ 0x34
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4299      	cmp	r1, r3
 80055ca:	f200 8083 	bhi.w	80056d4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	4613      	mov	r3, r2
 80055d8:	011b      	lsls	r3, r3, #4
 80055da:	1a9b      	subs	r3, r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	440b      	add	r3, r1
 80055e0:	332c      	adds	r3, #44	@ 0x2c
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	b292      	uxth	r2, r2
 80055e8:	4619      	mov	r1, r3
 80055ea:	f003 f9e9 	bl	80089c0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	4613      	mov	r3, r2
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	1a9b      	subs	r3, r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	440b      	add	r3, r1
 80055fc:	332c      	adds	r3, #44	@ 0x2c
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	18d1      	adds	r1, r2, r3
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	4613      	mov	r3, r2
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	1a9b      	subs	r3, r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4403      	add	r3, r0
 8005612:	332c      	adds	r3, #44	@ 0x2c
 8005614:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	4613      	mov	r3, r2
 800561c:	011b      	lsls	r3, r3, #4
 800561e:	1a9b      	subs	r3, r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	440b      	add	r3, r1
 8005624:	3338      	adds	r3, #56	@ 0x38
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	18d1      	adds	r1, r2, r3
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	4613      	mov	r3, r2
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	1a9b      	subs	r3, r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4403      	add	r3, r0
 800563a:	3338      	adds	r3, #56	@ 0x38
 800563c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	4413      	add	r3, r2
 8005646:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	0cdb      	lsrs	r3, r3, #19
 800564e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005652:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005654:	6879      	ldr	r1, [r7, #4]
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	4613      	mov	r3, r2
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	1a9b      	subs	r3, r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	440b      	add	r3, r1
 8005662:	3328      	adds	r3, #40	@ 0x28
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	4293      	cmp	r3, r2
 800566c:	d13f      	bne.n	80056ee <HCD_RXQLVL_IRQHandler+0x1b4>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d03c      	beq.n	80056ee <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	4413      	add	r3, r2
 800567c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800568a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005692:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	4413      	add	r3, r2
 800569c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056a0:	461a      	mov	r2, r3
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80056a6:	6879      	ldr	r1, [r7, #4]
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	4613      	mov	r3, r2
 80056ac:	011b      	lsls	r3, r3, #4
 80056ae:	1a9b      	subs	r3, r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	440b      	add	r3, r1
 80056b4:	333c      	adds	r3, #60	@ 0x3c
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	f083 0301 	eor.w	r3, r3, #1
 80056bc:	b2d8      	uxtb	r0, r3
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	4613      	mov	r3, r2
 80056c4:	011b      	lsls	r3, r3, #4
 80056c6:	1a9b      	subs	r3, r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	440b      	add	r3, r1
 80056cc:	333c      	adds	r3, #60	@ 0x3c
 80056ce:	4602      	mov	r2, r0
 80056d0:	701a      	strb	r2, [r3, #0]
      break;
 80056d2:	e00c      	b.n	80056ee <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	4613      	mov	r3, r2
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	1a9b      	subs	r3, r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	440b      	add	r3, r1
 80056e2:	334c      	adds	r3, #76	@ 0x4c
 80056e4:	2204      	movs	r2, #4
 80056e6:	701a      	strb	r2, [r3, #0]
      break;
 80056e8:	e001      	b.n	80056ee <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80056ea:	bf00      	nop
 80056ec:	e000      	b.n	80056f0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80056ee:	bf00      	nop
  }
}
 80056f0:	bf00      	nop
 80056f2:	3728      	adds	r7, #40	@ 0x28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005724:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f003 0302 	and.w	r3, r3, #2
 800572c:	2b02      	cmp	r3, #2
 800572e:	d10b      	bne.n	8005748 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b01      	cmp	r3, #1
 8005738:	d102      	bne.n	8005740 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f00a fef8 	bl	8010530 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f043 0302 	orr.w	r3, r3, #2
 8005746:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b08      	cmp	r3, #8
 8005750:	d132      	bne.n	80057b8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	f043 0308 	orr.w	r3, r3, #8
 8005758:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b04      	cmp	r3, #4
 8005762:	d126      	bne.n	80057b2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	7a5b      	ldrb	r3, [r3, #9]
 8005768:	2b02      	cmp	r3, #2
 800576a:	d113      	bne.n	8005794 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005772:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005776:	d106      	bne.n	8005786 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2102      	movs	r1, #2
 800577e:	4618      	mov	r0, r3
 8005780:	f003 fab4 	bl	8008cec <USB_InitFSLSPClkSel>
 8005784:	e011      	b.n	80057aa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2101      	movs	r1, #1
 800578c:	4618      	mov	r0, r3
 800578e:	f003 faad 	bl	8008cec <USB_InitFSLSPClkSel>
 8005792:	e00a      	b.n	80057aa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	79db      	ldrb	r3, [r3, #7]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d106      	bne.n	80057aa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057a2:	461a      	mov	r2, r3
 80057a4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80057a8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f00a feee 	bl	801058c <HAL_HCD_PortEnabled_Callback>
 80057b0:	e002      	b.n	80057b8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f00a fef8 	bl	80105a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b20      	cmp	r3, #32
 80057c0:	d103      	bne.n	80057ca <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f043 0320 	orr.w	r3, r3, #32
 80057c8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80057d0:	461a      	mov	r2, r3
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	6013      	str	r3, [r2, #0]
}
 80057d6:	bf00      	nop
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
	...

080057e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e12b      	b.n	8005a4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d106      	bne.n	800580c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7fc ff4a 	bl	80026a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2224      	movs	r2, #36	@ 0x24
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f022 0201 	bic.w	r2, r2, #1
 8005822:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005832:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005842:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005844:	f001 fa20 	bl	8006c88 <HAL_RCC_GetPCLK1Freq>
 8005848:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	4a81      	ldr	r2, [pc, #516]	@ (8005a54 <HAL_I2C_Init+0x274>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d807      	bhi.n	8005864 <HAL_I2C_Init+0x84>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4a80      	ldr	r2, [pc, #512]	@ (8005a58 <HAL_I2C_Init+0x278>)
 8005858:	4293      	cmp	r3, r2
 800585a:	bf94      	ite	ls
 800585c:	2301      	movls	r3, #1
 800585e:	2300      	movhi	r3, #0
 8005860:	b2db      	uxtb	r3, r3
 8005862:	e006      	b.n	8005872 <HAL_I2C_Init+0x92>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4a7d      	ldr	r2, [pc, #500]	@ (8005a5c <HAL_I2C_Init+0x27c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	bf94      	ite	ls
 800586c:	2301      	movls	r3, #1
 800586e:	2300      	movhi	r3, #0
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e0e7      	b.n	8005a4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4a78      	ldr	r2, [pc, #480]	@ (8005a60 <HAL_I2C_Init+0x280>)
 800587e:	fba2 2303 	umull	r2, r3, r2, r3
 8005882:	0c9b      	lsrs	r3, r3, #18
 8005884:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	430a      	orrs	r2, r1
 8005898:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	4a6a      	ldr	r2, [pc, #424]	@ (8005a54 <HAL_I2C_Init+0x274>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d802      	bhi.n	80058b4 <HAL_I2C_Init+0xd4>
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	3301      	adds	r3, #1
 80058b2:	e009      	b.n	80058c8 <HAL_I2C_Init+0xe8>
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80058ba:	fb02 f303 	mul.w	r3, r2, r3
 80058be:	4a69      	ldr	r2, [pc, #420]	@ (8005a64 <HAL_I2C_Init+0x284>)
 80058c0:	fba2 2303 	umull	r2, r3, r2, r3
 80058c4:	099b      	lsrs	r3, r3, #6
 80058c6:	3301      	adds	r3, #1
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6812      	ldr	r2, [r2, #0]
 80058cc:	430b      	orrs	r3, r1
 80058ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80058da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	495c      	ldr	r1, [pc, #368]	@ (8005a54 <HAL_I2C_Init+0x274>)
 80058e4:	428b      	cmp	r3, r1
 80058e6:	d819      	bhi.n	800591c <HAL_I2C_Init+0x13c>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	1e59      	subs	r1, r3, #1
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80058f6:	1c59      	adds	r1, r3, #1
 80058f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80058fc:	400b      	ands	r3, r1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <HAL_I2C_Init+0x138>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	1e59      	subs	r1, r3, #1
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005910:	3301      	adds	r3, #1
 8005912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005916:	e051      	b.n	80059bc <HAL_I2C_Init+0x1dc>
 8005918:	2304      	movs	r3, #4
 800591a:	e04f      	b.n	80059bc <HAL_I2C_Init+0x1dc>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d111      	bne.n	8005948 <HAL_I2C_Init+0x168>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	1e58      	subs	r0, r3, #1
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6859      	ldr	r1, [r3, #4]
 800592c:	460b      	mov	r3, r1
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	440b      	add	r3, r1
 8005932:	fbb0 f3f3 	udiv	r3, r0, r3
 8005936:	3301      	adds	r3, #1
 8005938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800593c:	2b00      	cmp	r3, #0
 800593e:	bf0c      	ite	eq
 8005940:	2301      	moveq	r3, #1
 8005942:	2300      	movne	r3, #0
 8005944:	b2db      	uxtb	r3, r3
 8005946:	e012      	b.n	800596e <HAL_I2C_Init+0x18e>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	1e58      	subs	r0, r3, #1
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6859      	ldr	r1, [r3, #4]
 8005950:	460b      	mov	r3, r1
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	440b      	add	r3, r1
 8005956:	0099      	lsls	r1, r3, #2
 8005958:	440b      	add	r3, r1
 800595a:	fbb0 f3f3 	udiv	r3, r0, r3
 800595e:	3301      	adds	r3, #1
 8005960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005964:	2b00      	cmp	r3, #0
 8005966:	bf0c      	ite	eq
 8005968:	2301      	moveq	r3, #1
 800596a:	2300      	movne	r3, #0
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <HAL_I2C_Init+0x196>
 8005972:	2301      	movs	r3, #1
 8005974:	e022      	b.n	80059bc <HAL_I2C_Init+0x1dc>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10e      	bne.n	800599c <HAL_I2C_Init+0x1bc>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	1e58      	subs	r0, r3, #1
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6859      	ldr	r1, [r3, #4]
 8005986:	460b      	mov	r3, r1
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	440b      	add	r3, r1
 800598c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005990:	3301      	adds	r3, #1
 8005992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005996:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800599a:	e00f      	b.n	80059bc <HAL_I2C_Init+0x1dc>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	1e58      	subs	r0, r3, #1
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6859      	ldr	r1, [r3, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	440b      	add	r3, r1
 80059aa:	0099      	lsls	r1, r3, #2
 80059ac:	440b      	add	r3, r1
 80059ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80059b2:	3301      	adds	r3, #1
 80059b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80059bc:	6879      	ldr	r1, [r7, #4]
 80059be:	6809      	ldr	r1, [r1, #0]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69da      	ldr	r2, [r3, #28]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80059ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6911      	ldr	r1, [r2, #16]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	68d2      	ldr	r2, [r2, #12]
 80059f6:	4311      	orrs	r1, r2
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6812      	ldr	r2, [r2, #0]
 80059fc:	430b      	orrs	r3, r1
 80059fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695a      	ldr	r2, [r3, #20]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0201 	orr.w	r2, r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2220      	movs	r2, #32
 8005a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	000186a0 	.word	0x000186a0
 8005a58:	001e847f 	.word	0x001e847f
 8005a5c:	003d08ff 	.word	0x003d08ff
 8005a60:	431bde83 	.word	0x431bde83
 8005a64:	10624dd3 	.word	0x10624dd3

08005a68 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b088      	sub	sp, #32
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e128      	b.n	8005ccc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d109      	bne.n	8005a9a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a90      	ldr	r2, [pc, #576]	@ (8005cd4 <HAL_I2S_Init+0x26c>)
 8005a92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f7fc fe4b 	bl	8002730 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	69db      	ldr	r3, [r3, #28]
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	6812      	ldr	r2, [r2, #0]
 8005aac:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005ab0:	f023 030f 	bic.w	r3, r3, #15
 8005ab4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2202      	movs	r2, #2
 8005abc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d060      	beq.n	8005b88 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d102      	bne.n	8005ad4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005ace:	2310      	movs	r3, #16
 8005ad0:	617b      	str	r3, [r7, #20]
 8005ad2:	e001      	b.n	8005ad8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005ad4:	2320      	movs	r3, #32
 8005ad6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	2b20      	cmp	r3, #32
 8005ade:	d802      	bhi.n	8005ae6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005ae6:	2001      	movs	r0, #1
 8005ae8:	f001 fa0a 	bl	8006f00 <HAL_RCCEx_GetPeriphCLKFreq>
 8005aec:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005af6:	d125      	bne.n	8005b44 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d010      	beq.n	8005b22 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	461a      	mov	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1c:	3305      	adds	r3, #5
 8005b1e:	613b      	str	r3, [r7, #16]
 8005b20:	e01f      	b.n	8005b62 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	461a      	mov	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3e:	3305      	adds	r3, #5
 8005b40:	613b      	str	r3, [r7, #16]
 8005b42:	e00e      	b.n	8005b62 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	005b      	lsls	r3, r3, #1
 8005b54:	461a      	mov	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5e:	3305      	adds	r3, #5
 8005b60:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	4a5c      	ldr	r2, [pc, #368]	@ (8005cd8 <HAL_I2S_Init+0x270>)
 8005b66:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6a:	08db      	lsrs	r3, r3, #3
 8005b6c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	085b      	lsrs	r3, r3, #1
 8005b7e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	021b      	lsls	r3, r3, #8
 8005b84:	61bb      	str	r3, [r7, #24]
 8005b86:	e003      	b.n	8005b90 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005b88:	2302      	movs	r3, #2
 8005b8a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d902      	bls.n	8005b9c <HAL_I2S_Init+0x134>
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	2bff      	cmp	r3, #255	@ 0xff
 8005b9a:	d907      	bls.n	8005bac <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ba0:	f043 0210 	orr.w	r2, r3, #16
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e08f      	b.n	8005ccc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	691a      	ldr	r2, [r3, #16]
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	ea42 0103 	orr.w	r1, r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	69fa      	ldr	r2, [r7, #28]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005bca:	f023 030f 	bic.w	r3, r3, #15
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	6851      	ldr	r1, [r2, #4]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	6892      	ldr	r2, [r2, #8]
 8005bd6:	4311      	orrs	r1, r2
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	68d2      	ldr	r2, [r2, #12]
 8005bdc:	4311      	orrs	r1, r2
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	6992      	ldr	r2, [r2, #24]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	431a      	orrs	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bee:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d161      	bne.n	8005cbc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a38      	ldr	r2, [pc, #224]	@ (8005cdc <HAL_I2S_Init+0x274>)
 8005bfc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a37      	ldr	r2, [pc, #220]	@ (8005ce0 <HAL_I2S_Init+0x278>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d101      	bne.n	8005c0c <HAL_I2S_Init+0x1a4>
 8005c08:	4b36      	ldr	r3, [pc, #216]	@ (8005ce4 <HAL_I2S_Init+0x27c>)
 8005c0a:	e001      	b.n	8005c10 <HAL_I2S_Init+0x1a8>
 8005c0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6812      	ldr	r2, [r2, #0]
 8005c16:	4932      	ldr	r1, [pc, #200]	@ (8005ce0 <HAL_I2S_Init+0x278>)
 8005c18:	428a      	cmp	r2, r1
 8005c1a:	d101      	bne.n	8005c20 <HAL_I2S_Init+0x1b8>
 8005c1c:	4a31      	ldr	r2, [pc, #196]	@ (8005ce4 <HAL_I2S_Init+0x27c>)
 8005c1e:	e001      	b.n	8005c24 <HAL_I2S_Init+0x1bc>
 8005c20:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005c24:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005c28:	f023 030f 	bic.w	r3, r3, #15
 8005c2c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a2b      	ldr	r2, [pc, #172]	@ (8005ce0 <HAL_I2S_Init+0x278>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d101      	bne.n	8005c3c <HAL_I2S_Init+0x1d4>
 8005c38:	4b2a      	ldr	r3, [pc, #168]	@ (8005ce4 <HAL_I2S_Init+0x27c>)
 8005c3a:	e001      	b.n	8005c40 <HAL_I2S_Init+0x1d8>
 8005c3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c40:	2202      	movs	r2, #2
 8005c42:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a25      	ldr	r2, [pc, #148]	@ (8005ce0 <HAL_I2S_Init+0x278>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d101      	bne.n	8005c52 <HAL_I2S_Init+0x1ea>
 8005c4e:	4b25      	ldr	r3, [pc, #148]	@ (8005ce4 <HAL_I2S_Init+0x27c>)
 8005c50:	e001      	b.n	8005c56 <HAL_I2S_Init+0x1ee>
 8005c52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c62:	d003      	beq.n	8005c6c <HAL_I2S_Init+0x204>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d103      	bne.n	8005c74 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005c6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005c70:	613b      	str	r3, [r7, #16]
 8005c72:	e001      	b.n	8005c78 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005c74:	2300      	movs	r3, #0
 8005c76:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c82:	4313      	orrs	r3, r2
 8005c84:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c96:	4313      	orrs	r3, r2
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	897b      	ldrh	r3, [r7, #10]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005ca4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a0d      	ldr	r2, [pc, #52]	@ (8005ce0 <HAL_I2S_Init+0x278>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d101      	bne.n	8005cb4 <HAL_I2S_Init+0x24c>
 8005cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8005ce4 <HAL_I2S_Init+0x27c>)
 8005cb2:	e001      	b.n	8005cb8 <HAL_I2S_Init+0x250>
 8005cb4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005cb8:	897a      	ldrh	r2, [r7, #10]
 8005cba:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3720      	adds	r7, #32
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	08005ddf 	.word	0x08005ddf
 8005cd8:	cccccccd 	.word	0xcccccccd
 8005cdc:	08005ef5 	.word	0x08005ef5
 8005ce0:	40003800 	.word	0x40003800
 8005ce4:	40003400 	.word	0x40003400

08005ce8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d30:	881a      	ldrh	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3c:	1c9a      	adds	r2, r3, #2
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10e      	bne.n	8005d78 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d68:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7ff ffb8 	bl	8005ce8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005d78:	bf00      	nop
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d92:	b292      	uxth	r2, r2
 8005d94:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d9a:	1c9a      	adds	r2, r3, #2
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10e      	bne.n	8005dd6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005dc6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7ff ff93 	bl	8005cfc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005dd6:	bf00      	nop
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b086      	sub	sp, #24
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	d13a      	bne.n	8005e70 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d109      	bne.n	8005e18 <I2S_IRQHandler+0x3a>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e0e:	2b40      	cmp	r3, #64	@ 0x40
 8005e10:	d102      	bne.n	8005e18 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7ff ffb4 	bl	8005d80 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e1e:	2b40      	cmp	r3, #64	@ 0x40
 8005e20:	d126      	bne.n	8005e70 <I2S_IRQHandler+0x92>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f003 0320 	and.w	r3, r3, #32
 8005e2c:	2b20      	cmp	r3, #32
 8005e2e:	d11f      	bne.n	8005e70 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005e3e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005e40:	2300      	movs	r3, #0
 8005e42:	613b      	str	r3, [r7, #16]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	613b      	str	r3, [r7, #16]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	613b      	str	r3, [r7, #16]
 8005e54:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e62:	f043 0202 	orr.w	r2, r3, #2
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7ff ff50 	bl	8005d10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b03      	cmp	r3, #3
 8005e7a:	d136      	bne.n	8005eea <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d109      	bne.n	8005e9a <I2S_IRQHandler+0xbc>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e90:	2b80      	cmp	r3, #128	@ 0x80
 8005e92:	d102      	bne.n	8005e9a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff ff45 	bl	8005d24 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f003 0308 	and.w	r3, r3, #8
 8005ea0:	2b08      	cmp	r3, #8
 8005ea2:	d122      	bne.n	8005eea <I2S_IRQHandler+0x10c>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f003 0320 	and.w	r3, r3, #32
 8005eae:	2b20      	cmp	r3, #32
 8005eb0:	d11b      	bne.n	8005eea <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005ec0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005edc:	f043 0204 	orr.w	r2, r3, #4
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff ff13 	bl	8005d10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005eea:	bf00      	nop
 8005eec:	3718      	adds	r7, #24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
	...

08005ef4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a92      	ldr	r2, [pc, #584]	@ (8006154 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d101      	bne.n	8005f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005f0e:	4b92      	ldr	r3, [pc, #584]	@ (8006158 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f10:	e001      	b.n	8005f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005f12:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a8b      	ldr	r2, [pc, #556]	@ (8006154 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d101      	bne.n	8005f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005f2c:	4b8a      	ldr	r3, [pc, #552]	@ (8006158 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f2e:	e001      	b.n	8005f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005f30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f40:	d004      	beq.n	8005f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f040 8099 	bne.w	800607e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d107      	bne.n	8005f66 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d002      	beq.n	8005f66 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f925 	bl	80061b0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d107      	bne.n	8005f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d002      	beq.n	8005f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f9c8 	bl	8006310 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f86:	2b40      	cmp	r3, #64	@ 0x40
 8005f88:	d13a      	bne.n	8006000 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f003 0320 	and.w	r3, r3, #32
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d035      	beq.n	8006000 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a6e      	ldr	r2, [pc, #440]	@ (8006154 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d101      	bne.n	8005fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005f9e:	4b6e      	ldr	r3, [pc, #440]	@ (8006158 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fa0:	e001      	b.n	8005fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005fa2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4969      	ldr	r1, [pc, #420]	@ (8006154 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005fae:	428b      	cmp	r3, r1
 8005fb0:	d101      	bne.n	8005fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005fb2:	4b69      	ldr	r3, [pc, #420]	@ (8006158 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fb4:	e001      	b.n	8005fba <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005fb6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005fbe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005fce:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	60fb      	str	r3, [r7, #12]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ff2:	f043 0202 	orr.w	r2, r3, #2
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7ff fe88 	bl	8005d10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	f003 0308 	and.w	r3, r3, #8
 8006006:	2b08      	cmp	r3, #8
 8006008:	f040 80c3 	bne.w	8006192 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f003 0320 	and.w	r3, r3, #32
 8006012:	2b00      	cmp	r3, #0
 8006014:	f000 80bd 	beq.w	8006192 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006026:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a49      	ldr	r2, [pc, #292]	@ (8006154 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d101      	bne.n	8006036 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006032:	4b49      	ldr	r3, [pc, #292]	@ (8006158 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006034:	e001      	b.n	800603a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006036:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4944      	ldr	r1, [pc, #272]	@ (8006154 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006042:	428b      	cmp	r3, r1
 8006044:	d101      	bne.n	800604a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006046:	4b44      	ldr	r3, [pc, #272]	@ (8006158 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006048:	e001      	b.n	800604e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800604a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800604e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006052:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006054:	2300      	movs	r3, #0
 8006056:	60bb      	str	r3, [r7, #8]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	60bb      	str	r3, [r7, #8]
 8006060:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800606e:	f043 0204 	orr.w	r2, r3, #4
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7ff fe4a 	bl	8005d10 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800607c:	e089      	b.n	8006192 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b02      	cmp	r3, #2
 8006086:	d107      	bne.n	8006098 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800608e:	2b00      	cmp	r3, #0
 8006090:	d002      	beq.n	8006098 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f8be 	bl	8006214 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d107      	bne.n	80060b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d002      	beq.n	80060b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f8fd 	bl	80062ac <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b8:	2b40      	cmp	r3, #64	@ 0x40
 80060ba:	d12f      	bne.n	800611c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f003 0320 	and.w	r3, r3, #32
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d02a      	beq.n	800611c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80060d4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a1e      	ldr	r2, [pc, #120]	@ (8006154 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d101      	bne.n	80060e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80060e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006158 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060e2:	e001      	b.n	80060e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80060e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4919      	ldr	r1, [pc, #100]	@ (8006154 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060f0:	428b      	cmp	r3, r1
 80060f2:	d101      	bne.n	80060f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80060f4:	4b18      	ldr	r3, [pc, #96]	@ (8006158 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060f6:	e001      	b.n	80060fc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80060f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060fc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006100:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800610e:	f043 0202 	orr.w	r2, r3, #2
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7ff fdfa 	bl	8005d10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	f003 0308 	and.w	r3, r3, #8
 8006122:	2b08      	cmp	r3, #8
 8006124:	d136      	bne.n	8006194 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f003 0320 	and.w	r3, r3, #32
 800612c:	2b00      	cmp	r3, #0
 800612e:	d031      	beq.n	8006194 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a07      	ldr	r2, [pc, #28]	@ (8006154 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d101      	bne.n	800613e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800613a:	4b07      	ldr	r3, [pc, #28]	@ (8006158 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800613c:	e001      	b.n	8006142 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800613e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4902      	ldr	r1, [pc, #8]	@ (8006154 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800614a:	428b      	cmp	r3, r1
 800614c:	d106      	bne.n	800615c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800614e:	4b02      	ldr	r3, [pc, #8]	@ (8006158 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006150:	e006      	b.n	8006160 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006152:	bf00      	nop
 8006154:	40003800 	.word	0x40003800
 8006158:	40003400 	.word	0x40003400
 800615c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006160:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006164:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006174:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006182:	f043 0204 	orr.w	r2, r3, #4
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7ff fdc0 	bl	8005d10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006190:	e000      	b.n	8006194 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006192:	bf00      	nop
}
 8006194:	bf00      	nop
 8006196:	3720      	adds	r7, #32
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061bc:	1c99      	adds	r1, r3, #2
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	6251      	str	r1, [r2, #36]	@ 0x24
 80061c2:	881a      	ldrh	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d113      	bne.n	800620a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80061f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d106      	bne.n	800620a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7ff ffc9 	bl	800619c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800620a:	bf00      	nop
 800620c:	3708      	adds	r7, #8
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006220:	1c99      	adds	r1, r3, #2
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	6251      	str	r1, [r2, #36]	@ 0x24
 8006226:	8819      	ldrh	r1, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a1d      	ldr	r2, [pc, #116]	@ (80062a4 <I2SEx_TxISR_I2SExt+0x90>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d101      	bne.n	8006236 <I2SEx_TxISR_I2SExt+0x22>
 8006232:	4b1d      	ldr	r3, [pc, #116]	@ (80062a8 <I2SEx_TxISR_I2SExt+0x94>)
 8006234:	e001      	b.n	800623a <I2SEx_TxISR_I2SExt+0x26>
 8006236:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800623a:	460a      	mov	r2, r1
 800623c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006242:	b29b      	uxth	r3, r3
 8006244:	3b01      	subs	r3, #1
 8006246:	b29a      	uxth	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006250:	b29b      	uxth	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d121      	bne.n	800629a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a12      	ldr	r2, [pc, #72]	@ (80062a4 <I2SEx_TxISR_I2SExt+0x90>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d101      	bne.n	8006264 <I2SEx_TxISR_I2SExt+0x50>
 8006260:	4b11      	ldr	r3, [pc, #68]	@ (80062a8 <I2SEx_TxISR_I2SExt+0x94>)
 8006262:	e001      	b.n	8006268 <I2SEx_TxISR_I2SExt+0x54>
 8006264:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	490d      	ldr	r1, [pc, #52]	@ (80062a4 <I2SEx_TxISR_I2SExt+0x90>)
 8006270:	428b      	cmp	r3, r1
 8006272:	d101      	bne.n	8006278 <I2SEx_TxISR_I2SExt+0x64>
 8006274:	4b0c      	ldr	r3, [pc, #48]	@ (80062a8 <I2SEx_TxISR_I2SExt+0x94>)
 8006276:	e001      	b.n	800627c <I2SEx_TxISR_I2SExt+0x68>
 8006278:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800627c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006280:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006286:	b29b      	uxth	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d106      	bne.n	800629a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7ff ff81 	bl	800619c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800629a:	bf00      	nop
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	40003800 	.word	0x40003800
 80062a8:	40003400 	.word	0x40003400

080062ac <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68d8      	ldr	r0, [r3, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062be:	1c99      	adds	r1, r3, #2
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80062c4:	b282      	uxth	r2, r0
 80062c6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	3b01      	subs	r3, #1
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80062da:	b29b      	uxth	r3, r3
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d113      	bne.n	8006308 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80062ee:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d106      	bne.n	8006308 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7ff ff4a 	bl	800619c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006308:	bf00      	nop
 800630a:	3708      	adds	r7, #8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a20      	ldr	r2, [pc, #128]	@ (80063a0 <I2SEx_RxISR_I2SExt+0x90>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d101      	bne.n	8006326 <I2SEx_RxISR_I2SExt+0x16>
 8006322:	4b20      	ldr	r3, [pc, #128]	@ (80063a4 <I2SEx_RxISR_I2SExt+0x94>)
 8006324:	e001      	b.n	800632a <I2SEx_RxISR_I2SExt+0x1a>
 8006326:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800632a:	68d8      	ldr	r0, [r3, #12]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006330:	1c99      	adds	r1, r3, #2
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006336:	b282      	uxth	r2, r0
 8006338:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800633e:	b29b      	uxth	r3, r3
 8006340:	3b01      	subs	r3, #1
 8006342:	b29a      	uxth	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800634c:	b29b      	uxth	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d121      	bne.n	8006396 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a12      	ldr	r2, [pc, #72]	@ (80063a0 <I2SEx_RxISR_I2SExt+0x90>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d101      	bne.n	8006360 <I2SEx_RxISR_I2SExt+0x50>
 800635c:	4b11      	ldr	r3, [pc, #68]	@ (80063a4 <I2SEx_RxISR_I2SExt+0x94>)
 800635e:	e001      	b.n	8006364 <I2SEx_RxISR_I2SExt+0x54>
 8006360:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	490d      	ldr	r1, [pc, #52]	@ (80063a0 <I2SEx_RxISR_I2SExt+0x90>)
 800636c:	428b      	cmp	r3, r1
 800636e:	d101      	bne.n	8006374 <I2SEx_RxISR_I2SExt+0x64>
 8006370:	4b0c      	ldr	r3, [pc, #48]	@ (80063a4 <I2SEx_RxISR_I2SExt+0x94>)
 8006372:	e001      	b.n	8006378 <I2SEx_RxISR_I2SExt+0x68>
 8006374:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006378:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800637c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006382:	b29b      	uxth	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	d106      	bne.n	8006396 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7ff ff03 	bl	800619c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006396:	bf00      	nop
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	40003800 	.word	0x40003800
 80063a4:	40003400 	.word	0x40003400

080063a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e267      	b.n	800688a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d075      	beq.n	80064b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80063c6:	4b88      	ldr	r3, [pc, #544]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f003 030c 	and.w	r3, r3, #12
 80063ce:	2b04      	cmp	r3, #4
 80063d0:	d00c      	beq.n	80063ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063d2:	4b85      	ldr	r3, [pc, #532]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80063da:	2b08      	cmp	r3, #8
 80063dc:	d112      	bne.n	8006404 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063de:	4b82      	ldr	r3, [pc, #520]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063ea:	d10b      	bne.n	8006404 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063ec:	4b7e      	ldr	r3, [pc, #504]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d05b      	beq.n	80064b0 <HAL_RCC_OscConfig+0x108>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d157      	bne.n	80064b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e242      	b.n	800688a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800640c:	d106      	bne.n	800641c <HAL_RCC_OscConfig+0x74>
 800640e:	4b76      	ldr	r3, [pc, #472]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a75      	ldr	r2, [pc, #468]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 8006414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	e01d      	b.n	8006458 <HAL_RCC_OscConfig+0xb0>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006424:	d10c      	bne.n	8006440 <HAL_RCC_OscConfig+0x98>
 8006426:	4b70      	ldr	r3, [pc, #448]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a6f      	ldr	r2, [pc, #444]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 800642c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006430:	6013      	str	r3, [r2, #0]
 8006432:	4b6d      	ldr	r3, [pc, #436]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a6c      	ldr	r2, [pc, #432]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 8006438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	e00b      	b.n	8006458 <HAL_RCC_OscConfig+0xb0>
 8006440:	4b69      	ldr	r3, [pc, #420]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a68      	ldr	r2, [pc, #416]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 8006446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800644a:	6013      	str	r3, [r2, #0]
 800644c:	4b66      	ldr	r3, [pc, #408]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a65      	ldr	r2, [pc, #404]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 8006452:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d013      	beq.n	8006488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006460:	f7fc fcda 	bl	8002e18 <HAL_GetTick>
 8006464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006466:	e008      	b.n	800647a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006468:	f7fc fcd6 	bl	8002e18 <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	2b64      	cmp	r3, #100	@ 0x64
 8006474:	d901      	bls.n	800647a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e207      	b.n	800688a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800647a:	4b5b      	ldr	r3, [pc, #364]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d0f0      	beq.n	8006468 <HAL_RCC_OscConfig+0xc0>
 8006486:	e014      	b.n	80064b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006488:	f7fc fcc6 	bl	8002e18 <HAL_GetTick>
 800648c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800648e:	e008      	b.n	80064a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006490:	f7fc fcc2 	bl	8002e18 <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	2b64      	cmp	r3, #100	@ 0x64
 800649c:	d901      	bls.n	80064a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e1f3      	b.n	800688a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064a2:	4b51      	ldr	r3, [pc, #324]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1f0      	bne.n	8006490 <HAL_RCC_OscConfig+0xe8>
 80064ae:	e000      	b.n	80064b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d063      	beq.n	8006586 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80064be:	4b4a      	ldr	r3, [pc, #296]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f003 030c 	and.w	r3, r3, #12
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00b      	beq.n	80064e2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064ca:	4b47      	ldr	r3, [pc, #284]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80064d2:	2b08      	cmp	r3, #8
 80064d4:	d11c      	bne.n	8006510 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064d6:	4b44      	ldr	r3, [pc, #272]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d116      	bne.n	8006510 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064e2:	4b41      	ldr	r3, [pc, #260]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d005      	beq.n	80064fa <HAL_RCC_OscConfig+0x152>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d001      	beq.n	80064fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e1c7      	b.n	800688a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064fa:	4b3b      	ldr	r3, [pc, #236]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	00db      	lsls	r3, r3, #3
 8006508:	4937      	ldr	r1, [pc, #220]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 800650a:	4313      	orrs	r3, r2
 800650c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800650e:	e03a      	b.n	8006586 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d020      	beq.n	800655a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006518:	4b34      	ldr	r3, [pc, #208]	@ (80065ec <HAL_RCC_OscConfig+0x244>)
 800651a:	2201      	movs	r2, #1
 800651c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800651e:	f7fc fc7b 	bl	8002e18 <HAL_GetTick>
 8006522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006524:	e008      	b.n	8006538 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006526:	f7fc fc77 	bl	8002e18 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	2b02      	cmp	r3, #2
 8006532:	d901      	bls.n	8006538 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e1a8      	b.n	800688a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006538:	4b2b      	ldr	r3, [pc, #172]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0302 	and.w	r3, r3, #2
 8006540:	2b00      	cmp	r3, #0
 8006542:	d0f0      	beq.n	8006526 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006544:	4b28      	ldr	r3, [pc, #160]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	00db      	lsls	r3, r3, #3
 8006552:	4925      	ldr	r1, [pc, #148]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 8006554:	4313      	orrs	r3, r2
 8006556:	600b      	str	r3, [r1, #0]
 8006558:	e015      	b.n	8006586 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800655a:	4b24      	ldr	r3, [pc, #144]	@ (80065ec <HAL_RCC_OscConfig+0x244>)
 800655c:	2200      	movs	r2, #0
 800655e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006560:	f7fc fc5a 	bl	8002e18 <HAL_GetTick>
 8006564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006566:	e008      	b.n	800657a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006568:	f7fc fc56 	bl	8002e18 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	2b02      	cmp	r3, #2
 8006574:	d901      	bls.n	800657a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e187      	b.n	800688a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800657a:	4b1b      	ldr	r3, [pc, #108]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0302 	and.w	r3, r3, #2
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1f0      	bne.n	8006568 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0308 	and.w	r3, r3, #8
 800658e:	2b00      	cmp	r3, #0
 8006590:	d036      	beq.n	8006600 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d016      	beq.n	80065c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800659a:	4b15      	ldr	r3, [pc, #84]	@ (80065f0 <HAL_RCC_OscConfig+0x248>)
 800659c:	2201      	movs	r2, #1
 800659e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a0:	f7fc fc3a 	bl	8002e18 <HAL_GetTick>
 80065a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065a6:	e008      	b.n	80065ba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065a8:	f7fc fc36 	bl	8002e18 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d901      	bls.n	80065ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e167      	b.n	800688a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ba:	4b0b      	ldr	r3, [pc, #44]	@ (80065e8 <HAL_RCC_OscConfig+0x240>)
 80065bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0f0      	beq.n	80065a8 <HAL_RCC_OscConfig+0x200>
 80065c6:	e01b      	b.n	8006600 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065c8:	4b09      	ldr	r3, [pc, #36]	@ (80065f0 <HAL_RCC_OscConfig+0x248>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065ce:	f7fc fc23 	bl	8002e18 <HAL_GetTick>
 80065d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065d4:	e00e      	b.n	80065f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065d6:	f7fc fc1f 	bl	8002e18 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d907      	bls.n	80065f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e150      	b.n	800688a <HAL_RCC_OscConfig+0x4e2>
 80065e8:	40023800 	.word	0x40023800
 80065ec:	42470000 	.word	0x42470000
 80065f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065f4:	4b88      	ldr	r3, [pc, #544]	@ (8006818 <HAL_RCC_OscConfig+0x470>)
 80065f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065f8:	f003 0302 	and.w	r3, r3, #2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1ea      	bne.n	80065d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 8097 	beq.w	800673c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800660e:	2300      	movs	r3, #0
 8006610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006612:	4b81      	ldr	r3, [pc, #516]	@ (8006818 <HAL_RCC_OscConfig+0x470>)
 8006614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10f      	bne.n	800663e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800661e:	2300      	movs	r3, #0
 8006620:	60bb      	str	r3, [r7, #8]
 8006622:	4b7d      	ldr	r3, [pc, #500]	@ (8006818 <HAL_RCC_OscConfig+0x470>)
 8006624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006626:	4a7c      	ldr	r2, [pc, #496]	@ (8006818 <HAL_RCC_OscConfig+0x470>)
 8006628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800662c:	6413      	str	r3, [r2, #64]	@ 0x40
 800662e:	4b7a      	ldr	r3, [pc, #488]	@ (8006818 <HAL_RCC_OscConfig+0x470>)
 8006630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006636:	60bb      	str	r3, [r7, #8]
 8006638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800663a:	2301      	movs	r3, #1
 800663c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800663e:	4b77      	ldr	r3, [pc, #476]	@ (800681c <HAL_RCC_OscConfig+0x474>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006646:	2b00      	cmp	r3, #0
 8006648:	d118      	bne.n	800667c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800664a:	4b74      	ldr	r3, [pc, #464]	@ (800681c <HAL_RCC_OscConfig+0x474>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a73      	ldr	r2, [pc, #460]	@ (800681c <HAL_RCC_OscConfig+0x474>)
 8006650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006656:	f7fc fbdf 	bl	8002e18 <HAL_GetTick>
 800665a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800665c:	e008      	b.n	8006670 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800665e:	f7fc fbdb 	bl	8002e18 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	2b02      	cmp	r3, #2
 800666a:	d901      	bls.n	8006670 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e10c      	b.n	800688a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006670:	4b6a      	ldr	r3, [pc, #424]	@ (800681c <HAL_RCC_OscConfig+0x474>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0f0      	beq.n	800665e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d106      	bne.n	8006692 <HAL_RCC_OscConfig+0x2ea>
 8006684:	4b64      	ldr	r3, [pc, #400]	@ (8006818 <HAL_RCC_OscConfig+0x470>)
 8006686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006688:	4a63      	ldr	r2, [pc, #396]	@ (8006818 <HAL_RCC_OscConfig+0x470>)
 800668a:	f043 0301 	orr.w	r3, r3, #1
 800668e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006690:	e01c      	b.n	80066cc <HAL_RCC_OscConfig+0x324>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	2b05      	cmp	r3, #5
 8006698:	d10c      	bne.n	80066b4 <HAL_RCC_OscConfig+0x30c>
 800669a:	4b5f      	ldr	r3, [pc, #380]	@ (8006818 <HAL_RCC_OscConfig+0x470>)
 800669c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800669e:	4a5e      	ldr	r2, [pc, #376]	@ (8006818 <HAL_RCC_OscConfig+0x470>)
 80066a0:	f043 0304 	orr.w	r3, r3, #4
 80066a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80066a6:	4b5c      	ldr	r3, [pc, #368]	@ (8006818 <HAL_RCC_OscConfig+0x470>)
 80066a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066aa:	4a5b      	ldr	r2, [pc, #364]	@ (8006818 <HAL_RCC_OscConfig+0x470>)
 80066ac:	f043 0301 	orr.w	r3, r3, #1
 80066b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80066b2:	e00b      	b.n	80066cc <HAL_RCC_OscConfig+0x324>
 80066b4:	4b58      	ldr	r3, [pc, #352]	@ (8006818 <HAL_RCC_OscConfig+0x470>)
 80066b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066b8:	4a57      	ldr	r2, [pc, #348]	@ (8006818 <HAL_RCC_OscConfig+0x470>)
 80066ba:	f023 0301 	bic.w	r3, r3, #1
 80066be:	6713      	str	r3, [r2, #112]	@ 0x70
 80066c0:	4b55      	ldr	r3, [pc, #340]	@ (8006818 <HAL_RCC_OscConfig+0x470>)
 80066c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066c4:	4a54      	ldr	r2, [pc, #336]	@ (8006818 <HAL_RCC_OscConfig+0x470>)
 80066c6:	f023 0304 	bic.w	r3, r3, #4
 80066ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d015      	beq.n	8006700 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066d4:	f7fc fba0 	bl	8002e18 <HAL_GetTick>
 80066d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066da:	e00a      	b.n	80066f2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066dc:	f7fc fb9c 	bl	8002e18 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d901      	bls.n	80066f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e0cb      	b.n	800688a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066f2:	4b49      	ldr	r3, [pc, #292]	@ (8006818 <HAL_RCC_OscConfig+0x470>)
 80066f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0ee      	beq.n	80066dc <HAL_RCC_OscConfig+0x334>
 80066fe:	e014      	b.n	800672a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006700:	f7fc fb8a 	bl	8002e18 <HAL_GetTick>
 8006704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006706:	e00a      	b.n	800671e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006708:	f7fc fb86 	bl	8002e18 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006716:	4293      	cmp	r3, r2
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e0b5      	b.n	800688a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800671e:	4b3e      	ldr	r3, [pc, #248]	@ (8006818 <HAL_RCC_OscConfig+0x470>)
 8006720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1ee      	bne.n	8006708 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800672a:	7dfb      	ldrb	r3, [r7, #23]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d105      	bne.n	800673c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006730:	4b39      	ldr	r3, [pc, #228]	@ (8006818 <HAL_RCC_OscConfig+0x470>)
 8006732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006734:	4a38      	ldr	r2, [pc, #224]	@ (8006818 <HAL_RCC_OscConfig+0x470>)
 8006736:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800673a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 80a1 	beq.w	8006888 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006746:	4b34      	ldr	r3, [pc, #208]	@ (8006818 <HAL_RCC_OscConfig+0x470>)
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f003 030c 	and.w	r3, r3, #12
 800674e:	2b08      	cmp	r3, #8
 8006750:	d05c      	beq.n	800680c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	2b02      	cmp	r3, #2
 8006758:	d141      	bne.n	80067de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800675a:	4b31      	ldr	r3, [pc, #196]	@ (8006820 <HAL_RCC_OscConfig+0x478>)
 800675c:	2200      	movs	r2, #0
 800675e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006760:	f7fc fb5a 	bl	8002e18 <HAL_GetTick>
 8006764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006766:	e008      	b.n	800677a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006768:	f7fc fb56 	bl	8002e18 <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	2b02      	cmp	r3, #2
 8006774:	d901      	bls.n	800677a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e087      	b.n	800688a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800677a:	4b27      	ldr	r3, [pc, #156]	@ (8006818 <HAL_RCC_OscConfig+0x470>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1f0      	bne.n	8006768 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	69da      	ldr	r2, [r3, #28]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	431a      	orrs	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006794:	019b      	lsls	r3, r3, #6
 8006796:	431a      	orrs	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800679c:	085b      	lsrs	r3, r3, #1
 800679e:	3b01      	subs	r3, #1
 80067a0:	041b      	lsls	r3, r3, #16
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a8:	061b      	lsls	r3, r3, #24
 80067aa:	491b      	ldr	r1, [pc, #108]	@ (8006818 <HAL_RCC_OscConfig+0x470>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067b0:	4b1b      	ldr	r3, [pc, #108]	@ (8006820 <HAL_RCC_OscConfig+0x478>)
 80067b2:	2201      	movs	r2, #1
 80067b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067b6:	f7fc fb2f 	bl	8002e18 <HAL_GetTick>
 80067ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067bc:	e008      	b.n	80067d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067be:	f7fc fb2b 	bl	8002e18 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d901      	bls.n	80067d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e05c      	b.n	800688a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067d0:	4b11      	ldr	r3, [pc, #68]	@ (8006818 <HAL_RCC_OscConfig+0x470>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d0f0      	beq.n	80067be <HAL_RCC_OscConfig+0x416>
 80067dc:	e054      	b.n	8006888 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067de:	4b10      	ldr	r3, [pc, #64]	@ (8006820 <HAL_RCC_OscConfig+0x478>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067e4:	f7fc fb18 	bl	8002e18 <HAL_GetTick>
 80067e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ea:	e008      	b.n	80067fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067ec:	f7fc fb14 	bl	8002e18 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e045      	b.n	800688a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067fe:	4b06      	ldr	r3, [pc, #24]	@ (8006818 <HAL_RCC_OscConfig+0x470>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1f0      	bne.n	80067ec <HAL_RCC_OscConfig+0x444>
 800680a:	e03d      	b.n	8006888 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d107      	bne.n	8006824 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e038      	b.n	800688a <HAL_RCC_OscConfig+0x4e2>
 8006818:	40023800 	.word	0x40023800
 800681c:	40007000 	.word	0x40007000
 8006820:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006824:	4b1b      	ldr	r3, [pc, #108]	@ (8006894 <HAL_RCC_OscConfig+0x4ec>)
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d028      	beq.n	8006884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800683c:	429a      	cmp	r2, r3
 800683e:	d121      	bne.n	8006884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800684a:	429a      	cmp	r2, r3
 800684c:	d11a      	bne.n	8006884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006854:	4013      	ands	r3, r2
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800685a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800685c:	4293      	cmp	r3, r2
 800685e:	d111      	bne.n	8006884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800686a:	085b      	lsrs	r3, r3, #1
 800686c:	3b01      	subs	r3, #1
 800686e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006870:	429a      	cmp	r2, r3
 8006872:	d107      	bne.n	8006884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006880:	429a      	cmp	r2, r3
 8006882:	d001      	beq.n	8006888 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e000      	b.n	800688a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3718      	adds	r7, #24
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	40023800 	.word	0x40023800

08006898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d101      	bne.n	80068ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e0cc      	b.n	8006a46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068ac:	4b68      	ldr	r3, [pc, #416]	@ (8006a50 <HAL_RCC_ClockConfig+0x1b8>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0307 	and.w	r3, r3, #7
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d90c      	bls.n	80068d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ba:	4b65      	ldr	r3, [pc, #404]	@ (8006a50 <HAL_RCC_ClockConfig+0x1b8>)
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068c2:	4b63      	ldr	r3, [pc, #396]	@ (8006a50 <HAL_RCC_ClockConfig+0x1b8>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0307 	and.w	r3, r3, #7
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d001      	beq.n	80068d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e0b8      	b.n	8006a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d020      	beq.n	8006922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0304 	and.w	r3, r3, #4
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d005      	beq.n	80068f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068ec:	4b59      	ldr	r3, [pc, #356]	@ (8006a54 <HAL_RCC_ClockConfig+0x1bc>)
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	4a58      	ldr	r2, [pc, #352]	@ (8006a54 <HAL_RCC_ClockConfig+0x1bc>)
 80068f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80068f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0308 	and.w	r3, r3, #8
 8006900:	2b00      	cmp	r3, #0
 8006902:	d005      	beq.n	8006910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006904:	4b53      	ldr	r3, [pc, #332]	@ (8006a54 <HAL_RCC_ClockConfig+0x1bc>)
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	4a52      	ldr	r2, [pc, #328]	@ (8006a54 <HAL_RCC_ClockConfig+0x1bc>)
 800690a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800690e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006910:	4b50      	ldr	r3, [pc, #320]	@ (8006a54 <HAL_RCC_ClockConfig+0x1bc>)
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	494d      	ldr	r1, [pc, #308]	@ (8006a54 <HAL_RCC_ClockConfig+0x1bc>)
 800691e:	4313      	orrs	r3, r2
 8006920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b00      	cmp	r3, #0
 800692c:	d044      	beq.n	80069b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d107      	bne.n	8006946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006936:	4b47      	ldr	r3, [pc, #284]	@ (8006a54 <HAL_RCC_ClockConfig+0x1bc>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d119      	bne.n	8006976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e07f      	b.n	8006a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	2b02      	cmp	r3, #2
 800694c:	d003      	beq.n	8006956 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006952:	2b03      	cmp	r3, #3
 8006954:	d107      	bne.n	8006966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006956:	4b3f      	ldr	r3, [pc, #252]	@ (8006a54 <HAL_RCC_ClockConfig+0x1bc>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d109      	bne.n	8006976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e06f      	b.n	8006a46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006966:	4b3b      	ldr	r3, [pc, #236]	@ (8006a54 <HAL_RCC_ClockConfig+0x1bc>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e067      	b.n	8006a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006976:	4b37      	ldr	r3, [pc, #220]	@ (8006a54 <HAL_RCC_ClockConfig+0x1bc>)
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f023 0203 	bic.w	r2, r3, #3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	4934      	ldr	r1, [pc, #208]	@ (8006a54 <HAL_RCC_ClockConfig+0x1bc>)
 8006984:	4313      	orrs	r3, r2
 8006986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006988:	f7fc fa46 	bl	8002e18 <HAL_GetTick>
 800698c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800698e:	e00a      	b.n	80069a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006990:	f7fc fa42 	bl	8002e18 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800699e:	4293      	cmp	r3, r2
 80069a0:	d901      	bls.n	80069a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e04f      	b.n	8006a46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069a6:	4b2b      	ldr	r3, [pc, #172]	@ (8006a54 <HAL_RCC_ClockConfig+0x1bc>)
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f003 020c 	and.w	r2, r3, #12
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d1eb      	bne.n	8006990 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069b8:	4b25      	ldr	r3, [pc, #148]	@ (8006a50 <HAL_RCC_ClockConfig+0x1b8>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0307 	and.w	r3, r3, #7
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d20c      	bcs.n	80069e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069c6:	4b22      	ldr	r3, [pc, #136]	@ (8006a50 <HAL_RCC_ClockConfig+0x1b8>)
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	b2d2      	uxtb	r2, r2
 80069cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ce:	4b20      	ldr	r3, [pc, #128]	@ (8006a50 <HAL_RCC_ClockConfig+0x1b8>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0307 	and.w	r3, r3, #7
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d001      	beq.n	80069e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e032      	b.n	8006a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0304 	and.w	r3, r3, #4
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d008      	beq.n	80069fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069ec:	4b19      	ldr	r3, [pc, #100]	@ (8006a54 <HAL_RCC_ClockConfig+0x1bc>)
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	4916      	ldr	r1, [pc, #88]	@ (8006a54 <HAL_RCC_ClockConfig+0x1bc>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0308 	and.w	r3, r3, #8
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d009      	beq.n	8006a1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a0a:	4b12      	ldr	r3, [pc, #72]	@ (8006a54 <HAL_RCC_ClockConfig+0x1bc>)
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	00db      	lsls	r3, r3, #3
 8006a18:	490e      	ldr	r1, [pc, #56]	@ (8006a54 <HAL_RCC_ClockConfig+0x1bc>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a1e:	f000 f821 	bl	8006a64 <HAL_RCC_GetSysClockFreq>
 8006a22:	4602      	mov	r2, r0
 8006a24:	4b0b      	ldr	r3, [pc, #44]	@ (8006a54 <HAL_RCC_ClockConfig+0x1bc>)
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	091b      	lsrs	r3, r3, #4
 8006a2a:	f003 030f 	and.w	r3, r3, #15
 8006a2e:	490a      	ldr	r1, [pc, #40]	@ (8006a58 <HAL_RCC_ClockConfig+0x1c0>)
 8006a30:	5ccb      	ldrb	r3, [r1, r3]
 8006a32:	fa22 f303 	lsr.w	r3, r2, r3
 8006a36:	4a09      	ldr	r2, [pc, #36]	@ (8006a5c <HAL_RCC_ClockConfig+0x1c4>)
 8006a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006a3a:	4b09      	ldr	r3, [pc, #36]	@ (8006a60 <HAL_RCC_ClockConfig+0x1c8>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fb ffca 	bl	80029d8 <HAL_InitTick>

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	40023c00 	.word	0x40023c00
 8006a54:	40023800 	.word	0x40023800
 8006a58:	08012a24 	.word	0x08012a24
 8006a5c:	2000025c 	.word	0x2000025c
 8006a60:	20000260 	.word	0x20000260

08006a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a68:	b094      	sub	sp, #80	@ 0x50
 8006a6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006a70:	2300      	movs	r3, #0
 8006a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a7c:	4b79      	ldr	r3, [pc, #484]	@ (8006c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f003 030c 	and.w	r3, r3, #12
 8006a84:	2b08      	cmp	r3, #8
 8006a86:	d00d      	beq.n	8006aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	f200 80e1 	bhi.w	8006c50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d002      	beq.n	8006a98 <HAL_RCC_GetSysClockFreq+0x34>
 8006a92:	2b04      	cmp	r3, #4
 8006a94:	d003      	beq.n	8006a9e <HAL_RCC_GetSysClockFreq+0x3a>
 8006a96:	e0db      	b.n	8006c50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a98:	4b73      	ldr	r3, [pc, #460]	@ (8006c68 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a9c:	e0db      	b.n	8006c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a9e:	4b73      	ldr	r3, [pc, #460]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x208>)
 8006aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006aa2:	e0d8      	b.n	8006c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006aa4:	4b6f      	ldr	r3, [pc, #444]	@ (8006c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006aac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006aae:	4b6d      	ldr	r3, [pc, #436]	@ (8006c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d063      	beq.n	8006b82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aba:	4b6a      	ldr	r3, [pc, #424]	@ (8006c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	099b      	lsrs	r3, r3, #6
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ac4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006acc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ace:	2300      	movs	r3, #0
 8006ad0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ad2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006ad6:	4622      	mov	r2, r4
 8006ad8:	462b      	mov	r3, r5
 8006ada:	f04f 0000 	mov.w	r0, #0
 8006ade:	f04f 0100 	mov.w	r1, #0
 8006ae2:	0159      	lsls	r1, r3, #5
 8006ae4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ae8:	0150      	lsls	r0, r2, #5
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	4621      	mov	r1, r4
 8006af0:	1a51      	subs	r1, r2, r1
 8006af2:	6139      	str	r1, [r7, #16]
 8006af4:	4629      	mov	r1, r5
 8006af6:	eb63 0301 	sbc.w	r3, r3, r1
 8006afa:	617b      	str	r3, [r7, #20]
 8006afc:	f04f 0200 	mov.w	r2, #0
 8006b00:	f04f 0300 	mov.w	r3, #0
 8006b04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b08:	4659      	mov	r1, fp
 8006b0a:	018b      	lsls	r3, r1, #6
 8006b0c:	4651      	mov	r1, sl
 8006b0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b12:	4651      	mov	r1, sl
 8006b14:	018a      	lsls	r2, r1, #6
 8006b16:	4651      	mov	r1, sl
 8006b18:	ebb2 0801 	subs.w	r8, r2, r1
 8006b1c:	4659      	mov	r1, fp
 8006b1e:	eb63 0901 	sbc.w	r9, r3, r1
 8006b22:	f04f 0200 	mov.w	r2, #0
 8006b26:	f04f 0300 	mov.w	r3, #0
 8006b2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b36:	4690      	mov	r8, r2
 8006b38:	4699      	mov	r9, r3
 8006b3a:	4623      	mov	r3, r4
 8006b3c:	eb18 0303 	adds.w	r3, r8, r3
 8006b40:	60bb      	str	r3, [r7, #8]
 8006b42:	462b      	mov	r3, r5
 8006b44:	eb49 0303 	adc.w	r3, r9, r3
 8006b48:	60fb      	str	r3, [r7, #12]
 8006b4a:	f04f 0200 	mov.w	r2, #0
 8006b4e:	f04f 0300 	mov.w	r3, #0
 8006b52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006b56:	4629      	mov	r1, r5
 8006b58:	024b      	lsls	r3, r1, #9
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006b60:	4621      	mov	r1, r4
 8006b62:	024a      	lsls	r2, r1, #9
 8006b64:	4610      	mov	r0, r2
 8006b66:	4619      	mov	r1, r3
 8006b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006b74:	f7f9 fb84 	bl	8000280 <__aeabi_uldivmod>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b80:	e058      	b.n	8006c34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b82:	4b38      	ldr	r3, [pc, #224]	@ (8006c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	099b      	lsrs	r3, r3, #6
 8006b88:	2200      	movs	r2, #0
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	4611      	mov	r1, r2
 8006b8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b92:	623b      	str	r3, [r7, #32]
 8006b94:	2300      	movs	r3, #0
 8006b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006b9c:	4642      	mov	r2, r8
 8006b9e:	464b      	mov	r3, r9
 8006ba0:	f04f 0000 	mov.w	r0, #0
 8006ba4:	f04f 0100 	mov.w	r1, #0
 8006ba8:	0159      	lsls	r1, r3, #5
 8006baa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006bae:	0150      	lsls	r0, r2, #5
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4641      	mov	r1, r8
 8006bb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8006bba:	4649      	mov	r1, r9
 8006bbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006bc0:	f04f 0200 	mov.w	r2, #0
 8006bc4:	f04f 0300 	mov.w	r3, #0
 8006bc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006bcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006bd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006bd4:	ebb2 040a 	subs.w	r4, r2, sl
 8006bd8:	eb63 050b 	sbc.w	r5, r3, fp
 8006bdc:	f04f 0200 	mov.w	r2, #0
 8006be0:	f04f 0300 	mov.w	r3, #0
 8006be4:	00eb      	lsls	r3, r5, #3
 8006be6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bea:	00e2      	lsls	r2, r4, #3
 8006bec:	4614      	mov	r4, r2
 8006bee:	461d      	mov	r5, r3
 8006bf0:	4643      	mov	r3, r8
 8006bf2:	18e3      	adds	r3, r4, r3
 8006bf4:	603b      	str	r3, [r7, #0]
 8006bf6:	464b      	mov	r3, r9
 8006bf8:	eb45 0303 	adc.w	r3, r5, r3
 8006bfc:	607b      	str	r3, [r7, #4]
 8006bfe:	f04f 0200 	mov.w	r2, #0
 8006c02:	f04f 0300 	mov.w	r3, #0
 8006c06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c0a:	4629      	mov	r1, r5
 8006c0c:	028b      	lsls	r3, r1, #10
 8006c0e:	4621      	mov	r1, r4
 8006c10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006c14:	4621      	mov	r1, r4
 8006c16:	028a      	lsls	r2, r1, #10
 8006c18:	4610      	mov	r0, r2
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c1e:	2200      	movs	r2, #0
 8006c20:	61bb      	str	r3, [r7, #24]
 8006c22:	61fa      	str	r2, [r7, #28]
 8006c24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c28:	f7f9 fb2a 	bl	8000280 <__aeabi_uldivmod>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	460b      	mov	r3, r1
 8006c30:	4613      	mov	r3, r2
 8006c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006c34:	4b0b      	ldr	r3, [pc, #44]	@ (8006c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	0c1b      	lsrs	r3, r3, #16
 8006c3a:	f003 0303 	and.w	r3, r3, #3
 8006c3e:	3301      	adds	r3, #1
 8006c40:	005b      	lsls	r3, r3, #1
 8006c42:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006c44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c4e:	e002      	b.n	8006c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c50:	4b05      	ldr	r3, [pc, #20]	@ (8006c68 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3750      	adds	r7, #80	@ 0x50
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c62:	bf00      	nop
 8006c64:	40023800 	.word	0x40023800
 8006c68:	00f42400 	.word	0x00f42400
 8006c6c:	007a1200 	.word	0x007a1200

08006c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c70:	b480      	push	{r7}
 8006c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c74:	4b03      	ldr	r3, [pc, #12]	@ (8006c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c76:	681b      	ldr	r3, [r3, #0]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	2000025c 	.word	0x2000025c

08006c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c8c:	f7ff fff0 	bl	8006c70 <HAL_RCC_GetHCLKFreq>
 8006c90:	4602      	mov	r2, r0
 8006c92:	4b05      	ldr	r3, [pc, #20]	@ (8006ca8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	0a9b      	lsrs	r3, r3, #10
 8006c98:	f003 0307 	and.w	r3, r3, #7
 8006c9c:	4903      	ldr	r1, [pc, #12]	@ (8006cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c9e:	5ccb      	ldrb	r3, [r1, r3]
 8006ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	40023800 	.word	0x40023800
 8006cac:	08012a34 	.word	0x08012a34

08006cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006cb4:	f7ff ffdc 	bl	8006c70 <HAL_RCC_GetHCLKFreq>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	4b05      	ldr	r3, [pc, #20]	@ (8006cd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	0b5b      	lsrs	r3, r3, #13
 8006cc0:	f003 0307 	and.w	r3, r3, #7
 8006cc4:	4903      	ldr	r1, [pc, #12]	@ (8006cd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cc6:	5ccb      	ldrb	r3, [r1, r3]
 8006cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	40023800 	.word	0x40023800
 8006cd4:	08012a34 	.word	0x08012a34

08006cd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	220f      	movs	r2, #15
 8006ce6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006ce8:	4b12      	ldr	r3, [pc, #72]	@ (8006d34 <HAL_RCC_GetClockConfig+0x5c>)
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f003 0203 	and.w	r2, r3, #3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8006d34 <HAL_RCC_GetClockConfig+0x5c>)
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006d00:	4b0c      	ldr	r3, [pc, #48]	@ (8006d34 <HAL_RCC_GetClockConfig+0x5c>)
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006d0c:	4b09      	ldr	r3, [pc, #36]	@ (8006d34 <HAL_RCC_GetClockConfig+0x5c>)
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	08db      	lsrs	r3, r3, #3
 8006d12:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006d1a:	4b07      	ldr	r3, [pc, #28]	@ (8006d38 <HAL_RCC_GetClockConfig+0x60>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0207 	and.w	r2, r3, #7
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	601a      	str	r2, [r3, #0]
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	40023800 	.word	0x40023800
 8006d38:	40023c00 	.word	0x40023c00

08006d3c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d105      	bne.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d035      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006d64:	4b62      	ldr	r3, [pc, #392]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d6a:	f7fc f855 	bl	8002e18 <HAL_GetTick>
 8006d6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d70:	e008      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006d72:	f7fc f851 	bl	8002e18 <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d901      	bls.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e0b0      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d84:	4b5b      	ldr	r3, [pc, #364]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1f0      	bne.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	019a      	lsls	r2, r3, #6
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	071b      	lsls	r3, r3, #28
 8006d9c:	4955      	ldr	r1, [pc, #340]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006da4:	4b52      	ldr	r3, [pc, #328]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006da6:	2201      	movs	r2, #1
 8006da8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006daa:	f7fc f835 	bl	8002e18 <HAL_GetTick>
 8006dae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006db0:	e008      	b.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006db2:	f7fc f831 	bl	8002e18 <HAL_GetTick>
 8006db6:	4602      	mov	r2, r0
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d901      	bls.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e090      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006dc4:	4b4b      	ldr	r3, [pc, #300]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d0f0      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f000 8083 	beq.w	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006dde:	2300      	movs	r3, #0
 8006de0:	60fb      	str	r3, [r7, #12]
 8006de2:	4b44      	ldr	r3, [pc, #272]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de6:	4a43      	ldr	r2, [pc, #268]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8006dee:	4b41      	ldr	r3, [pc, #260]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006df6:	60fb      	str	r3, [r7, #12]
 8006df8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006dfa:	4b3f      	ldr	r3, [pc, #252]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a3e      	ldr	r2, [pc, #248]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006e00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e04:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e06:	f7fc f807 	bl	8002e18 <HAL_GetTick>
 8006e0a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006e0c:	e008      	b.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e0e:	f7fc f803 	bl	8002e18 <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d901      	bls.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e062      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006e20:	4b35      	ldr	r3, [pc, #212]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d0f0      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e2c:	4b31      	ldr	r3, [pc, #196]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e34:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d02f      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d028      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e52:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e54:	4b29      	ldr	r3, [pc, #164]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006e56:	2201      	movs	r2, #1
 8006e58:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e5a:	4b28      	ldr	r3, [pc, #160]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006e60:	4a24      	ldr	r2, [pc, #144]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e66:	4b23      	ldr	r3, [pc, #140]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d114      	bne.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006e72:	f7fb ffd1 	bl	8002e18 <HAL_GetTick>
 8006e76:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e78:	e00a      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e7a:	f7fb ffcd 	bl	8002e18 <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d901      	bls.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e02a      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e90:	4b18      	ldr	r3, [pc, #96]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e94:	f003 0302 	and.w	r3, r3, #2
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d0ee      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ea4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ea8:	d10d      	bne.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006eaa:	4b12      	ldr	r3, [pc, #72]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006eba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ebe:	490d      	ldr	r1, [pc, #52]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	608b      	str	r3, [r1, #8]
 8006ec4:	e005      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	4a0a      	ldr	r2, [pc, #40]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ecc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006ed0:	6093      	str	r3, [r2, #8]
 8006ed2:	4b08      	ldr	r3, [pc, #32]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ed4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ede:	4905      	ldr	r1, [pc, #20]	@ (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3718      	adds	r7, #24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	42470068 	.word	0x42470068
 8006ef4:	40023800 	.word	0x40023800
 8006ef8:	40007000 	.word	0x40007000
 8006efc:	42470e40 	.word	0x42470e40

08006f00 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b087      	sub	sp, #28
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006f10:	2300      	movs	r3, #0
 8006f12:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006f14:	2300      	movs	r3, #0
 8006f16:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d13f      	bne.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006f1e:	4b24      	ldr	r3, [pc, #144]	@ (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f26:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d006      	beq.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f34:	d12f      	bne.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006f36:	4b1f      	ldr	r3, [pc, #124]	@ (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006f38:	617b      	str	r3, [r7, #20]
          break;
 8006f3a:	e02f      	b.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f48:	d108      	bne.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006f4a:	4b19      	ldr	r3, [pc, #100]	@ (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f52:	4a19      	ldr	r2, [pc, #100]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f58:	613b      	str	r3, [r7, #16]
 8006f5a:	e007      	b.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006f5c:	4b14      	ldr	r3, [pc, #80]	@ (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f64:	4a15      	ldr	r2, [pc, #84]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f6a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006f6c:	4b10      	ldr	r3, [pc, #64]	@ (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f72:	099b      	lsrs	r3, r3, #6
 8006f74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	fb02 f303 	mul.w	r3, r2, r3
 8006f7e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006f80:	4b0b      	ldr	r3, [pc, #44]	@ (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f86:	0f1b      	lsrs	r3, r3, #28
 8006f88:	f003 0307 	and.w	r3, r3, #7
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f92:	617b      	str	r3, [r7, #20]
          break;
 8006f94:	e002      	b.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006f96:	2300      	movs	r3, #0
 8006f98:	617b      	str	r3, [r7, #20]
          break;
 8006f9a:	bf00      	nop
        }
      }
      break;
 8006f9c:	e000      	b.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006f9e:	bf00      	nop
    }
  }
  return frequency;
 8006fa0:	697b      	ldr	r3, [r7, #20]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	371c      	adds	r7, #28
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	40023800 	.word	0x40023800
 8006fb4:	00bb8000 	.word	0x00bb8000
 8006fb8:	007a1200 	.word	0x007a1200
 8006fbc:	00f42400 	.word	0x00f42400

08006fc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e07b      	b.n	80070ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d108      	bne.n	8006fec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fe2:	d009      	beq.n	8006ff8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	61da      	str	r2, [r3, #28]
 8006fea:	e005      	b.n	8006ff8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b00      	cmp	r3, #0
 8007008:	d106      	bne.n	8007018 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7fb fc0c 	bl	8002830 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800702e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007040:	431a      	orrs	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800704a:	431a      	orrs	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	f003 0302 	and.w	r3, r3, #2
 8007054:	431a      	orrs	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	695b      	ldr	r3, [r3, #20]
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	431a      	orrs	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007068:	431a      	orrs	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	69db      	ldr	r3, [r3, #28]
 800706e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007072:	431a      	orrs	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800707c:	ea42 0103 	orr.w	r1, r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007084:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	430a      	orrs	r2, r1
 800708e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	0c1b      	lsrs	r3, r3, #16
 8007096:	f003 0104 	and.w	r1, r3, #4
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709e:	f003 0210 	and.w	r2, r3, #16
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	430a      	orrs	r2, r1
 80070a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	69da      	ldr	r2, [r3, #28]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80070b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b082      	sub	sp, #8
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e041      	b.n	8007168 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d106      	bne.n	80070fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f839 	bl	8007170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2202      	movs	r2, #2
 8007102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	3304      	adds	r3, #4
 800710e:	4619      	mov	r1, r3
 8007110:	4610      	mov	r0, r2
 8007112:	f000 f9bf 	bl	8007494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2201      	movs	r2, #1
 8007122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b01      	cmp	r3, #1
 8007196:	d001      	beq.n	800719c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e04e      	b.n	800723a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68da      	ldr	r2, [r3, #12]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f042 0201 	orr.w	r2, r2, #1
 80071b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a23      	ldr	r2, [pc, #140]	@ (8007248 <HAL_TIM_Base_Start_IT+0xc4>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d022      	beq.n	8007204 <HAL_TIM_Base_Start_IT+0x80>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071c6:	d01d      	beq.n	8007204 <HAL_TIM_Base_Start_IT+0x80>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a1f      	ldr	r2, [pc, #124]	@ (800724c <HAL_TIM_Base_Start_IT+0xc8>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d018      	beq.n	8007204 <HAL_TIM_Base_Start_IT+0x80>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a1e      	ldr	r2, [pc, #120]	@ (8007250 <HAL_TIM_Base_Start_IT+0xcc>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d013      	beq.n	8007204 <HAL_TIM_Base_Start_IT+0x80>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a1c      	ldr	r2, [pc, #112]	@ (8007254 <HAL_TIM_Base_Start_IT+0xd0>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d00e      	beq.n	8007204 <HAL_TIM_Base_Start_IT+0x80>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a1b      	ldr	r2, [pc, #108]	@ (8007258 <HAL_TIM_Base_Start_IT+0xd4>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d009      	beq.n	8007204 <HAL_TIM_Base_Start_IT+0x80>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a19      	ldr	r2, [pc, #100]	@ (800725c <HAL_TIM_Base_Start_IT+0xd8>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d004      	beq.n	8007204 <HAL_TIM_Base_Start_IT+0x80>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a18      	ldr	r2, [pc, #96]	@ (8007260 <HAL_TIM_Base_Start_IT+0xdc>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d111      	bne.n	8007228 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f003 0307 	and.w	r3, r3, #7
 800720e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2b06      	cmp	r3, #6
 8007214:	d010      	beq.n	8007238 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f042 0201 	orr.w	r2, r2, #1
 8007224:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007226:	e007      	b.n	8007238 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f042 0201 	orr.w	r2, r2, #1
 8007236:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	40010000 	.word	0x40010000
 800724c:	40000400 	.word	0x40000400
 8007250:	40000800 	.word	0x40000800
 8007254:	40000c00 	.word	0x40000c00
 8007258:	40010400 	.word	0x40010400
 800725c:	40014000 	.word	0x40014000
 8007260:	40001800 	.word	0x40001800

08007264 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	f003 0302 	and.w	r3, r3, #2
 8007282:	2b00      	cmp	r3, #0
 8007284:	d020      	beq.n	80072c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f003 0302 	and.w	r3, r3, #2
 800728c:	2b00      	cmp	r3, #0
 800728e:	d01b      	beq.n	80072c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f06f 0202 	mvn.w	r2, #2
 8007298:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	f003 0303 	and.w	r3, r3, #3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 f8d2 	bl	8007458 <HAL_TIM_IC_CaptureCallback>
 80072b4:	e005      	b.n	80072c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f8c4 	bl	8007444 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f8d5 	bl	800746c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f003 0304 	and.w	r3, r3, #4
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d020      	beq.n	8007314 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f003 0304 	and.w	r3, r3, #4
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d01b      	beq.n	8007314 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f06f 0204 	mvn.w	r2, #4
 80072e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2202      	movs	r2, #2
 80072ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d003      	beq.n	8007302 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f8ac 	bl	8007458 <HAL_TIM_IC_CaptureCallback>
 8007300:	e005      	b.n	800730e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f89e 	bl	8007444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f8af 	bl	800746c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	f003 0308 	and.w	r3, r3, #8
 800731a:	2b00      	cmp	r3, #0
 800731c:	d020      	beq.n	8007360 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f003 0308 	and.w	r3, r3, #8
 8007324:	2b00      	cmp	r3, #0
 8007326:	d01b      	beq.n	8007360 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f06f 0208 	mvn.w	r2, #8
 8007330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2204      	movs	r2, #4
 8007336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	f003 0303 	and.w	r3, r3, #3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d003      	beq.n	800734e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f886 	bl	8007458 <HAL_TIM_IC_CaptureCallback>
 800734c:	e005      	b.n	800735a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f878 	bl	8007444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f889 	bl	800746c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f003 0310 	and.w	r3, r3, #16
 8007366:	2b00      	cmp	r3, #0
 8007368:	d020      	beq.n	80073ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f003 0310 	and.w	r3, r3, #16
 8007370:	2b00      	cmp	r3, #0
 8007372:	d01b      	beq.n	80073ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f06f 0210 	mvn.w	r2, #16
 800737c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2208      	movs	r2, #8
 8007382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800738e:	2b00      	cmp	r3, #0
 8007390:	d003      	beq.n	800739a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f860 	bl	8007458 <HAL_TIM_IC_CaptureCallback>
 8007398:	e005      	b.n	80073a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f852 	bl	8007444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f863 	bl	800746c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00c      	beq.n	80073d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d007      	beq.n	80073d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f06f 0201 	mvn.w	r2, #1
 80073c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7fb f924 	bl	8002618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00c      	beq.n	80073f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d007      	beq.n	80073f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80073ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f900 	bl	80075f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00c      	beq.n	8007418 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007404:	2b00      	cmp	r3, #0
 8007406:	d007      	beq.n	8007418 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f834 	bl	8007480 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f003 0320 	and.w	r3, r3, #32
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00c      	beq.n	800743c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f003 0320 	and.w	r3, r3, #32
 8007428:	2b00      	cmp	r3, #0
 800742a:	d007      	beq.n	800743c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f06f 0220 	mvn.w	r2, #32
 8007434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f8d2 	bl	80075e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800743c:	bf00      	nop
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a43      	ldr	r2, [pc, #268]	@ (80075b4 <TIM_Base_SetConfig+0x120>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d013      	beq.n	80074d4 <TIM_Base_SetConfig+0x40>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074b2:	d00f      	beq.n	80074d4 <TIM_Base_SetConfig+0x40>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a40      	ldr	r2, [pc, #256]	@ (80075b8 <TIM_Base_SetConfig+0x124>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d00b      	beq.n	80074d4 <TIM_Base_SetConfig+0x40>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a3f      	ldr	r2, [pc, #252]	@ (80075bc <TIM_Base_SetConfig+0x128>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d007      	beq.n	80074d4 <TIM_Base_SetConfig+0x40>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a3e      	ldr	r2, [pc, #248]	@ (80075c0 <TIM_Base_SetConfig+0x12c>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d003      	beq.n	80074d4 <TIM_Base_SetConfig+0x40>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a3d      	ldr	r2, [pc, #244]	@ (80075c4 <TIM_Base_SetConfig+0x130>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d108      	bne.n	80074e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a32      	ldr	r2, [pc, #200]	@ (80075b4 <TIM_Base_SetConfig+0x120>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d02b      	beq.n	8007546 <TIM_Base_SetConfig+0xb2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074f4:	d027      	beq.n	8007546 <TIM_Base_SetConfig+0xb2>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a2f      	ldr	r2, [pc, #188]	@ (80075b8 <TIM_Base_SetConfig+0x124>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d023      	beq.n	8007546 <TIM_Base_SetConfig+0xb2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a2e      	ldr	r2, [pc, #184]	@ (80075bc <TIM_Base_SetConfig+0x128>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d01f      	beq.n	8007546 <TIM_Base_SetConfig+0xb2>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a2d      	ldr	r2, [pc, #180]	@ (80075c0 <TIM_Base_SetConfig+0x12c>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d01b      	beq.n	8007546 <TIM_Base_SetConfig+0xb2>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a2c      	ldr	r2, [pc, #176]	@ (80075c4 <TIM_Base_SetConfig+0x130>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d017      	beq.n	8007546 <TIM_Base_SetConfig+0xb2>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a2b      	ldr	r2, [pc, #172]	@ (80075c8 <TIM_Base_SetConfig+0x134>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d013      	beq.n	8007546 <TIM_Base_SetConfig+0xb2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a2a      	ldr	r2, [pc, #168]	@ (80075cc <TIM_Base_SetConfig+0x138>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d00f      	beq.n	8007546 <TIM_Base_SetConfig+0xb2>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a29      	ldr	r2, [pc, #164]	@ (80075d0 <TIM_Base_SetConfig+0x13c>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d00b      	beq.n	8007546 <TIM_Base_SetConfig+0xb2>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a28      	ldr	r2, [pc, #160]	@ (80075d4 <TIM_Base_SetConfig+0x140>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d007      	beq.n	8007546 <TIM_Base_SetConfig+0xb2>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a27      	ldr	r2, [pc, #156]	@ (80075d8 <TIM_Base_SetConfig+0x144>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d003      	beq.n	8007546 <TIM_Base_SetConfig+0xb2>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a26      	ldr	r2, [pc, #152]	@ (80075dc <TIM_Base_SetConfig+0x148>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d108      	bne.n	8007558 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800754c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	4313      	orrs	r3, r2
 8007556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	4313      	orrs	r3, r2
 8007564:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	689a      	ldr	r2, [r3, #8]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a0e      	ldr	r2, [pc, #56]	@ (80075b4 <TIM_Base_SetConfig+0x120>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d003      	beq.n	8007586 <TIM_Base_SetConfig+0xf2>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a10      	ldr	r2, [pc, #64]	@ (80075c4 <TIM_Base_SetConfig+0x130>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d103      	bne.n	800758e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	691a      	ldr	r2, [r3, #16]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f043 0204 	orr.w	r2, r3, #4
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	601a      	str	r2, [r3, #0]
}
 80075a6:	bf00      	nop
 80075a8:	3714      	adds	r7, #20
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	40010000 	.word	0x40010000
 80075b8:	40000400 	.word	0x40000400
 80075bc:	40000800 	.word	0x40000800
 80075c0:	40000c00 	.word	0x40000c00
 80075c4:	40010400 	.word	0x40010400
 80075c8:	40014000 	.word	0x40014000
 80075cc:	40014400 	.word	0x40014400
 80075d0:	40014800 	.word	0x40014800
 80075d4:	40001800 	.word	0x40001800
 80075d8:	40001c00 	.word	0x40001c00
 80075dc:	40002000 	.word	0x40002000

080075e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d101      	bne.n	800761a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e042      	b.n	80076a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d106      	bne.n	8007634 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7fb f946 	bl	80028c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2224      	movs	r2, #36	@ 0x24
 8007638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68da      	ldr	r2, [r3, #12]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800764a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fdd3 	bl	80081f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	691a      	ldr	r2, [r3, #16]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007660:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	695a      	ldr	r2, [r3, #20]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007670:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68da      	ldr	r2, [r3, #12]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007680:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2220      	movs	r2, #32
 800768c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2220      	movs	r2, #32
 8007694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b08a      	sub	sp, #40	@ 0x28
 80076ac:	af02      	add	r7, sp, #8
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	603b      	str	r3, [r7, #0]
 80076b4:	4613      	mov	r3, r2
 80076b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	2b20      	cmp	r3, #32
 80076c6:	d175      	bne.n	80077b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d002      	beq.n	80076d4 <HAL_UART_Transmit+0x2c>
 80076ce:	88fb      	ldrh	r3, [r7, #6]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d101      	bne.n	80076d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e06e      	b.n	80077b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2221      	movs	r2, #33	@ 0x21
 80076e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076e6:	f7fb fb97 	bl	8002e18 <HAL_GetTick>
 80076ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	88fa      	ldrh	r2, [r7, #6]
 80076f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	88fa      	ldrh	r2, [r7, #6]
 80076f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007700:	d108      	bne.n	8007714 <HAL_UART_Transmit+0x6c>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d104      	bne.n	8007714 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800770a:	2300      	movs	r3, #0
 800770c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	61bb      	str	r3, [r7, #24]
 8007712:	e003      	b.n	800771c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007718:	2300      	movs	r3, #0
 800771a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800771c:	e02e      	b.n	800777c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	2200      	movs	r2, #0
 8007726:	2180      	movs	r1, #128	@ 0x80
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 fb37 	bl	8007d9c <UART_WaitOnFlagUntilTimeout>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d005      	beq.n	8007740 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2220      	movs	r2, #32
 8007738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	e03a      	b.n	80077b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10b      	bne.n	800775e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	461a      	mov	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007754:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	3302      	adds	r3, #2
 800775a:	61bb      	str	r3, [r7, #24]
 800775c:	e007      	b.n	800776e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	781a      	ldrb	r2, [r3, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	3301      	adds	r3, #1
 800776c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007772:	b29b      	uxth	r3, r3
 8007774:	3b01      	subs	r3, #1
 8007776:	b29a      	uxth	r2, r3
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007780:	b29b      	uxth	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1cb      	bne.n	800771e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2200      	movs	r2, #0
 800778e:	2140      	movs	r1, #64	@ 0x40
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 fb03 	bl	8007d9c <UART_WaitOnFlagUntilTimeout>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d005      	beq.n	80077a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2220      	movs	r2, #32
 80077a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e006      	b.n	80077b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2220      	movs	r2, #32
 80077ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	e000      	b.n	80077b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80077b4:	2302      	movs	r3, #2
  }
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3720      	adds	r7, #32
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b084      	sub	sp, #16
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	60f8      	str	r0, [r7, #12]
 80077c6:	60b9      	str	r1, [r7, #8]
 80077c8:	4613      	mov	r3, r2
 80077ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b20      	cmp	r3, #32
 80077d6:	d112      	bne.n	80077fe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d002      	beq.n	80077e4 <HAL_UART_Receive_IT+0x26>
 80077de:	88fb      	ldrh	r3, [r7, #6]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e00b      	b.n	8007800 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80077ee:	88fb      	ldrh	r3, [r7, #6]
 80077f0:	461a      	mov	r2, r3
 80077f2:	68b9      	ldr	r1, [r7, #8]
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f000 fb2a 	bl	8007e4e <UART_Start_Receive_IT>
 80077fa:	4603      	mov	r3, r0
 80077fc:	e000      	b.n	8007800 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80077fe:	2302      	movs	r3, #2
  }
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b0ba      	sub	sp, #232	@ 0xe8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800782e:	2300      	movs	r3, #0
 8007830:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007834:	2300      	movs	r3, #0
 8007836:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800783a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800783e:	f003 030f 	and.w	r3, r3, #15
 8007842:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007846:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10f      	bne.n	800786e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800784e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007852:	f003 0320 	and.w	r3, r3, #32
 8007856:	2b00      	cmp	r3, #0
 8007858:	d009      	beq.n	800786e <HAL_UART_IRQHandler+0x66>
 800785a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800785e:	f003 0320 	and.w	r3, r3, #32
 8007862:	2b00      	cmp	r3, #0
 8007864:	d003      	beq.n	800786e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fc07 	bl	800807a <UART_Receive_IT>
      return;
 800786c:	e273      	b.n	8007d56 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800786e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007872:	2b00      	cmp	r3, #0
 8007874:	f000 80de 	beq.w	8007a34 <HAL_UART_IRQHandler+0x22c>
 8007878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800787c:	f003 0301 	and.w	r3, r3, #1
 8007880:	2b00      	cmp	r3, #0
 8007882:	d106      	bne.n	8007892 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007888:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800788c:	2b00      	cmp	r3, #0
 800788e:	f000 80d1 	beq.w	8007a34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007896:	f003 0301 	and.w	r3, r3, #1
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00b      	beq.n	80078b6 <HAL_UART_IRQHandler+0xae>
 800789e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d005      	beq.n	80078b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078ae:	f043 0201 	orr.w	r2, r3, #1
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078ba:	f003 0304 	and.w	r3, r3, #4
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00b      	beq.n	80078da <HAL_UART_IRQHandler+0xd2>
 80078c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d005      	beq.n	80078da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078d2:	f043 0202 	orr.w	r2, r3, #2
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078de:	f003 0302 	and.w	r3, r3, #2
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00b      	beq.n	80078fe <HAL_UART_IRQHandler+0xf6>
 80078e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d005      	beq.n	80078fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078f6:	f043 0204 	orr.w	r2, r3, #4
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80078fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007902:	f003 0308 	and.w	r3, r3, #8
 8007906:	2b00      	cmp	r3, #0
 8007908:	d011      	beq.n	800792e <HAL_UART_IRQHandler+0x126>
 800790a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800790e:	f003 0320 	and.w	r3, r3, #32
 8007912:	2b00      	cmp	r3, #0
 8007914:	d105      	bne.n	8007922 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b00      	cmp	r3, #0
 8007920:	d005      	beq.n	800792e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007926:	f043 0208 	orr.w	r2, r3, #8
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 820a 	beq.w	8007d4c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800793c:	f003 0320 	and.w	r3, r3, #32
 8007940:	2b00      	cmp	r3, #0
 8007942:	d008      	beq.n	8007956 <HAL_UART_IRQHandler+0x14e>
 8007944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007948:	f003 0320 	and.w	r3, r3, #32
 800794c:	2b00      	cmp	r3, #0
 800794e:	d002      	beq.n	8007956 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fb92 	bl	800807a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007960:	2b40      	cmp	r3, #64	@ 0x40
 8007962:	bf0c      	ite	eq
 8007964:	2301      	moveq	r3, #1
 8007966:	2300      	movne	r3, #0
 8007968:	b2db      	uxtb	r3, r3
 800796a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007972:	f003 0308 	and.w	r3, r3, #8
 8007976:	2b00      	cmp	r3, #0
 8007978:	d103      	bne.n	8007982 <HAL_UART_IRQHandler+0x17a>
 800797a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800797e:	2b00      	cmp	r3, #0
 8007980:	d04f      	beq.n	8007a22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 fa9d 	bl	8007ec2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007992:	2b40      	cmp	r3, #64	@ 0x40
 8007994:	d141      	bne.n	8007a1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3314      	adds	r3, #20
 800799c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80079a4:	e853 3f00 	ldrex	r3, [r3]
 80079a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80079ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3314      	adds	r3, #20
 80079be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80079c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80079c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80079ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80079d2:	e841 2300 	strex	r3, r2, [r1]
 80079d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80079da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1d9      	bne.n	8007996 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d013      	beq.n	8007a12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079ee:	4a8a      	ldr	r2, [pc, #552]	@ (8007c18 <HAL_UART_IRQHandler+0x410>)
 80079f0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fb fb90 	bl	800311c <HAL_DMA_Abort_IT>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d016      	beq.n	8007a30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a10:	e00e      	b.n	8007a30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f9ac 	bl	8007d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a18:	e00a      	b.n	8007a30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f9a8 	bl	8007d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a20:	e006      	b.n	8007a30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f9a4 	bl	8007d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007a2e:	e18d      	b.n	8007d4c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a30:	bf00      	nop
    return;
 8007a32:	e18b      	b.n	8007d4c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	f040 8167 	bne.w	8007d0c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a42:	f003 0310 	and.w	r3, r3, #16
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f000 8160 	beq.w	8007d0c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a50:	f003 0310 	and.w	r3, r3, #16
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 8159 	beq.w	8007d0c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60bb      	str	r3, [r7, #8]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	60bb      	str	r3, [r7, #8]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	60bb      	str	r3, [r7, #8]
 8007a6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a7a:	2b40      	cmp	r3, #64	@ 0x40
 8007a7c:	f040 80ce 	bne.w	8007c1c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 80a9 	beq.w	8007be8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007a9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	f080 80a2 	bcs.w	8007be8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007aaa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ab6:	f000 8088 	beq.w	8007bca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	330c      	adds	r3, #12
 8007ac0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ac8:	e853 3f00 	ldrex	r3, [r3]
 8007acc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007ad0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ad4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ad8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	330c      	adds	r3, #12
 8007ae2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007ae6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007aea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007af2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007af6:	e841 2300 	strex	r3, r2, [r1]
 8007afa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1d9      	bne.n	8007aba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	3314      	adds	r3, #20
 8007b0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007b16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b18:	f023 0301 	bic.w	r3, r3, #1
 8007b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3314      	adds	r3, #20
 8007b26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007b2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007b2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007b32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b36:	e841 2300 	strex	r3, r2, [r1]
 8007b3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007b3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1e1      	bne.n	8007b06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3314      	adds	r3, #20
 8007b48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b4c:	e853 3f00 	ldrex	r3, [r3]
 8007b50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007b52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	3314      	adds	r3, #20
 8007b62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007b66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007b68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007b6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007b6e:	e841 2300 	strex	r3, r2, [r1]
 8007b72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007b74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1e3      	bne.n	8007b42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2220      	movs	r2, #32
 8007b7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	330c      	adds	r3, #12
 8007b8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b92:	e853 3f00 	ldrex	r3, [r3]
 8007b96:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b9a:	f023 0310 	bic.w	r3, r3, #16
 8007b9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	330c      	adds	r3, #12
 8007ba8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007bac:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007bae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007bb2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007bb4:	e841 2300 	strex	r3, r2, [r1]
 8007bb8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007bba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1e3      	bne.n	8007b88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7fb fa39 	bl	800303c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2202      	movs	r2, #2
 8007bce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f8cf 	bl	8007d84 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007be6:	e0b3      	b.n	8007d50 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007bec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	f040 80ad 	bne.w	8007d50 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bfa:	69db      	ldr	r3, [r3, #28]
 8007bfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c00:	f040 80a6 	bne.w	8007d50 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2202      	movs	r2, #2
 8007c08:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f8b7 	bl	8007d84 <HAL_UARTEx_RxEventCallback>
      return;
 8007c16:	e09b      	b.n	8007d50 <HAL_UART_IRQHandler+0x548>
 8007c18:	08007f89 	.word	0x08007f89
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 808e 	beq.w	8007d54 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007c38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f000 8089 	beq.w	8007d54 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	330c      	adds	r3, #12
 8007c48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c4c:	e853 3f00 	ldrex	r3, [r3]
 8007c50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	330c      	adds	r3, #12
 8007c62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007c66:	647a      	str	r2, [r7, #68]	@ 0x44
 8007c68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c6e:	e841 2300 	strex	r3, r2, [r1]
 8007c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1e3      	bne.n	8007c42 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	3314      	adds	r3, #20
 8007c80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c84:	e853 3f00 	ldrex	r3, [r3]
 8007c88:	623b      	str	r3, [r7, #32]
   return(result);
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	f023 0301 	bic.w	r3, r3, #1
 8007c90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3314      	adds	r3, #20
 8007c9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007c9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ca4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ca6:	e841 2300 	strex	r3, r2, [r1]
 8007caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1e3      	bne.n	8007c7a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2220      	movs	r2, #32
 8007cb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	330c      	adds	r3, #12
 8007cc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	e853 3f00 	ldrex	r3, [r3]
 8007cce:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f023 0310 	bic.w	r3, r3, #16
 8007cd6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	330c      	adds	r3, #12
 8007ce0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007ce4:	61fa      	str	r2, [r7, #28]
 8007ce6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce8:	69b9      	ldr	r1, [r7, #24]
 8007cea:	69fa      	ldr	r2, [r7, #28]
 8007cec:	e841 2300 	strex	r3, r2, [r1]
 8007cf0:	617b      	str	r3, [r7, #20]
   return(result);
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1e3      	bne.n	8007cc0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d02:	4619      	mov	r1, r3
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 f83d 	bl	8007d84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d0a:	e023      	b.n	8007d54 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d009      	beq.n	8007d2c <HAL_UART_IRQHandler+0x524>
 8007d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d003      	beq.n	8007d2c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f940 	bl	8007faa <UART_Transmit_IT>
    return;
 8007d2a:	e014      	b.n	8007d56 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00e      	beq.n	8007d56 <HAL_UART_IRQHandler+0x54e>
 8007d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d008      	beq.n	8007d56 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 f980 	bl	800804a <UART_EndTransmit_IT>
    return;
 8007d4a:	e004      	b.n	8007d56 <HAL_UART_IRQHandler+0x54e>
    return;
 8007d4c:	bf00      	nop
 8007d4e:	e002      	b.n	8007d56 <HAL_UART_IRQHandler+0x54e>
      return;
 8007d50:	bf00      	nop
 8007d52:	e000      	b.n	8007d56 <HAL_UART_IRQHandler+0x54e>
      return;
 8007d54:	bf00      	nop
  }
}
 8007d56:	37e8      	adds	r7, #232	@ 0xe8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d78:	bf00      	nop
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	603b      	str	r3, [r7, #0]
 8007da8:	4613      	mov	r3, r2
 8007daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dac:	e03b      	b.n	8007e26 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dae:	6a3b      	ldr	r3, [r7, #32]
 8007db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db4:	d037      	beq.n	8007e26 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007db6:	f7fb f82f 	bl	8002e18 <HAL_GetTick>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	6a3a      	ldr	r2, [r7, #32]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d302      	bcc.n	8007dcc <UART_WaitOnFlagUntilTimeout+0x30>
 8007dc6:	6a3b      	ldr	r3, [r7, #32]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d101      	bne.n	8007dd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e03a      	b.n	8007e46 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	f003 0304 	and.w	r3, r3, #4
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d023      	beq.n	8007e26 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	2b80      	cmp	r3, #128	@ 0x80
 8007de2:	d020      	beq.n	8007e26 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	2b40      	cmp	r3, #64	@ 0x40
 8007de8:	d01d      	beq.n	8007e26 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 0308 	and.w	r3, r3, #8
 8007df4:	2b08      	cmp	r3, #8
 8007df6:	d116      	bne.n	8007e26 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007df8:	2300      	movs	r3, #0
 8007dfa:	617b      	str	r3, [r7, #20]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	617b      	str	r3, [r7, #20]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	617b      	str	r3, [r7, #20]
 8007e0c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f000 f857 	bl	8007ec2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2208      	movs	r2, #8
 8007e18:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e00f      	b.n	8007e46 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	4013      	ands	r3, r2
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	bf0c      	ite	eq
 8007e36:	2301      	moveq	r3, #1
 8007e38:	2300      	movne	r3, #0
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	79fb      	ldrb	r3, [r7, #7]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d0b4      	beq.n	8007dae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3718      	adds	r7, #24
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b085      	sub	sp, #20
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	60f8      	str	r0, [r7, #12]
 8007e56:	60b9      	str	r1, [r7, #8]
 8007e58:	4613      	mov	r3, r2
 8007e5a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	88fa      	ldrh	r2, [r7, #6]
 8007e66:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	88fa      	ldrh	r2, [r7, #6]
 8007e6c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2222      	movs	r2, #34	@ 0x22
 8007e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d007      	beq.n	8007e94 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68da      	ldr	r2, [r3, #12]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007e92:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	695a      	ldr	r2, [r3, #20]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f042 0201 	orr.w	r2, r2, #1
 8007ea2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68da      	ldr	r2, [r3, #12]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f042 0220 	orr.w	r2, r2, #32
 8007eb2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b095      	sub	sp, #84	@ 0x54
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	330c      	adds	r3, #12
 8007ed0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed4:	e853 3f00 	ldrex	r3, [r3]
 8007ed8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007edc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ee0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	330c      	adds	r3, #12
 8007ee8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007eea:	643a      	str	r2, [r7, #64]	@ 0x40
 8007eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ef0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ef2:	e841 2300 	strex	r3, r2, [r1]
 8007ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1e5      	bne.n	8007eca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	3314      	adds	r3, #20
 8007f04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	e853 3f00 	ldrex	r3, [r3]
 8007f0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	f023 0301 	bic.w	r3, r3, #1
 8007f14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	3314      	adds	r3, #20
 8007f1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f26:	e841 2300 	strex	r3, r2, [r1]
 8007f2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1e5      	bne.n	8007efe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d119      	bne.n	8007f6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	330c      	adds	r3, #12
 8007f40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	e853 3f00 	ldrex	r3, [r3]
 8007f48:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	f023 0310 	bic.w	r3, r3, #16
 8007f50:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	330c      	adds	r3, #12
 8007f58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f5a:	61ba      	str	r2, [r7, #24]
 8007f5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5e:	6979      	ldr	r1, [r7, #20]
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	e841 2300 	strex	r3, r2, [r1]
 8007f66:	613b      	str	r3, [r7, #16]
   return(result);
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1e5      	bne.n	8007f3a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2220      	movs	r2, #32
 8007f72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007f7c:	bf00      	nop
 8007f7e:	3754      	adds	r7, #84	@ 0x54
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f7ff fee7 	bl	8007d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fa2:	bf00      	nop
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b085      	sub	sp, #20
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b21      	cmp	r3, #33	@ 0x21
 8007fbc:	d13e      	bne.n	800803c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fc6:	d114      	bne.n	8007ff2 <UART_Transmit_IT+0x48>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d110      	bne.n	8007ff2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a1b      	ldr	r3, [r3, #32]
 8007fd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	881b      	ldrh	r3, [r3, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fe4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	1c9a      	adds	r2, r3, #2
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	621a      	str	r2, [r3, #32]
 8007ff0:	e008      	b.n	8008004 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	1c59      	adds	r1, r3, #1
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	6211      	str	r1, [r2, #32]
 8007ffc:	781a      	ldrb	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008008:	b29b      	uxth	r3, r3
 800800a:	3b01      	subs	r3, #1
 800800c:	b29b      	uxth	r3, r3
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	4619      	mov	r1, r3
 8008012:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008014:	2b00      	cmp	r3, #0
 8008016:	d10f      	bne.n	8008038 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68da      	ldr	r2, [r3, #12]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008026:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008036:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008038:	2300      	movs	r3, #0
 800803a:	e000      	b.n	800803e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800803c:	2302      	movs	r3, #2
  }
}
 800803e:	4618      	mov	r0, r3
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b082      	sub	sp, #8
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68da      	ldr	r2, [r3, #12]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008060:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2220      	movs	r2, #32
 8008066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7ff fe76 	bl	8007d5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b08c      	sub	sp, #48	@ 0x30
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008082:	2300      	movs	r3, #0
 8008084:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8008086:	2300      	movs	r3, #0
 8008088:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b22      	cmp	r3, #34	@ 0x22
 8008094:	f040 80aa 	bne.w	80081ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080a0:	d115      	bne.n	80080ce <UART_Receive_IT+0x54>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d111      	bne.n	80080ce <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080bc:	b29a      	uxth	r2, r3
 80080be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c6:	1c9a      	adds	r2, r3, #2
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80080cc:	e024      	b.n	8008118 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080dc:	d007      	beq.n	80080ee <UART_Receive_IT+0x74>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10a      	bne.n	80080fc <UART_Receive_IT+0x82>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d106      	bne.n	80080fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f8:	701a      	strb	r2, [r3, #0]
 80080fa:	e008      	b.n	800810e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	b2db      	uxtb	r3, r3
 8008104:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008108:	b2da      	uxtb	r2, r3
 800810a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800810c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008112:	1c5a      	adds	r2, r3, #1
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800811c:	b29b      	uxth	r3, r3
 800811e:	3b01      	subs	r3, #1
 8008120:	b29b      	uxth	r3, r3
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	4619      	mov	r1, r3
 8008126:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008128:	2b00      	cmp	r3, #0
 800812a:	d15d      	bne.n	80081e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68da      	ldr	r2, [r3, #12]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f022 0220 	bic.w	r2, r2, #32
 800813a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68da      	ldr	r2, [r3, #12]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800814a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	695a      	ldr	r2, [r3, #20]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f022 0201 	bic.w	r2, r2, #1
 800815a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2220      	movs	r2, #32
 8008160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800816e:	2b01      	cmp	r3, #1
 8008170:	d135      	bne.n	80081de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	330c      	adds	r3, #12
 800817e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	e853 3f00 	ldrex	r3, [r3]
 8008186:	613b      	str	r3, [r7, #16]
   return(result);
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	f023 0310 	bic.w	r3, r3, #16
 800818e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	330c      	adds	r3, #12
 8008196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008198:	623a      	str	r2, [r7, #32]
 800819a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819c:	69f9      	ldr	r1, [r7, #28]
 800819e:	6a3a      	ldr	r2, [r7, #32]
 80081a0:	e841 2300 	strex	r3, r2, [r1]
 80081a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1e5      	bne.n	8008178 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 0310 	and.w	r3, r3, #16
 80081b6:	2b10      	cmp	r3, #16
 80081b8:	d10a      	bne.n	80081d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081ba:	2300      	movs	r3, #0
 80081bc:	60fb      	str	r3, [r7, #12]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	60fb      	str	r3, [r7, #12]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80081d4:	4619      	mov	r1, r3
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f7ff fdd4 	bl	8007d84 <HAL_UARTEx_RxEventCallback>
 80081dc:	e002      	b.n	80081e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f7fa f98a 	bl	80024f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	e002      	b.n	80081ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80081e8:	2300      	movs	r3, #0
 80081ea:	e000      	b.n	80081ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80081ec:	2302      	movs	r3, #2
  }
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3730      	adds	r7, #48	@ 0x30
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
	...

080081f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081fc:	b0c0      	sub	sp, #256	@ 0x100
 80081fe:	af00      	add	r7, sp, #0
 8008200:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008214:	68d9      	ldr	r1, [r3, #12]
 8008216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	ea40 0301 	orr.w	r3, r0, r1
 8008220:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008226:	689a      	ldr	r2, [r3, #8]
 8008228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	431a      	orrs	r2, r3
 8008230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	431a      	orrs	r2, r3
 8008238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800823c:	69db      	ldr	r3, [r3, #28]
 800823e:	4313      	orrs	r3, r2
 8008240:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008250:	f021 010c 	bic.w	r1, r1, #12
 8008254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800825e:	430b      	orrs	r3, r1
 8008260:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800826e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008272:	6999      	ldr	r1, [r3, #24]
 8008274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	ea40 0301 	orr.w	r3, r0, r1
 800827e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	4b8f      	ldr	r3, [pc, #572]	@ (80084c4 <UART_SetConfig+0x2cc>)
 8008288:	429a      	cmp	r2, r3
 800828a:	d005      	beq.n	8008298 <UART_SetConfig+0xa0>
 800828c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	4b8d      	ldr	r3, [pc, #564]	@ (80084c8 <UART_SetConfig+0x2d0>)
 8008294:	429a      	cmp	r2, r3
 8008296:	d104      	bne.n	80082a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008298:	f7fe fd0a 	bl	8006cb0 <HAL_RCC_GetPCLK2Freq>
 800829c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80082a0:	e003      	b.n	80082aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80082a2:	f7fe fcf1 	bl	8006c88 <HAL_RCC_GetPCLK1Freq>
 80082a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082ae:	69db      	ldr	r3, [r3, #28]
 80082b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082b4:	f040 810c 	bne.w	80084d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082bc:	2200      	movs	r2, #0
 80082be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80082c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80082c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80082ca:	4622      	mov	r2, r4
 80082cc:	462b      	mov	r3, r5
 80082ce:	1891      	adds	r1, r2, r2
 80082d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80082d2:	415b      	adcs	r3, r3
 80082d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80082da:	4621      	mov	r1, r4
 80082dc:	eb12 0801 	adds.w	r8, r2, r1
 80082e0:	4629      	mov	r1, r5
 80082e2:	eb43 0901 	adc.w	r9, r3, r1
 80082e6:	f04f 0200 	mov.w	r2, #0
 80082ea:	f04f 0300 	mov.w	r3, #0
 80082ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082fa:	4690      	mov	r8, r2
 80082fc:	4699      	mov	r9, r3
 80082fe:	4623      	mov	r3, r4
 8008300:	eb18 0303 	adds.w	r3, r8, r3
 8008304:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008308:	462b      	mov	r3, r5
 800830a:	eb49 0303 	adc.w	r3, r9, r3
 800830e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800831e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008322:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008326:	460b      	mov	r3, r1
 8008328:	18db      	adds	r3, r3, r3
 800832a:	653b      	str	r3, [r7, #80]	@ 0x50
 800832c:	4613      	mov	r3, r2
 800832e:	eb42 0303 	adc.w	r3, r2, r3
 8008332:	657b      	str	r3, [r7, #84]	@ 0x54
 8008334:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008338:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800833c:	f7f7 ffa0 	bl	8000280 <__aeabi_uldivmod>
 8008340:	4602      	mov	r2, r0
 8008342:	460b      	mov	r3, r1
 8008344:	4b61      	ldr	r3, [pc, #388]	@ (80084cc <UART_SetConfig+0x2d4>)
 8008346:	fba3 2302 	umull	r2, r3, r3, r2
 800834a:	095b      	lsrs	r3, r3, #5
 800834c:	011c      	lsls	r4, r3, #4
 800834e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008352:	2200      	movs	r2, #0
 8008354:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008358:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800835c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008360:	4642      	mov	r2, r8
 8008362:	464b      	mov	r3, r9
 8008364:	1891      	adds	r1, r2, r2
 8008366:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008368:	415b      	adcs	r3, r3
 800836a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800836c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008370:	4641      	mov	r1, r8
 8008372:	eb12 0a01 	adds.w	sl, r2, r1
 8008376:	4649      	mov	r1, r9
 8008378:	eb43 0b01 	adc.w	fp, r3, r1
 800837c:	f04f 0200 	mov.w	r2, #0
 8008380:	f04f 0300 	mov.w	r3, #0
 8008384:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008388:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800838c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008390:	4692      	mov	sl, r2
 8008392:	469b      	mov	fp, r3
 8008394:	4643      	mov	r3, r8
 8008396:	eb1a 0303 	adds.w	r3, sl, r3
 800839a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800839e:	464b      	mov	r3, r9
 80083a0:	eb4b 0303 	adc.w	r3, fp, r3
 80083a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80083a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80083b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80083b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80083bc:	460b      	mov	r3, r1
 80083be:	18db      	adds	r3, r3, r3
 80083c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80083c2:	4613      	mov	r3, r2
 80083c4:	eb42 0303 	adc.w	r3, r2, r3
 80083c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80083ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80083ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80083d2:	f7f7 ff55 	bl	8000280 <__aeabi_uldivmod>
 80083d6:	4602      	mov	r2, r0
 80083d8:	460b      	mov	r3, r1
 80083da:	4611      	mov	r1, r2
 80083dc:	4b3b      	ldr	r3, [pc, #236]	@ (80084cc <UART_SetConfig+0x2d4>)
 80083de:	fba3 2301 	umull	r2, r3, r3, r1
 80083e2:	095b      	lsrs	r3, r3, #5
 80083e4:	2264      	movs	r2, #100	@ 0x64
 80083e6:	fb02 f303 	mul.w	r3, r2, r3
 80083ea:	1acb      	subs	r3, r1, r3
 80083ec:	00db      	lsls	r3, r3, #3
 80083ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80083f2:	4b36      	ldr	r3, [pc, #216]	@ (80084cc <UART_SetConfig+0x2d4>)
 80083f4:	fba3 2302 	umull	r2, r3, r3, r2
 80083f8:	095b      	lsrs	r3, r3, #5
 80083fa:	005b      	lsls	r3, r3, #1
 80083fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008400:	441c      	add	r4, r3
 8008402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008406:	2200      	movs	r2, #0
 8008408:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800840c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008410:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008414:	4642      	mov	r2, r8
 8008416:	464b      	mov	r3, r9
 8008418:	1891      	adds	r1, r2, r2
 800841a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800841c:	415b      	adcs	r3, r3
 800841e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008420:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008424:	4641      	mov	r1, r8
 8008426:	1851      	adds	r1, r2, r1
 8008428:	6339      	str	r1, [r7, #48]	@ 0x30
 800842a:	4649      	mov	r1, r9
 800842c:	414b      	adcs	r3, r1
 800842e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008430:	f04f 0200 	mov.w	r2, #0
 8008434:	f04f 0300 	mov.w	r3, #0
 8008438:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800843c:	4659      	mov	r1, fp
 800843e:	00cb      	lsls	r3, r1, #3
 8008440:	4651      	mov	r1, sl
 8008442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008446:	4651      	mov	r1, sl
 8008448:	00ca      	lsls	r2, r1, #3
 800844a:	4610      	mov	r0, r2
 800844c:	4619      	mov	r1, r3
 800844e:	4603      	mov	r3, r0
 8008450:	4642      	mov	r2, r8
 8008452:	189b      	adds	r3, r3, r2
 8008454:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008458:	464b      	mov	r3, r9
 800845a:	460a      	mov	r2, r1
 800845c:	eb42 0303 	adc.w	r3, r2, r3
 8008460:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008470:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008474:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008478:	460b      	mov	r3, r1
 800847a:	18db      	adds	r3, r3, r3
 800847c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800847e:	4613      	mov	r3, r2
 8008480:	eb42 0303 	adc.w	r3, r2, r3
 8008484:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008486:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800848a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800848e:	f7f7 fef7 	bl	8000280 <__aeabi_uldivmod>
 8008492:	4602      	mov	r2, r0
 8008494:	460b      	mov	r3, r1
 8008496:	4b0d      	ldr	r3, [pc, #52]	@ (80084cc <UART_SetConfig+0x2d4>)
 8008498:	fba3 1302 	umull	r1, r3, r3, r2
 800849c:	095b      	lsrs	r3, r3, #5
 800849e:	2164      	movs	r1, #100	@ 0x64
 80084a0:	fb01 f303 	mul.w	r3, r1, r3
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	00db      	lsls	r3, r3, #3
 80084a8:	3332      	adds	r3, #50	@ 0x32
 80084aa:	4a08      	ldr	r2, [pc, #32]	@ (80084cc <UART_SetConfig+0x2d4>)
 80084ac:	fba2 2303 	umull	r2, r3, r2, r3
 80084b0:	095b      	lsrs	r3, r3, #5
 80084b2:	f003 0207 	and.w	r2, r3, #7
 80084b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4422      	add	r2, r4
 80084be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084c0:	e106      	b.n	80086d0 <UART_SetConfig+0x4d8>
 80084c2:	bf00      	nop
 80084c4:	40011000 	.word	0x40011000
 80084c8:	40011400 	.word	0x40011400
 80084cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084d4:	2200      	movs	r2, #0
 80084d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80084da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80084de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80084e2:	4642      	mov	r2, r8
 80084e4:	464b      	mov	r3, r9
 80084e6:	1891      	adds	r1, r2, r2
 80084e8:	6239      	str	r1, [r7, #32]
 80084ea:	415b      	adcs	r3, r3
 80084ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80084ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084f2:	4641      	mov	r1, r8
 80084f4:	1854      	adds	r4, r2, r1
 80084f6:	4649      	mov	r1, r9
 80084f8:	eb43 0501 	adc.w	r5, r3, r1
 80084fc:	f04f 0200 	mov.w	r2, #0
 8008500:	f04f 0300 	mov.w	r3, #0
 8008504:	00eb      	lsls	r3, r5, #3
 8008506:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800850a:	00e2      	lsls	r2, r4, #3
 800850c:	4614      	mov	r4, r2
 800850e:	461d      	mov	r5, r3
 8008510:	4643      	mov	r3, r8
 8008512:	18e3      	adds	r3, r4, r3
 8008514:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008518:	464b      	mov	r3, r9
 800851a:	eb45 0303 	adc.w	r3, r5, r3
 800851e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800852e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008532:	f04f 0200 	mov.w	r2, #0
 8008536:	f04f 0300 	mov.w	r3, #0
 800853a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800853e:	4629      	mov	r1, r5
 8008540:	008b      	lsls	r3, r1, #2
 8008542:	4621      	mov	r1, r4
 8008544:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008548:	4621      	mov	r1, r4
 800854a:	008a      	lsls	r2, r1, #2
 800854c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008550:	f7f7 fe96 	bl	8000280 <__aeabi_uldivmod>
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	4b60      	ldr	r3, [pc, #384]	@ (80086dc <UART_SetConfig+0x4e4>)
 800855a:	fba3 2302 	umull	r2, r3, r3, r2
 800855e:	095b      	lsrs	r3, r3, #5
 8008560:	011c      	lsls	r4, r3, #4
 8008562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008566:	2200      	movs	r2, #0
 8008568:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800856c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008570:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008574:	4642      	mov	r2, r8
 8008576:	464b      	mov	r3, r9
 8008578:	1891      	adds	r1, r2, r2
 800857a:	61b9      	str	r1, [r7, #24]
 800857c:	415b      	adcs	r3, r3
 800857e:	61fb      	str	r3, [r7, #28]
 8008580:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008584:	4641      	mov	r1, r8
 8008586:	1851      	adds	r1, r2, r1
 8008588:	6139      	str	r1, [r7, #16]
 800858a:	4649      	mov	r1, r9
 800858c:	414b      	adcs	r3, r1
 800858e:	617b      	str	r3, [r7, #20]
 8008590:	f04f 0200 	mov.w	r2, #0
 8008594:	f04f 0300 	mov.w	r3, #0
 8008598:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800859c:	4659      	mov	r1, fp
 800859e:	00cb      	lsls	r3, r1, #3
 80085a0:	4651      	mov	r1, sl
 80085a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085a6:	4651      	mov	r1, sl
 80085a8:	00ca      	lsls	r2, r1, #3
 80085aa:	4610      	mov	r0, r2
 80085ac:	4619      	mov	r1, r3
 80085ae:	4603      	mov	r3, r0
 80085b0:	4642      	mov	r2, r8
 80085b2:	189b      	adds	r3, r3, r2
 80085b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80085b8:	464b      	mov	r3, r9
 80085ba:	460a      	mov	r2, r1
 80085bc:	eb42 0303 	adc.w	r3, r2, r3
 80085c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80085c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80085ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80085d0:	f04f 0200 	mov.w	r2, #0
 80085d4:	f04f 0300 	mov.w	r3, #0
 80085d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80085dc:	4649      	mov	r1, r9
 80085de:	008b      	lsls	r3, r1, #2
 80085e0:	4641      	mov	r1, r8
 80085e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085e6:	4641      	mov	r1, r8
 80085e8:	008a      	lsls	r2, r1, #2
 80085ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80085ee:	f7f7 fe47 	bl	8000280 <__aeabi_uldivmod>
 80085f2:	4602      	mov	r2, r0
 80085f4:	460b      	mov	r3, r1
 80085f6:	4611      	mov	r1, r2
 80085f8:	4b38      	ldr	r3, [pc, #224]	@ (80086dc <UART_SetConfig+0x4e4>)
 80085fa:	fba3 2301 	umull	r2, r3, r3, r1
 80085fe:	095b      	lsrs	r3, r3, #5
 8008600:	2264      	movs	r2, #100	@ 0x64
 8008602:	fb02 f303 	mul.w	r3, r2, r3
 8008606:	1acb      	subs	r3, r1, r3
 8008608:	011b      	lsls	r3, r3, #4
 800860a:	3332      	adds	r3, #50	@ 0x32
 800860c:	4a33      	ldr	r2, [pc, #204]	@ (80086dc <UART_SetConfig+0x4e4>)
 800860e:	fba2 2303 	umull	r2, r3, r2, r3
 8008612:	095b      	lsrs	r3, r3, #5
 8008614:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008618:	441c      	add	r4, r3
 800861a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800861e:	2200      	movs	r2, #0
 8008620:	673b      	str	r3, [r7, #112]	@ 0x70
 8008622:	677a      	str	r2, [r7, #116]	@ 0x74
 8008624:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008628:	4642      	mov	r2, r8
 800862a:	464b      	mov	r3, r9
 800862c:	1891      	adds	r1, r2, r2
 800862e:	60b9      	str	r1, [r7, #8]
 8008630:	415b      	adcs	r3, r3
 8008632:	60fb      	str	r3, [r7, #12]
 8008634:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008638:	4641      	mov	r1, r8
 800863a:	1851      	adds	r1, r2, r1
 800863c:	6039      	str	r1, [r7, #0]
 800863e:	4649      	mov	r1, r9
 8008640:	414b      	adcs	r3, r1
 8008642:	607b      	str	r3, [r7, #4]
 8008644:	f04f 0200 	mov.w	r2, #0
 8008648:	f04f 0300 	mov.w	r3, #0
 800864c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008650:	4659      	mov	r1, fp
 8008652:	00cb      	lsls	r3, r1, #3
 8008654:	4651      	mov	r1, sl
 8008656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800865a:	4651      	mov	r1, sl
 800865c:	00ca      	lsls	r2, r1, #3
 800865e:	4610      	mov	r0, r2
 8008660:	4619      	mov	r1, r3
 8008662:	4603      	mov	r3, r0
 8008664:	4642      	mov	r2, r8
 8008666:	189b      	adds	r3, r3, r2
 8008668:	66bb      	str	r3, [r7, #104]	@ 0x68
 800866a:	464b      	mov	r3, r9
 800866c:	460a      	mov	r2, r1
 800866e:	eb42 0303 	adc.w	r3, r2, r3
 8008672:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	663b      	str	r3, [r7, #96]	@ 0x60
 800867e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008680:	f04f 0200 	mov.w	r2, #0
 8008684:	f04f 0300 	mov.w	r3, #0
 8008688:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800868c:	4649      	mov	r1, r9
 800868e:	008b      	lsls	r3, r1, #2
 8008690:	4641      	mov	r1, r8
 8008692:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008696:	4641      	mov	r1, r8
 8008698:	008a      	lsls	r2, r1, #2
 800869a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800869e:	f7f7 fdef 	bl	8000280 <__aeabi_uldivmod>
 80086a2:	4602      	mov	r2, r0
 80086a4:	460b      	mov	r3, r1
 80086a6:	4b0d      	ldr	r3, [pc, #52]	@ (80086dc <UART_SetConfig+0x4e4>)
 80086a8:	fba3 1302 	umull	r1, r3, r3, r2
 80086ac:	095b      	lsrs	r3, r3, #5
 80086ae:	2164      	movs	r1, #100	@ 0x64
 80086b0:	fb01 f303 	mul.w	r3, r1, r3
 80086b4:	1ad3      	subs	r3, r2, r3
 80086b6:	011b      	lsls	r3, r3, #4
 80086b8:	3332      	adds	r3, #50	@ 0x32
 80086ba:	4a08      	ldr	r2, [pc, #32]	@ (80086dc <UART_SetConfig+0x4e4>)
 80086bc:	fba2 2303 	umull	r2, r3, r2, r3
 80086c0:	095b      	lsrs	r3, r3, #5
 80086c2:	f003 020f 	and.w	r2, r3, #15
 80086c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4422      	add	r2, r4
 80086ce:	609a      	str	r2, [r3, #8]
}
 80086d0:	bf00      	nop
 80086d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80086d6:	46bd      	mov	sp, r7
 80086d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086dc:	51eb851f 	.word	0x51eb851f

080086e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80086e0:	b084      	sub	sp, #16
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	f107 001c 	add.w	r0, r7, #28
 80086ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80086f2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d123      	bne.n	8008742 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800870e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008722:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008726:	2b01      	cmp	r3, #1
 8008728:	d105      	bne.n	8008736 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f9dc 	bl	8008af4 <USB_CoreReset>
 800873c:	4603      	mov	r3, r0
 800873e:	73fb      	strb	r3, [r7, #15]
 8008740:	e01b      	b.n	800877a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f9d0 	bl	8008af4 <USB_CoreReset>
 8008754:	4603      	mov	r3, r0
 8008756:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008758:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800875c:	2b00      	cmp	r3, #0
 800875e:	d106      	bne.n	800876e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008764:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	639a      	str	r2, [r3, #56]	@ 0x38
 800876c:	e005      	b.n	800877a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008772:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800877a:	7fbb      	ldrb	r3, [r7, #30]
 800877c:	2b01      	cmp	r3, #1
 800877e:	d10b      	bne.n	8008798 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	f043 0206 	orr.w	r2, r3, #6
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	f043 0220 	orr.w	r2, r3, #32
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008798:	7bfb      	ldrb	r3, [r7, #15]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087a4:	b004      	add	sp, #16
 80087a6:	4770      	bx	lr

080087a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	f043 0201 	orr.w	r2, r3, #1
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	370c      	adds	r7, #12
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087ca:	b480      	push	{r7}
 80087cc:	b083      	sub	sp, #12
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	f023 0201 	bic.w	r2, r3, #1
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	460b      	mov	r3, r1
 80087f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80087f8:	2300      	movs	r3, #0
 80087fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008808:	78fb      	ldrb	r3, [r7, #3]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d115      	bne.n	800883a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800881a:	200a      	movs	r0, #10
 800881c:	f7fa fb08 	bl	8002e30 <HAL_Delay>
      ms += 10U;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	330a      	adds	r3, #10
 8008824:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f956 	bl	8008ad8 <USB_GetMode>
 800882c:	4603      	mov	r3, r0
 800882e:	2b01      	cmp	r3, #1
 8008830:	d01e      	beq.n	8008870 <USB_SetCurrentMode+0x84>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2bc7      	cmp	r3, #199	@ 0xc7
 8008836:	d9f0      	bls.n	800881a <USB_SetCurrentMode+0x2e>
 8008838:	e01a      	b.n	8008870 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800883a:	78fb      	ldrb	r3, [r7, #3]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d115      	bne.n	800886c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800884c:	200a      	movs	r0, #10
 800884e:	f7fa faef 	bl	8002e30 <HAL_Delay>
      ms += 10U;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	330a      	adds	r3, #10
 8008856:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f93d 	bl	8008ad8 <USB_GetMode>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d005      	beq.n	8008870 <USB_SetCurrentMode+0x84>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2bc7      	cmp	r3, #199	@ 0xc7
 8008868:	d9f0      	bls.n	800884c <USB_SetCurrentMode+0x60>
 800886a:	e001      	b.n	8008870 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	e005      	b.n	800887c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2bc8      	cmp	r3, #200	@ 0xc8
 8008874:	d101      	bne.n	800887a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e000      	b.n	800887c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800888e:	2300      	movs	r3, #0
 8008890:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	3301      	adds	r3, #1
 8008896:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800889e:	d901      	bls.n	80088a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e01b      	b.n	80088dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	daf2      	bge.n	8008892 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80088ac:	2300      	movs	r3, #0
 80088ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	019b      	lsls	r3, r3, #6
 80088b4:	f043 0220 	orr.w	r2, r3, #32
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	3301      	adds	r3, #1
 80088c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80088c8:	d901      	bls.n	80088ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e006      	b.n	80088dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	f003 0320 	and.w	r3, r3, #32
 80088d6:	2b20      	cmp	r3, #32
 80088d8:	d0f0      	beq.n	80088bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3714      	adds	r7, #20
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088f0:	2300      	movs	r3, #0
 80088f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	3301      	adds	r3, #1
 80088f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008900:	d901      	bls.n	8008906 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008902:	2303      	movs	r3, #3
 8008904:	e018      	b.n	8008938 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	2b00      	cmp	r3, #0
 800890c:	daf2      	bge.n	80088f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800890e:	2300      	movs	r3, #0
 8008910:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2210      	movs	r2, #16
 8008916:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	3301      	adds	r3, #1
 800891c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008924:	d901      	bls.n	800892a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008926:	2303      	movs	r3, #3
 8008928:	e006      	b.n	8008938 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	691b      	ldr	r3, [r3, #16]
 800892e:	f003 0310 	and.w	r3, r3, #16
 8008932:	2b10      	cmp	r3, #16
 8008934:	d0f0      	beq.n	8008918 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	3714      	adds	r7, #20
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008944:	b480      	push	{r7}
 8008946:	b089      	sub	sp, #36	@ 0x24
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	4611      	mov	r1, r2
 8008950:	461a      	mov	r2, r3
 8008952:	460b      	mov	r3, r1
 8008954:	71fb      	strb	r3, [r7, #7]
 8008956:	4613      	mov	r3, r2
 8008958:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008962:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008966:	2b00      	cmp	r3, #0
 8008968:	d123      	bne.n	80089b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800896a:	88bb      	ldrh	r3, [r7, #4]
 800896c:	3303      	adds	r3, #3
 800896e:	089b      	lsrs	r3, r3, #2
 8008970:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008972:	2300      	movs	r3, #0
 8008974:	61bb      	str	r3, [r7, #24]
 8008976:	e018      	b.n	80089aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008978:	79fb      	ldrb	r3, [r7, #7]
 800897a:	031a      	lsls	r2, r3, #12
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	4413      	add	r3, r2
 8008980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008984:	461a      	mov	r2, r3
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	3301      	adds	r3, #1
 8008990:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	3301      	adds	r3, #1
 8008996:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	3301      	adds	r3, #1
 800899c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	3301      	adds	r3, #1
 80089a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	3301      	adds	r3, #1
 80089a8:	61bb      	str	r3, [r7, #24]
 80089aa:	69ba      	ldr	r2, [r7, #24]
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d3e2      	bcc.n	8008978 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3724      	adds	r7, #36	@ 0x24
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b08b      	sub	sp, #44	@ 0x2c
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	4613      	mov	r3, r2
 80089cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80089d6:	88fb      	ldrh	r3, [r7, #6]
 80089d8:	089b      	lsrs	r3, r3, #2
 80089da:	b29b      	uxth	r3, r3
 80089dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80089de:	88fb      	ldrh	r3, [r7, #6]
 80089e0:	f003 0303 	and.w	r3, r3, #3
 80089e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80089e6:	2300      	movs	r3, #0
 80089e8:	623b      	str	r3, [r7, #32]
 80089ea:	e014      	b.n	8008a16 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80089f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089fa:	3301      	adds	r3, #1
 80089fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80089fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a00:	3301      	adds	r3, #1
 8008a02:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a06:	3301      	adds	r3, #1
 8008a08:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008a10:	6a3b      	ldr	r3, [r7, #32]
 8008a12:	3301      	adds	r3, #1
 8008a14:	623b      	str	r3, [r7, #32]
 8008a16:	6a3a      	ldr	r2, [r7, #32]
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d3e6      	bcc.n	80089ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008a1e:	8bfb      	ldrh	r3, [r7, #30]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d01e      	beq.n	8008a62 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008a24:	2300      	movs	r3, #0
 8008a26:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a2e:	461a      	mov	r2, r3
 8008a30:	f107 0310 	add.w	r3, r7, #16
 8008a34:	6812      	ldr	r2, [r2, #0]
 8008a36:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008a38:	693a      	ldr	r2, [r7, #16]
 8008a3a:	6a3b      	ldr	r3, [r7, #32]
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	00db      	lsls	r3, r3, #3
 8008a40:	fa22 f303 	lsr.w	r3, r2, r3
 8008a44:	b2da      	uxtb	r2, r3
 8008a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a48:	701a      	strb	r2, [r3, #0]
      i++;
 8008a4a:	6a3b      	ldr	r3, [r7, #32]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a52:	3301      	adds	r3, #1
 8008a54:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008a56:	8bfb      	ldrh	r3, [r7, #30]
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008a5c:	8bfb      	ldrh	r3, [r7, #30]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1ea      	bne.n	8008a38 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	372c      	adds	r7, #44	@ 0x2c
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	695b      	ldr	r3, [r3, #20]
 8008a7c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	699b      	ldr	r3, [r3, #24]
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	4013      	ands	r3, r2
 8008a86:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a88:	68fb      	ldr	r3, [r7, #12]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3714      	adds	r7, #20
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr

08008a96 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b085      	sub	sp, #20
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008aa6:	78fb      	ldrb	r3, [r7, #3]
 8008aa8:	015a      	lsls	r2, r3, #5
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008ab6:	78fb      	ldrb	r3, [r7, #3]
 8008ab8:	015a      	lsls	r2, r3, #5
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	4413      	add	r3, r2
 8008abe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	68ba      	ldr	r2, [r7, #8]
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008aca:	68bb      	ldr	r3, [r7, #8]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3714      	adds	r7, #20
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	695b      	ldr	r3, [r3, #20]
 8008ae4:	f003 0301 	and.w	r3, r3, #1
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008afc:	2300      	movs	r3, #0
 8008afe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	3301      	adds	r3, #1
 8008b04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b0c:	d901      	bls.n	8008b12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	e022      	b.n	8008b58 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	daf2      	bge.n	8008b00 <USB_CoreReset+0xc>

  count = 10U;
 8008b1a:	230a      	movs	r3, #10
 8008b1c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8008b1e:	e002      	b.n	8008b26 <USB_CoreReset+0x32>
  {
    count--;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	3b01      	subs	r3, #1
 8008b24:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1f9      	bne.n	8008b20 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	f043 0201 	orr.w	r2, r3, #1
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b44:	d901      	bls.n	8008b4a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e006      	b.n	8008b58 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	f003 0301 	and.w	r3, r3, #1
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d0f0      	beq.n	8008b38 <USB_CoreReset+0x44>

  return HAL_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3714      	adds	r7, #20
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b64:	b084      	sub	sp, #16
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b086      	sub	sp, #24
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008b72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b76:	2300      	movs	r3, #0
 8008b78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b84:	461a      	mov	r2, r3
 8008b86:	2300      	movs	r3, #0
 8008b88:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b8e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b9a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ba6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d119      	bne.n	8008bee <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008bba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d10a      	bne.n	8008bd8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008bd0:	f043 0304 	orr.w	r3, r3, #4
 8008bd4:	6013      	str	r3, [r2, #0]
 8008bd6:	e014      	b.n	8008c02 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008be6:	f023 0304 	bic.w	r3, r3, #4
 8008bea:	6013      	str	r3, [r2, #0]
 8008bec:	e009      	b.n	8008c02 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008bfc:	f023 0304 	bic.w	r3, r3, #4
 8008c00:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c02:	2110      	movs	r1, #16
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f7ff fe3d 	bl	8008884 <USB_FlushTxFifo>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d001      	beq.n	8008c14 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f7ff fe67 	bl	80088e8 <USB_FlushRxFifo>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d001      	beq.n	8008c24 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008c24:	2300      	movs	r3, #0
 8008c26:	613b      	str	r3, [r7, #16]
 8008c28:	e015      	b.n	8008c56 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	015a      	lsls	r2, r3, #5
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	4413      	add	r3, r2
 8008c32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c36:	461a      	mov	r2, r3
 8008c38:	f04f 33ff 	mov.w	r3, #4294967295
 8008c3c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	015a      	lsls	r2, r3, #5
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	4413      	add	r3, r2
 8008c46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	3301      	adds	r3, #1
 8008c54:	613b      	str	r3, [r7, #16]
 8008c56:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d3e3      	bcc.n	8008c2a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c6e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a18      	ldr	r2, [pc, #96]	@ (8008cd4 <USB_HostInit+0x170>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d10b      	bne.n	8008c90 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c7e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a15      	ldr	r2, [pc, #84]	@ (8008cd8 <USB_HostInit+0x174>)
 8008c84:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a14      	ldr	r2, [pc, #80]	@ (8008cdc <USB_HostInit+0x178>)
 8008c8a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008c8e:	e009      	b.n	8008ca4 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2280      	movs	r2, #128	@ 0x80
 8008c94:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a11      	ldr	r2, [pc, #68]	@ (8008ce0 <USB_HostInit+0x17c>)
 8008c9a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a11      	ldr	r2, [pc, #68]	@ (8008ce4 <USB_HostInit+0x180>)
 8008ca0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008ca4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d105      	bne.n	8008cb8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	f043 0210 	orr.w	r2, r3, #16
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	699a      	ldr	r2, [r3, #24]
 8008cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8008ce8 <USB_HostInit+0x184>)
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3718      	adds	r7, #24
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008cd0:	b004      	add	sp, #16
 8008cd2:	4770      	bx	lr
 8008cd4:	40040000 	.word	0x40040000
 8008cd8:	01000200 	.word	0x01000200
 8008cdc:	00e00300 	.word	0x00e00300
 8008ce0:	00600080 	.word	0x00600080
 8008ce4:	004000e0 	.word	0x004000e0
 8008ce8:	a3200008 	.word	0xa3200008

08008cec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008d0a:	f023 0303 	bic.w	r3, r3, #3
 8008d0e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	78fb      	ldrb	r3, [r7, #3]
 8008d1a:	f003 0303 	and.w	r3, r3, #3
 8008d1e:	68f9      	ldr	r1, [r7, #12]
 8008d20:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008d24:	4313      	orrs	r3, r2
 8008d26:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008d28:	78fb      	ldrb	r3, [r7, #3]
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d107      	bne.n	8008d3e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d34:	461a      	mov	r2, r3
 8008d36:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008d3a:	6053      	str	r3, [r2, #4]
 8008d3c:	e00c      	b.n	8008d58 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008d3e:	78fb      	ldrb	r3, [r7, #3]
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d107      	bne.n	8008d54 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008d50:	6053      	str	r3, [r2, #4]
 8008d52:	e001      	b.n	8008d58 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	e000      	b.n	8008d5a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3714      	adds	r7, #20
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr

08008d66 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008d72:	2300      	movs	r3, #0
 8008d74:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008d86:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008d90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d94:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008d96:	2064      	movs	r0, #100	@ 0x64
 8008d98:	f7fa f84a 	bl	8002e30 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008da4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008da8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008daa:	200a      	movs	r0, #10
 8008dac:	f7fa f840 	bl	8002e30 <HAL_Delay>

  return HAL_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b085      	sub	sp, #20
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008dde:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d109      	bne.n	8008dfe <USB_DriveVbus+0x44>
 8008dea:	78fb      	ldrb	r3, [r7, #3]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d106      	bne.n	8008dfe <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008df8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008dfc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008e04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e08:	d109      	bne.n	8008e1e <USB_DriveVbus+0x64>
 8008e0a:	78fb      	ldrb	r3, [r7, #3]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d106      	bne.n	8008e1e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008e18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e1c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3714      	adds	r7, #20
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	0c5b      	lsrs	r3, r3, #17
 8008e4a:	f003 0303 	and.w	r3, r3, #3
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3714      	adds	r7, #20
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr

08008e5a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8008e5a:	b480      	push	{r7}
 8008e5c:	b085      	sub	sp, #20
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	b29b      	uxth	r3, r3
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3714      	adds	r7, #20
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b088      	sub	sp, #32
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	4608      	mov	r0, r1
 8008e86:	4611      	mov	r1, r2
 8008e88:	461a      	mov	r2, r3
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	70fb      	strb	r3, [r7, #3]
 8008e8e:	460b      	mov	r3, r1
 8008e90:	70bb      	strb	r3, [r7, #2]
 8008e92:	4613      	mov	r3, r2
 8008e94:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e96:	2300      	movs	r3, #0
 8008e98:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008e9e:	78fb      	ldrb	r3, [r7, #3]
 8008ea0:	015a      	lsls	r2, r3, #5
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008eaa:	461a      	mov	r2, r3
 8008eac:	f04f 33ff 	mov.w	r3, #4294967295
 8008eb0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008eb2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008eb6:	2b03      	cmp	r3, #3
 8008eb8:	d87c      	bhi.n	8008fb4 <USB_HC_Init+0x138>
 8008eba:	a201      	add	r2, pc, #4	@ (adr r2, 8008ec0 <USB_HC_Init+0x44>)
 8008ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec0:	08008ed1 	.word	0x08008ed1
 8008ec4:	08008f77 	.word	0x08008f77
 8008ec8:	08008ed1 	.word	0x08008ed1
 8008ecc:	08008f39 	.word	0x08008f39
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008ed0:	78fb      	ldrb	r3, [r7, #3]
 8008ed2:	015a      	lsls	r2, r3, #5
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008edc:	461a      	mov	r2, r3
 8008ede:	f240 439d 	movw	r3, #1181	@ 0x49d
 8008ee2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008ee4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	da10      	bge.n	8008f0e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008eec:	78fb      	ldrb	r3, [r7, #3]
 8008eee:	015a      	lsls	r2, r3, #5
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	78fa      	ldrb	r2, [r7, #3]
 8008efc:	0151      	lsls	r1, r2, #5
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	440a      	add	r2, r1
 8008f02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f0a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008f0c:	e055      	b.n	8008fba <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a6f      	ldr	r2, [pc, #444]	@ (80090d0 <USB_HC_Init+0x254>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d151      	bne.n	8008fba <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008f16:	78fb      	ldrb	r3, [r7, #3]
 8008f18:	015a      	lsls	r2, r3, #5
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	78fa      	ldrb	r2, [r7, #3]
 8008f26:	0151      	lsls	r1, r2, #5
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	440a      	add	r2, r1
 8008f2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f30:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008f34:	60d3      	str	r3, [r2, #12]
      break;
 8008f36:	e040      	b.n	8008fba <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008f38:	78fb      	ldrb	r3, [r7, #3]
 8008f3a:	015a      	lsls	r2, r3, #5
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f44:	461a      	mov	r2, r3
 8008f46:	f240 639d 	movw	r3, #1693	@ 0x69d
 8008f4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008f4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	da34      	bge.n	8008fbe <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008f54:	78fb      	ldrb	r3, [r7, #3]
 8008f56:	015a      	lsls	r2, r3, #5
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	78fa      	ldrb	r2, [r7, #3]
 8008f64:	0151      	lsls	r1, r2, #5
 8008f66:	693a      	ldr	r2, [r7, #16]
 8008f68:	440a      	add	r2, r1
 8008f6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f72:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008f74:	e023      	b.n	8008fbe <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008f76:	78fb      	ldrb	r3, [r7, #3]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f82:	461a      	mov	r2, r3
 8008f84:	f240 2325 	movw	r3, #549	@ 0x225
 8008f88:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008f8a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	da17      	bge.n	8008fc2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008f92:	78fb      	ldrb	r3, [r7, #3]
 8008f94:	015a      	lsls	r2, r3, #5
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	4413      	add	r3, r2
 8008f9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	78fa      	ldrb	r2, [r7, #3]
 8008fa2:	0151      	lsls	r1, r2, #5
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	440a      	add	r2, r1
 8008fa8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008fac:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008fb0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008fb2:	e006      	b.n	8008fc2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	77fb      	strb	r3, [r7, #31]
      break;
 8008fb8:	e004      	b.n	8008fc4 <USB_HC_Init+0x148>
      break;
 8008fba:	bf00      	nop
 8008fbc:	e002      	b.n	8008fc4 <USB_HC_Init+0x148>
      break;
 8008fbe:	bf00      	nop
 8008fc0:	e000      	b.n	8008fc4 <USB_HC_Init+0x148>
      break;
 8008fc2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008fc4:	78fb      	ldrb	r3, [r7, #3]
 8008fc6:	015a      	lsls	r2, r3, #5
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	4413      	add	r3, r2
 8008fcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008fd6:	78fb      	ldrb	r3, [r7, #3]
 8008fd8:	015a      	lsls	r2, r3, #5
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	4413      	add	r3, r2
 8008fde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	78fa      	ldrb	r2, [r7, #3]
 8008fe6:	0151      	lsls	r1, r2, #5
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	440a      	add	r2, r1
 8008fec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ff0:	f043 0302 	orr.w	r3, r3, #2
 8008ff4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ffc:	699a      	ldr	r2, [r3, #24]
 8008ffe:	78fb      	ldrb	r3, [r7, #3]
 8009000:	f003 030f 	and.w	r3, r3, #15
 8009004:	2101      	movs	r1, #1
 8009006:	fa01 f303 	lsl.w	r3, r1, r3
 800900a:	6939      	ldr	r1, [r7, #16]
 800900c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009010:	4313      	orrs	r3, r2
 8009012:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009020:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009024:	2b00      	cmp	r3, #0
 8009026:	da03      	bge.n	8009030 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009028:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800902c:	61bb      	str	r3, [r7, #24]
 800902e:	e001      	b.n	8009034 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8009030:	2300      	movs	r3, #0
 8009032:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7ff fef9 	bl	8008e2c <USB_GetHostSpeed>
 800903a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800903c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009040:	2b02      	cmp	r3, #2
 8009042:	d106      	bne.n	8009052 <USB_HC_Init+0x1d6>
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2b02      	cmp	r3, #2
 8009048:	d003      	beq.n	8009052 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800904a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800904e:	617b      	str	r3, [r7, #20]
 8009050:	e001      	b.n	8009056 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009052:	2300      	movs	r3, #0
 8009054:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009056:	787b      	ldrb	r3, [r7, #1]
 8009058:	059b      	lsls	r3, r3, #22
 800905a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800905e:	78bb      	ldrb	r3, [r7, #2]
 8009060:	02db      	lsls	r3, r3, #11
 8009062:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009066:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009068:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800906c:	049b      	lsls	r3, r3, #18
 800906e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009072:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8009074:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009076:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800907a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	431a      	orrs	r2, r3
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009084:	78fa      	ldrb	r2, [r7, #3]
 8009086:	0151      	lsls	r1, r2, #5
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	440a      	add	r2, r1
 800908c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009090:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009094:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009096:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800909a:	2b03      	cmp	r3, #3
 800909c:	d003      	beq.n	80090a6 <USB_HC_Init+0x22a>
 800909e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d10f      	bne.n	80090c6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80090a6:	78fb      	ldrb	r3, [r7, #3]
 80090a8:	015a      	lsls	r2, r3, #5
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	4413      	add	r3, r2
 80090ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	78fa      	ldrb	r2, [r7, #3]
 80090b6:	0151      	lsls	r1, r2, #5
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	440a      	add	r2, r1
 80090bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80090c4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80090c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3720      	adds	r7, #32
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	40040000 	.word	0x40040000

080090d4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b08c      	sub	sp, #48	@ 0x30
 80090d8:	af02      	add	r7, sp, #8
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	4613      	mov	r3, r2
 80090e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	785b      	ldrb	r3, [r3, #1]
 80090ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80090ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80090f0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	4a5d      	ldr	r2, [pc, #372]	@ (800926c <USB_HC_StartXfer+0x198>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d12f      	bne.n	800915a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80090fa:	79fb      	ldrb	r3, [r7, #7]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d11c      	bne.n	800913a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	7c9b      	ldrb	r3, [r3, #18]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d003      	beq.n	8009110 <USB_HC_StartXfer+0x3c>
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	7c9b      	ldrb	r3, [r3, #18]
 800910c:	2b02      	cmp	r3, #2
 800910e:	d124      	bne.n	800915a <USB_HC_StartXfer+0x86>
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	799b      	ldrb	r3, [r3, #6]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d120      	bne.n	800915a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	015a      	lsls	r2, r3, #5
 800911c:	6a3b      	ldr	r3, [r7, #32]
 800911e:	4413      	add	r3, r2
 8009120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	69fa      	ldr	r2, [r7, #28]
 8009128:	0151      	lsls	r1, r2, #5
 800912a:	6a3a      	ldr	r2, [r7, #32]
 800912c:	440a      	add	r2, r1
 800912e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009136:	60d3      	str	r3, [r2, #12]
 8009138:	e00f      	b.n	800915a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	791b      	ldrb	r3, [r3, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d10b      	bne.n	800915a <USB_HC_StartXfer+0x86>
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	795b      	ldrb	r3, [r3, #5]
 8009146:	2b01      	cmp	r3, #1
 8009148:	d107      	bne.n	800915a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	785b      	ldrb	r3, [r3, #1]
 800914e:	4619      	mov	r1, r3
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f000 fb6b 	bl	800982c <USB_DoPing>
        return HAL_OK;
 8009156:	2300      	movs	r3, #0
 8009158:	e232      	b.n	80095c0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	799b      	ldrb	r3, [r3, #6]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d158      	bne.n	8009214 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8009162:	2301      	movs	r3, #1
 8009164:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	78db      	ldrb	r3, [r3, #3]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d007      	beq.n	800917e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800916e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009170:	68ba      	ldr	r2, [r7, #8]
 8009172:	8a92      	ldrh	r2, [r2, #20]
 8009174:	fb03 f202 	mul.w	r2, r3, r2
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	61da      	str	r2, [r3, #28]
 800917c:	e07c      	b.n	8009278 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	7c9b      	ldrb	r3, [r3, #18]
 8009182:	2b01      	cmp	r3, #1
 8009184:	d130      	bne.n	80091e8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	6a1b      	ldr	r3, [r3, #32]
 800918a:	2bbc      	cmp	r3, #188	@ 0xbc
 800918c:	d918      	bls.n	80091c0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	8a9b      	ldrh	r3, [r3, #20]
 8009192:	461a      	mov	r2, r3
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	69da      	ldr	r2, [r3, #28]
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d003      	beq.n	80091b0 <USB_HC_StartXfer+0xdc>
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d103      	bne.n	80091b8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	2202      	movs	r2, #2
 80091b4:	60da      	str	r2, [r3, #12]
 80091b6:	e05f      	b.n	8009278 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	2201      	movs	r2, #1
 80091bc:	60da      	str	r2, [r3, #12]
 80091be:	e05b      	b.n	8009278 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	6a1a      	ldr	r2, [r3, #32]
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d007      	beq.n	80091e0 <USB_HC_StartXfer+0x10c>
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d003      	beq.n	80091e0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2204      	movs	r2, #4
 80091dc:	60da      	str	r2, [r3, #12]
 80091de:	e04b      	b.n	8009278 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	2203      	movs	r2, #3
 80091e4:	60da      	str	r2, [r3, #12]
 80091e6:	e047      	b.n	8009278 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80091e8:	79fb      	ldrb	r3, [r7, #7]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d10d      	bne.n	800920a <USB_HC_StartXfer+0x136>
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	6a1b      	ldr	r3, [r3, #32]
 80091f2:	68ba      	ldr	r2, [r7, #8]
 80091f4:	8a92      	ldrh	r2, [r2, #20]
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d907      	bls.n	800920a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80091fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80091fc:	68ba      	ldr	r2, [r7, #8]
 80091fe:	8a92      	ldrh	r2, [r2, #20]
 8009200:	fb03 f202 	mul.w	r2, r3, r2
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	61da      	str	r2, [r3, #28]
 8009208:	e036      	b.n	8009278 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	6a1a      	ldr	r2, [r3, #32]
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	61da      	str	r2, [r3, #28]
 8009212:	e031      	b.n	8009278 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	6a1b      	ldr	r3, [r3, #32]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d018      	beq.n	800924e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	6a1b      	ldr	r3, [r3, #32]
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	8a92      	ldrh	r2, [r2, #20]
 8009224:	4413      	add	r3, r2
 8009226:	3b01      	subs	r3, #1
 8009228:	68ba      	ldr	r2, [r7, #8]
 800922a:	8a92      	ldrh	r2, [r2, #20]
 800922c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009230:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8009232:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009234:	8b7b      	ldrh	r3, [r7, #26]
 8009236:	429a      	cmp	r2, r3
 8009238:	d90b      	bls.n	8009252 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800923a:	8b7b      	ldrh	r3, [r7, #26]
 800923c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800923e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	8a92      	ldrh	r2, [r2, #20]
 8009244:	fb03 f202 	mul.w	r2, r3, r2
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	61da      	str	r2, [r3, #28]
 800924c:	e001      	b.n	8009252 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800924e:	2301      	movs	r3, #1
 8009250:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	78db      	ldrb	r3, [r3, #3]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00a      	beq.n	8009270 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800925a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	8a92      	ldrh	r2, [r2, #20]
 8009260:	fb03 f202 	mul.w	r2, r3, r2
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	61da      	str	r2, [r3, #28]
 8009268:	e006      	b.n	8009278 <USB_HC_StartXfer+0x1a4>
 800926a:	bf00      	nop
 800926c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	6a1a      	ldr	r2, [r3, #32]
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	69db      	ldr	r3, [r3, #28]
 800927c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009280:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009282:	04d9      	lsls	r1, r3, #19
 8009284:	4ba3      	ldr	r3, [pc, #652]	@ (8009514 <USB_HC_StartXfer+0x440>)
 8009286:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009288:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	7d9b      	ldrb	r3, [r3, #22]
 800928e:	075b      	lsls	r3, r3, #29
 8009290:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009294:	69f9      	ldr	r1, [r7, #28]
 8009296:	0148      	lsls	r0, r1, #5
 8009298:	6a39      	ldr	r1, [r7, #32]
 800929a:	4401      	add	r1, r0
 800929c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80092a0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80092a2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80092a4:	79fb      	ldrb	r3, [r7, #7]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d009      	beq.n	80092be <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	6999      	ldr	r1, [r3, #24]
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	015a      	lsls	r2, r3, #5
 80092b2:	6a3b      	ldr	r3, [r7, #32]
 80092b4:	4413      	add	r3, r2
 80092b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092ba:	460a      	mov	r2, r1
 80092bc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80092be:	6a3b      	ldr	r3, [r7, #32]
 80092c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	f003 0301 	and.w	r3, r3, #1
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	bf0c      	ite	eq
 80092ce:	2301      	moveq	r3, #1
 80092d0:	2300      	movne	r3, #0
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	015a      	lsls	r2, r3, #5
 80092da:	6a3b      	ldr	r3, [r7, #32]
 80092dc:	4413      	add	r3, r2
 80092de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	69fa      	ldr	r2, [r7, #28]
 80092e6:	0151      	lsls	r1, r2, #5
 80092e8:	6a3a      	ldr	r2, [r7, #32]
 80092ea:	440a      	add	r2, r1
 80092ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80092f0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80092f4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	015a      	lsls	r2, r3, #5
 80092fa:	6a3b      	ldr	r3, [r7, #32]
 80092fc:	4413      	add	r3, r2
 80092fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	7e7b      	ldrb	r3, [r7, #25]
 8009306:	075b      	lsls	r3, r3, #29
 8009308:	69f9      	ldr	r1, [r7, #28]
 800930a:	0148      	lsls	r0, r1, #5
 800930c:	6a39      	ldr	r1, [r7, #32]
 800930e:	4401      	add	r1, r0
 8009310:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8009314:	4313      	orrs	r3, r2
 8009316:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	799b      	ldrb	r3, [r3, #6]
 800931c:	2b01      	cmp	r3, #1
 800931e:	f040 80c3 	bne.w	80094a8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	7c5b      	ldrb	r3, [r3, #17]
 8009326:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009328:	68ba      	ldr	r2, [r7, #8]
 800932a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800932c:	4313      	orrs	r3, r2
 800932e:	69fa      	ldr	r2, [r7, #28]
 8009330:	0151      	lsls	r1, r2, #5
 8009332:	6a3a      	ldr	r2, [r7, #32]
 8009334:	440a      	add	r2, r1
 8009336:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800933a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800933e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	015a      	lsls	r2, r3, #5
 8009344:	6a3b      	ldr	r3, [r7, #32]
 8009346:	4413      	add	r3, r2
 8009348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	69fa      	ldr	r2, [r7, #28]
 8009350:	0151      	lsls	r1, r2, #5
 8009352:	6a3a      	ldr	r2, [r7, #32]
 8009354:	440a      	add	r2, r1
 8009356:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800935a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800935e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	79db      	ldrb	r3, [r3, #7]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d123      	bne.n	80093b0 <USB_HC_StartXfer+0x2dc>
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	78db      	ldrb	r3, [r3, #3]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d11f      	bne.n	80093b0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	015a      	lsls	r2, r3, #5
 8009374:	6a3b      	ldr	r3, [r7, #32]
 8009376:	4413      	add	r3, r2
 8009378:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	69fa      	ldr	r2, [r7, #28]
 8009380:	0151      	lsls	r1, r2, #5
 8009382:	6a3a      	ldr	r2, [r7, #32]
 8009384:	440a      	add	r2, r1
 8009386:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800938a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800938e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	015a      	lsls	r2, r3, #5
 8009394:	6a3b      	ldr	r3, [r7, #32]
 8009396:	4413      	add	r3, r2
 8009398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	69fa      	ldr	r2, [r7, #28]
 80093a0:	0151      	lsls	r1, r2, #5
 80093a2:	6a3a      	ldr	r2, [r7, #32]
 80093a4:	440a      	add	r2, r1
 80093a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80093aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093ae:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	7c9b      	ldrb	r3, [r3, #18]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d003      	beq.n	80093c0 <USB_HC_StartXfer+0x2ec>
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	7c9b      	ldrb	r3, [r3, #18]
 80093bc:	2b03      	cmp	r3, #3
 80093be:	d117      	bne.n	80093f0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d113      	bne.n	80093f0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	78db      	ldrb	r3, [r3, #3]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d10f      	bne.n	80093f0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	015a      	lsls	r2, r3, #5
 80093d4:	6a3b      	ldr	r3, [r7, #32]
 80093d6:	4413      	add	r3, r2
 80093d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	69fa      	ldr	r2, [r7, #28]
 80093e0:	0151      	lsls	r1, r2, #5
 80093e2:	6a3a      	ldr	r2, [r7, #32]
 80093e4:	440a      	add	r2, r1
 80093e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80093ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093ee:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	7c9b      	ldrb	r3, [r3, #18]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d162      	bne.n	80094be <USB_HC_StartXfer+0x3ea>
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	78db      	ldrb	r3, [r3, #3]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d15e      	bne.n	80094be <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	3b01      	subs	r3, #1
 8009406:	2b03      	cmp	r3, #3
 8009408:	d858      	bhi.n	80094bc <USB_HC_StartXfer+0x3e8>
 800940a:	a201      	add	r2, pc, #4	@ (adr r2, 8009410 <USB_HC_StartXfer+0x33c>)
 800940c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009410:	08009421 	.word	0x08009421
 8009414:	08009443 	.word	0x08009443
 8009418:	08009465 	.word	0x08009465
 800941c:	08009487 	.word	0x08009487
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	015a      	lsls	r2, r3, #5
 8009424:	6a3b      	ldr	r3, [r7, #32]
 8009426:	4413      	add	r3, r2
 8009428:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	69fa      	ldr	r2, [r7, #28]
 8009430:	0151      	lsls	r1, r2, #5
 8009432:	6a3a      	ldr	r2, [r7, #32]
 8009434:	440a      	add	r2, r1
 8009436:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800943a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800943e:	6053      	str	r3, [r2, #4]
          break;
 8009440:	e03d      	b.n	80094be <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	015a      	lsls	r2, r3, #5
 8009446:	6a3b      	ldr	r3, [r7, #32]
 8009448:	4413      	add	r3, r2
 800944a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	69fa      	ldr	r2, [r7, #28]
 8009452:	0151      	lsls	r1, r2, #5
 8009454:	6a3a      	ldr	r2, [r7, #32]
 8009456:	440a      	add	r2, r1
 8009458:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800945c:	f043 030e 	orr.w	r3, r3, #14
 8009460:	6053      	str	r3, [r2, #4]
          break;
 8009462:	e02c      	b.n	80094be <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	015a      	lsls	r2, r3, #5
 8009468:	6a3b      	ldr	r3, [r7, #32]
 800946a:	4413      	add	r3, r2
 800946c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	69fa      	ldr	r2, [r7, #28]
 8009474:	0151      	lsls	r1, r2, #5
 8009476:	6a3a      	ldr	r2, [r7, #32]
 8009478:	440a      	add	r2, r1
 800947a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800947e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009482:	6053      	str	r3, [r2, #4]
          break;
 8009484:	e01b      	b.n	80094be <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	015a      	lsls	r2, r3, #5
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	4413      	add	r3, r2
 800948e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	69fa      	ldr	r2, [r7, #28]
 8009496:	0151      	lsls	r1, r2, #5
 8009498:	6a3a      	ldr	r2, [r7, #32]
 800949a:	440a      	add	r2, r1
 800949c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80094a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80094a4:	6053      	str	r3, [r2, #4]
          break;
 80094a6:	e00a      	b.n	80094be <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	015a      	lsls	r2, r3, #5
 80094ac:	6a3b      	ldr	r3, [r7, #32]
 80094ae:	4413      	add	r3, r2
 80094b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094b4:	461a      	mov	r2, r3
 80094b6:	2300      	movs	r3, #0
 80094b8:	6053      	str	r3, [r2, #4]
 80094ba:	e000      	b.n	80094be <USB_HC_StartXfer+0x3ea>
          break;
 80094bc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	015a      	lsls	r2, r3, #5
 80094c2:	6a3b      	ldr	r3, [r7, #32]
 80094c4:	4413      	add	r3, r2
 80094c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80094d4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	78db      	ldrb	r3, [r3, #3]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d004      	beq.n	80094e8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094e4:	613b      	str	r3, [r7, #16]
 80094e6:	e003      	b.n	80094f0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80094ee:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80094f6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	015a      	lsls	r2, r3, #5
 80094fc:	6a3b      	ldr	r3, [r7, #32]
 80094fe:	4413      	add	r3, r2
 8009500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009504:	461a      	mov	r2, r3
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800950a:	79fb      	ldrb	r3, [r7, #7]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d003      	beq.n	8009518 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8009510:	2300      	movs	r3, #0
 8009512:	e055      	b.n	80095c0 <USB_HC_StartXfer+0x4ec>
 8009514:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	78db      	ldrb	r3, [r3, #3]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d14e      	bne.n	80095be <USB_HC_StartXfer+0x4ea>
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	6a1b      	ldr	r3, [r3, #32]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d04a      	beq.n	80095be <USB_HC_StartXfer+0x4ea>
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	79db      	ldrb	r3, [r3, #7]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d146      	bne.n	80095be <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	7c9b      	ldrb	r3, [r3, #18]
 8009534:	2b03      	cmp	r3, #3
 8009536:	d831      	bhi.n	800959c <USB_HC_StartXfer+0x4c8>
 8009538:	a201      	add	r2, pc, #4	@ (adr r2, 8009540 <USB_HC_StartXfer+0x46c>)
 800953a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953e:	bf00      	nop
 8009540:	08009551 	.word	0x08009551
 8009544:	08009575 	.word	0x08009575
 8009548:	08009551 	.word	0x08009551
 800954c:	08009575 	.word	0x08009575
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	6a1b      	ldr	r3, [r3, #32]
 8009554:	3303      	adds	r3, #3
 8009556:	089b      	lsrs	r3, r3, #2
 8009558:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800955a:	8afa      	ldrh	r2, [r7, #22]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009560:	b29b      	uxth	r3, r3
 8009562:	429a      	cmp	r2, r3
 8009564:	d91c      	bls.n	80095a0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	f043 0220 	orr.w	r2, r3, #32
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	619a      	str	r2, [r3, #24]
        }
        break;
 8009572:	e015      	b.n	80095a0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	6a1b      	ldr	r3, [r3, #32]
 8009578:	3303      	adds	r3, #3
 800957a:	089b      	lsrs	r3, r3, #2
 800957c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800957e:	8afa      	ldrh	r2, [r7, #22]
 8009580:	6a3b      	ldr	r3, [r7, #32]
 8009582:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	b29b      	uxth	r3, r3
 800958a:	429a      	cmp	r2, r3
 800958c:	d90a      	bls.n	80095a4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	619a      	str	r2, [r3, #24]
        }
        break;
 800959a:	e003      	b.n	80095a4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800959c:	bf00      	nop
 800959e:	e002      	b.n	80095a6 <USB_HC_StartXfer+0x4d2>
        break;
 80095a0:	bf00      	nop
 80095a2:	e000      	b.n	80095a6 <USB_HC_StartXfer+0x4d2>
        break;
 80095a4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	6999      	ldr	r1, [r3, #24]
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	785a      	ldrb	r2, [r3, #1]
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	6a1b      	ldr	r3, [r3, #32]
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	2000      	movs	r0, #0
 80095b6:	9000      	str	r0, [sp, #0]
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f7ff f9c3 	bl	8008944 <USB_WritePacket>
  }

  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3728      	adds	r7, #40	@ 0x28
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80095da:	695b      	ldr	r3, [r3, #20]
 80095dc:	b29b      	uxth	r3, r3
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3714      	adds	r7, #20
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr

080095ea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80095ea:	b480      	push	{r7}
 80095ec:	b089      	sub	sp, #36	@ 0x24
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	460b      	mov	r3, r1
 80095f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80095fa:	78fb      	ldrb	r3, [r7, #3]
 80095fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80095fe:	2300      	movs	r3, #0
 8009600:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	015a      	lsls	r2, r3, #5
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	4413      	add	r3, r2
 800960a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	0c9b      	lsrs	r3, r3, #18
 8009612:	f003 0303 	and.w	r3, r3, #3
 8009616:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	015a      	lsls	r2, r3, #5
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	4413      	add	r3, r2
 8009620:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	0fdb      	lsrs	r3, r3, #31
 8009628:	f003 0301 	and.w	r3, r3, #1
 800962c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	015a      	lsls	r2, r3, #5
 8009632:	69fb      	ldr	r3, [r7, #28]
 8009634:	4413      	add	r3, r2
 8009636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	0fdb      	lsrs	r3, r3, #31
 800963e:	f003 0301 	and.w	r3, r3, #1
 8009642:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	f003 0320 	and.w	r3, r3, #32
 800964c:	2b20      	cmp	r3, #32
 800964e:	d10d      	bne.n	800966c <USB_HC_Halt+0x82>
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10a      	bne.n	800966c <USB_HC_Halt+0x82>
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d005      	beq.n	8009668 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d002      	beq.n	8009668 <USB_HC_Halt+0x7e>
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	2b03      	cmp	r3, #3
 8009666:	d101      	bne.n	800966c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8009668:	2300      	movs	r3, #0
 800966a:	e0d8      	b.n	800981e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d002      	beq.n	8009678 <USB_HC_Halt+0x8e>
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	2b02      	cmp	r3, #2
 8009676:	d173      	bne.n	8009760 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	015a      	lsls	r2, r3, #5
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	4413      	add	r3, r2
 8009680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	69ba      	ldr	r2, [r7, #24]
 8009688:	0151      	lsls	r1, r2, #5
 800968a:	69fa      	ldr	r2, [r7, #28]
 800968c:	440a      	add	r2, r1
 800968e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009692:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009696:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	f003 0320 	and.w	r3, r3, #32
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d14a      	bne.n	800973a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d133      	bne.n	8009718 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	015a      	lsls	r2, r3, #5
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	4413      	add	r3, r2
 80096b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	69ba      	ldr	r2, [r7, #24]
 80096c0:	0151      	lsls	r1, r2, #5
 80096c2:	69fa      	ldr	r2, [r7, #28]
 80096c4:	440a      	add	r2, r1
 80096c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80096ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80096ce:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	015a      	lsls	r2, r3, #5
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	4413      	add	r3, r2
 80096d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	69ba      	ldr	r2, [r7, #24]
 80096e0:	0151      	lsls	r1, r2, #5
 80096e2:	69fa      	ldr	r2, [r7, #28]
 80096e4:	440a      	add	r2, r1
 80096e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80096ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80096ee:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	3301      	adds	r3, #1
 80096f4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80096fc:	d82e      	bhi.n	800975c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	015a      	lsls	r2, r3, #5
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	4413      	add	r3, r2
 8009706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009710:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009714:	d0ec      	beq.n	80096f0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009716:	e081      	b.n	800981c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	015a      	lsls	r2, r3, #5
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	4413      	add	r3, r2
 8009720:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	69ba      	ldr	r2, [r7, #24]
 8009728:	0151      	lsls	r1, r2, #5
 800972a:	69fa      	ldr	r2, [r7, #28]
 800972c:	440a      	add	r2, r1
 800972e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009732:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009736:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009738:	e070      	b.n	800981c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	015a      	lsls	r2, r3, #5
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	4413      	add	r3, r2
 8009742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	69ba      	ldr	r2, [r7, #24]
 800974a:	0151      	lsls	r1, r2, #5
 800974c:	69fa      	ldr	r2, [r7, #28]
 800974e:	440a      	add	r2, r1
 8009750:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009754:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009758:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800975a:	e05f      	b.n	800981c <USB_HC_Halt+0x232>
            break;
 800975c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800975e:	e05d      	b.n	800981c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	015a      	lsls	r2, r3, #5
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	4413      	add	r3, r2
 8009768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	69ba      	ldr	r2, [r7, #24]
 8009770:	0151      	lsls	r1, r2, #5
 8009772:	69fa      	ldr	r2, [r7, #28]
 8009774:	440a      	add	r2, r1
 8009776:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800977a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800977e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800978c:	2b00      	cmp	r3, #0
 800978e:	d133      	bne.n	80097f8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	015a      	lsls	r2, r3, #5
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	4413      	add	r3, r2
 8009798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	69ba      	ldr	r2, [r7, #24]
 80097a0:	0151      	lsls	r1, r2, #5
 80097a2:	69fa      	ldr	r2, [r7, #28]
 80097a4:	440a      	add	r2, r1
 80097a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80097ae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	015a      	lsls	r2, r3, #5
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	4413      	add	r3, r2
 80097b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	69ba      	ldr	r2, [r7, #24]
 80097c0:	0151      	lsls	r1, r2, #5
 80097c2:	69fa      	ldr	r2, [r7, #28]
 80097c4:	440a      	add	r2, r1
 80097c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80097ce:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	3301      	adds	r3, #1
 80097d4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80097dc:	d81d      	bhi.n	800981a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	015a      	lsls	r2, r3, #5
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	4413      	add	r3, r2
 80097e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097f4:	d0ec      	beq.n	80097d0 <USB_HC_Halt+0x1e6>
 80097f6:	e011      	b.n	800981c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	015a      	lsls	r2, r3, #5
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	4413      	add	r3, r2
 8009800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	69ba      	ldr	r2, [r7, #24]
 8009808:	0151      	lsls	r1, r2, #5
 800980a:	69fa      	ldr	r2, [r7, #28]
 800980c:	440a      	add	r2, r1
 800980e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009812:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009816:	6013      	str	r3, [r2, #0]
 8009818:	e000      	b.n	800981c <USB_HC_Halt+0x232>
          break;
 800981a:	bf00      	nop
    }
  }

  return HAL_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3724      	adds	r7, #36	@ 0x24
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
	...

0800982c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800982c:	b480      	push	{r7}
 800982e:	b087      	sub	sp, #28
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	460b      	mov	r3, r1
 8009836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800983c:	78fb      	ldrb	r3, [r7, #3]
 800983e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009840:	2301      	movs	r3, #1
 8009842:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	04da      	lsls	r2, r3, #19
 8009848:	4b15      	ldr	r3, [pc, #84]	@ (80098a0 <USB_DoPing+0x74>)
 800984a:	4013      	ands	r3, r2
 800984c:	693a      	ldr	r2, [r7, #16]
 800984e:	0151      	lsls	r1, r2, #5
 8009850:	697a      	ldr	r2, [r7, #20]
 8009852:	440a      	add	r2, r1
 8009854:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009858:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800985c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	015a      	lsls	r2, r3, #5
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	4413      	add	r3, r2
 8009866:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009874:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800987c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	015a      	lsls	r2, r3, #5
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	4413      	add	r3, r2
 8009886:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800988a:	461a      	mov	r2, r3
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	371c      	adds	r7, #28
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	1ff80000 	.word	0x1ff80000

080098a4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b088      	sub	sp, #32
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80098ac:	2300      	movs	r3, #0
 80098ae:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80098b4:	2300      	movs	r3, #0
 80098b6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f7fe ff86 	bl	80087ca <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80098be:	2110      	movs	r1, #16
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7fe ffdf 	bl	8008884 <USB_FlushTxFifo>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d001      	beq.n	80098d0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f7ff f809 	bl	80088e8 <USB_FlushRxFifo>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d001      	beq.n	80098e0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80098e0:	2300      	movs	r3, #0
 80098e2:	61bb      	str	r3, [r7, #24]
 80098e4:	e01f      	b.n	8009926 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	015a      	lsls	r2, r3, #5
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	4413      	add	r3, r2
 80098ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80098fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009904:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800990c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	015a      	lsls	r2, r3, #5
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	4413      	add	r3, r2
 8009916:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800991a:	461a      	mov	r2, r3
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	3301      	adds	r3, #1
 8009924:	61bb      	str	r3, [r7, #24]
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	2b0f      	cmp	r3, #15
 800992a:	d9dc      	bls.n	80098e6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800992c:	2300      	movs	r3, #0
 800992e:	61bb      	str	r3, [r7, #24]
 8009930:	e034      	b.n	800999c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	015a      	lsls	r2, r3, #5
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	4413      	add	r3, r2
 800993a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009948:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009950:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009958:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	015a      	lsls	r2, r3, #5
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	4413      	add	r3, r2
 8009962:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009966:	461a      	mov	r2, r3
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	3301      	adds	r3, #1
 8009970:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009978:	d80c      	bhi.n	8009994 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	015a      	lsls	r2, r3, #5
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	4413      	add	r3, r2
 8009982:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800998c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009990:	d0ec      	beq.n	800996c <USB_StopHost+0xc8>
 8009992:	e000      	b.n	8009996 <USB_StopHost+0xf2>
        break;
 8009994:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	3301      	adds	r3, #1
 800999a:	61bb      	str	r3, [r7, #24]
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	2b0f      	cmp	r3, #15
 80099a0:	d9c7      	bls.n	8009932 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80099a8:	461a      	mov	r2, r3
 80099aa:	f04f 33ff 	mov.w	r3, #4294967295
 80099ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f04f 32ff 	mov.w	r2, #4294967295
 80099b6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f7fe fef5 	bl	80087a8 <USB_EnableGlobalInt>

  return ret;
 80099be:	7ffb      	ldrb	r3, [r7, #31]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3720      	adds	r7, #32
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80099c8:	b590      	push	{r4, r7, lr}
 80099ca:	b089      	sub	sp, #36	@ 0x24
 80099cc:	af04      	add	r7, sp, #16
 80099ce:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80099d0:	2301      	movs	r3, #1
 80099d2:	2202      	movs	r2, #2
 80099d4:	2102      	movs	r1, #2
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 fcb7 	bl	800a34a <USBH_FindInterface>
 80099dc:	4603      	mov	r3, r0
 80099de:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
 80099e2:	2bff      	cmp	r3, #255	@ 0xff
 80099e4:	d002      	beq.n	80099ec <USBH_CDC_InterfaceInit+0x24>
 80099e6:	7bfb      	ldrb	r3, [r7, #15]
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d901      	bls.n	80099f0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80099ec:	2302      	movs	r3, #2
 80099ee:	e13d      	b.n	8009c6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
 80099f2:	4619      	mov	r1, r3
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 fc8c 	bl	800a312 <USBH_SelectInterface>
 80099fa:	4603      	mov	r3, r0
 80099fc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80099fe:	7bbb      	ldrb	r3, [r7, #14]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d001      	beq.n	8009a08 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009a04:	2302      	movs	r3, #2
 8009a06:	e131      	b.n	8009c6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8009a0e:	2050      	movs	r0, #80	@ 0x50
 8009a10:	f006 ffd2 	bl	80109b8 <malloc>
 8009a14:	4603      	mov	r3, r0
 8009a16:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009a1e:	69db      	ldr	r3, [r3, #28]
 8009a20:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d101      	bne.n	8009a2c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009a28:	2302      	movs	r3, #2
 8009a2a:	e11f      	b.n	8009c6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009a2c:	2250      	movs	r2, #80	@ 0x50
 8009a2e:	2100      	movs	r1, #0
 8009a30:	68b8      	ldr	r0, [r7, #8]
 8009a32:	f007 fa44 	bl	8010ebe <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009a36:	7bfb      	ldrb	r3, [r7, #15]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	211a      	movs	r1, #26
 8009a3c:	fb01 f303 	mul.w	r3, r1, r3
 8009a40:	4413      	add	r3, r2
 8009a42:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	b25b      	sxtb	r3, r3
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	da15      	bge.n	8009a7a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009a4e:	7bfb      	ldrb	r3, [r7, #15]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	211a      	movs	r1, #26
 8009a54:	fb01 f303 	mul.w	r3, r1, r3
 8009a58:	4413      	add	r3, r2
 8009a5a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009a5e:	781a      	ldrb	r2, [r3, #0]
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009a64:	7bfb      	ldrb	r3, [r7, #15]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	211a      	movs	r1, #26
 8009a6a:	fb01 f303 	mul.w	r3, r1, r3
 8009a6e:	4413      	add	r3, r2
 8009a70:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009a74:	881a      	ldrh	r2, [r3, #0]
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	785b      	ldrb	r3, [r3, #1]
 8009a7e:	4619      	mov	r1, r3
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f002 f904 	bl	800bc8e <USBH_AllocPipe>
 8009a86:	4603      	mov	r3, r0
 8009a88:	461a      	mov	r2, r3
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	7819      	ldrb	r1, [r3, #0]
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	7858      	ldrb	r0, [r3, #1]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009aa2:	68ba      	ldr	r2, [r7, #8]
 8009aa4:	8952      	ldrh	r2, [r2, #10]
 8009aa6:	9202      	str	r2, [sp, #8]
 8009aa8:	2203      	movs	r2, #3
 8009aaa:	9201      	str	r2, [sp, #4]
 8009aac:	9300      	str	r3, [sp, #0]
 8009aae:	4623      	mov	r3, r4
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f002 f8bc 	bl	800bc30 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	2200      	movs	r2, #0
 8009abe:	4619      	mov	r1, r3
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f006 feef 	bl	80108a4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	2200      	movs	r2, #0
 8009aca:	210a      	movs	r1, #10
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fc3c 	bl	800a34a <USBH_FindInterface>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009ad6:	7bfb      	ldrb	r3, [r7, #15]
 8009ad8:	2bff      	cmp	r3, #255	@ 0xff
 8009ada:	d002      	beq.n	8009ae2 <USBH_CDC_InterfaceInit+0x11a>
 8009adc:	7bfb      	ldrb	r3, [r7, #15]
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d901      	bls.n	8009ae6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009ae2:	2302      	movs	r3, #2
 8009ae4:	e0c2      	b.n	8009c6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009ae6:	7bfb      	ldrb	r3, [r7, #15]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	211a      	movs	r1, #26
 8009aec:	fb01 f303 	mul.w	r3, r1, r3
 8009af0:	4413      	add	r3, r2
 8009af2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	b25b      	sxtb	r3, r3
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	da16      	bge.n	8009b2c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009afe:	7bfb      	ldrb	r3, [r7, #15]
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	211a      	movs	r1, #26
 8009b04:	fb01 f303 	mul.w	r3, r1, r3
 8009b08:	4413      	add	r3, r2
 8009b0a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009b0e:	781a      	ldrb	r2, [r3, #0]
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009b14:	7bfb      	ldrb	r3, [r7, #15]
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	211a      	movs	r1, #26
 8009b1a:	fb01 f303 	mul.w	r3, r1, r3
 8009b1e:	4413      	add	r3, r2
 8009b20:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009b24:	881a      	ldrh	r2, [r3, #0]
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	835a      	strh	r2, [r3, #26]
 8009b2a:	e015      	b.n	8009b58 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	211a      	movs	r1, #26
 8009b32:	fb01 f303 	mul.w	r3, r1, r3
 8009b36:	4413      	add	r3, r2
 8009b38:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009b3c:	781a      	ldrb	r2, [r3, #0]
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	211a      	movs	r1, #26
 8009b48:	fb01 f303 	mul.w	r3, r1, r3
 8009b4c:	4413      	add	r3, r2
 8009b4e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009b52:	881a      	ldrh	r2, [r3, #0]
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009b58:	7bfb      	ldrb	r3, [r7, #15]
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	211a      	movs	r1, #26
 8009b5e:	fb01 f303 	mul.w	r3, r1, r3
 8009b62:	4413      	add	r3, r2
 8009b64:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	b25b      	sxtb	r3, r3
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	da16      	bge.n	8009b9e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009b70:	7bfb      	ldrb	r3, [r7, #15]
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	211a      	movs	r1, #26
 8009b76:	fb01 f303 	mul.w	r3, r1, r3
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009b80:	781a      	ldrb	r2, [r3, #0]
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009b86:	7bfb      	ldrb	r3, [r7, #15]
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	211a      	movs	r1, #26
 8009b8c:	fb01 f303 	mul.w	r3, r1, r3
 8009b90:	4413      	add	r3, r2
 8009b92:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009b96:	881a      	ldrh	r2, [r3, #0]
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	835a      	strh	r2, [r3, #26]
 8009b9c:	e015      	b.n	8009bca <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009b9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	211a      	movs	r1, #26
 8009ba4:	fb01 f303 	mul.w	r3, r1, r3
 8009ba8:	4413      	add	r3, r2
 8009baa:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009bae:	781a      	ldrb	r2, [r3, #0]
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009bb4:	7bfb      	ldrb	r3, [r7, #15]
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	211a      	movs	r1, #26
 8009bba:	fb01 f303 	mul.w	r3, r1, r3
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009bc4:	881a      	ldrh	r2, [r3, #0]
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	7b9b      	ldrb	r3, [r3, #14]
 8009bce:	4619      	mov	r1, r3
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f002 f85c 	bl	800bc8e <USBH_AllocPipe>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	461a      	mov	r2, r3
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	7bdb      	ldrb	r3, [r3, #15]
 8009be2:	4619      	mov	r1, r3
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f002 f852 	bl	800bc8e <USBH_AllocPipe>
 8009bea:	4603      	mov	r3, r0
 8009bec:	461a      	mov	r2, r3
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	7b59      	ldrb	r1, [r3, #13]
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	7b98      	ldrb	r0, [r3, #14]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c06:	68ba      	ldr	r2, [r7, #8]
 8009c08:	8b12      	ldrh	r2, [r2, #24]
 8009c0a:	9202      	str	r2, [sp, #8]
 8009c0c:	2202      	movs	r2, #2
 8009c0e:	9201      	str	r2, [sp, #4]
 8009c10:	9300      	str	r3, [sp, #0]
 8009c12:	4623      	mov	r3, r4
 8009c14:	4602      	mov	r2, r0
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f002 f80a 	bl	800bc30 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	7b19      	ldrb	r1, [r3, #12]
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	7bd8      	ldrb	r0, [r3, #15]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	8b52      	ldrh	r2, [r2, #26]
 8009c34:	9202      	str	r2, [sp, #8]
 8009c36:	2202      	movs	r2, #2
 8009c38:	9201      	str	r2, [sp, #4]
 8009c3a:	9300      	str	r3, [sp, #0]
 8009c3c:	4623      	mov	r3, r4
 8009c3e:	4602      	mov	r2, r0
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f001 fff5 	bl	800bc30 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	7b5b      	ldrb	r3, [r3, #13]
 8009c52:	2200      	movs	r2, #0
 8009c54:	4619      	mov	r1, r3
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f006 fe24 	bl	80108a4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	7b1b      	ldrb	r3, [r3, #12]
 8009c60:	2200      	movs	r2, #0
 8009c62:	4619      	mov	r1, r3
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f006 fe1d 	bl	80108a4 <USBH_LL_SetToggle>

  return USBH_OK;
 8009c6a:	2300      	movs	r3, #0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3714      	adds	r7, #20
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd90      	pop	{r4, r7, pc}

08009c74 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c82:	69db      	ldr	r3, [r3, #28]
 8009c84:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00e      	beq.n	8009cac <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	4619      	mov	r1, r3
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f001 ffea 	bl	800bc6e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f002 f815 	bl	800bcd0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	7b1b      	ldrb	r3, [r3, #12]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d00e      	beq.n	8009cd2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	7b1b      	ldrb	r3, [r3, #12]
 8009cb8:	4619      	mov	r1, r3
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f001 ffd7 	bl	800bc6e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	7b1b      	ldrb	r3, [r3, #12]
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f002 f802 	bl	800bcd0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	7b5b      	ldrb	r3, [r3, #13]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00e      	beq.n	8009cf8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	7b5b      	ldrb	r3, [r3, #13]
 8009cde:	4619      	mov	r1, r3
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f001 ffc4 	bl	800bc6e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	7b5b      	ldrb	r3, [r3, #13]
 8009cea:	4619      	mov	r1, r3
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f001 ffef 	bl	800bcd0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009cfe:	69db      	ldr	r3, [r3, #28]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00b      	beq.n	8009d1c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d0a:	69db      	ldr	r3, [r3, #28]
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f006 fe5b 	bl	80109c8 <free>
    phost->pActiveClass->pData = 0U;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d18:	2200      	movs	r2, #0
 8009d1a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009d1c:	2300      	movs	r3, #0
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b084      	sub	sp, #16
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d34:	69db      	ldr	r3, [r3, #28]
 8009d36:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	3340      	adds	r3, #64	@ 0x40
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f8b1 	bl	8009ea6 <GetLineCoding>
 8009d44:	4603      	mov	r3, r0
 8009d46:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009d48:	7afb      	ldrb	r3, [r7, #11]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d105      	bne.n	8009d5a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009d54:	2102      	movs	r1, #2
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009d5a:	7afb      	ldrb	r3, [r7, #11]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009d70:	2300      	movs	r3, #0
 8009d72:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d7a:	69db      	ldr	r3, [r3, #28]
 8009d7c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009d84:	2b04      	cmp	r3, #4
 8009d86:	d877      	bhi.n	8009e78 <USBH_CDC_Process+0x114>
 8009d88:	a201      	add	r2, pc, #4	@ (adr r2, 8009d90 <USBH_CDC_Process+0x2c>)
 8009d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d8e:	bf00      	nop
 8009d90:	08009da5 	.word	0x08009da5
 8009d94:	08009dab 	.word	0x08009dab
 8009d98:	08009ddb 	.word	0x08009ddb
 8009d9c:	08009e4f 	.word	0x08009e4f
 8009da0:	08009e5d 	.word	0x08009e5d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009da4:	2300      	movs	r3, #0
 8009da6:	73fb      	strb	r3, [r7, #15]
      break;
 8009da8:	e06d      	b.n	8009e86 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009dae:	4619      	mov	r1, r3
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 f897 	bl	8009ee4 <SetLineCoding>
 8009db6:	4603      	mov	r3, r0
 8009db8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009dba:	7bbb      	ldrb	r3, [r7, #14]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d104      	bne.n	8009dca <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	2202      	movs	r2, #2
 8009dc4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009dc8:	e058      	b.n	8009e7c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009dca:	7bbb      	ldrb	r3, [r7, #14]
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d055      	beq.n	8009e7c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	2204      	movs	r2, #4
 8009dd4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009dd8:	e050      	b.n	8009e7c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	3340      	adds	r3, #64	@ 0x40
 8009dde:	4619      	mov	r1, r3
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 f860 	bl	8009ea6 <GetLineCoding>
 8009de6:	4603      	mov	r3, r0
 8009de8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009dea:	7bbb      	ldrb	r3, [r7, #14]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d126      	bne.n	8009e3e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e02:	791b      	ldrb	r3, [r3, #4]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d13b      	bne.n	8009e80 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e12:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d133      	bne.n	8009e80 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e22:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d12b      	bne.n	8009e80 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e30:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d124      	bne.n	8009e80 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 f96a 	bl	800a110 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009e3c:	e020      	b.n	8009e80 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009e3e:	7bbb      	ldrb	r3, [r7, #14]
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d01d      	beq.n	8009e80 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	2204      	movs	r2, #4
 8009e48:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009e4c:	e018      	b.n	8009e80 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 f867 	bl	8009f22 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 f8e6 	bl	800a026 <CDC_ProcessReception>
      break;
 8009e5a:	e014      	b.n	8009e86 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f001 f8f8 	bl	800b054 <USBH_ClrFeature>
 8009e64:	4603      	mov	r3, r0
 8009e66:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009e68:	7bbb      	ldrb	r3, [r7, #14]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d10a      	bne.n	8009e84 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8009e76:	e005      	b.n	8009e84 <USBH_CDC_Process+0x120>

    default:
      break;
 8009e78:	bf00      	nop
 8009e7a:	e004      	b.n	8009e86 <USBH_CDC_Process+0x122>
      break;
 8009e7c:	bf00      	nop
 8009e7e:	e002      	b.n	8009e86 <USBH_CDC_Process+0x122>
      break;
 8009e80:	bf00      	nop
 8009e82:	e000      	b.n	8009e86 <USBH_CDC_Process+0x122>
      break;
 8009e84:	bf00      	nop

  }

  return status;
 8009e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3710      	adds	r7, #16
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009e98:	2300      	movs	r3, #0
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	370c      	adds	r7, #12
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr

08009ea6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009ea6:	b580      	push	{r7, lr}
 8009ea8:	b082      	sub	sp, #8
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
 8009eae:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	22a1      	movs	r2, #161	@ 0xa1
 8009eb4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2221      	movs	r2, #33	@ 0x21
 8009eba:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2207      	movs	r2, #7
 8009ecc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	2207      	movs	r2, #7
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f001 fbf1 	bl	800b6bc <USBH_CtlReq>
 8009eda:	4603      	mov	r3, r0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3708      	adds	r7, #8
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2221      	movs	r2, #33	@ 0x21
 8009ef2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2220      	movs	r2, #32
 8009ef8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2207      	movs	r2, #7
 8009f0a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	2207      	movs	r2, #7
 8009f10:	4619      	mov	r1, r3
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f001 fbd2 	bl	800b6bc <USBH_CtlReq>
 8009f18:	4603      	mov	r3, r0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3708      	adds	r7, #8
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b086      	sub	sp, #24
 8009f26:	af02      	add	r7, sp, #8
 8009f28:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f30:	69db      	ldr	r3, [r3, #28]
 8009f32:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009f34:	2300      	movs	r3, #0
 8009f36:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d002      	beq.n	8009f48 <CDC_ProcessTransmission+0x26>
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	d023      	beq.n	8009f8e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009f46:	e06a      	b.n	800a01e <CDC_ProcessTransmission+0xfc>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f4c:	68fa      	ldr	r2, [r7, #12]
 8009f4e:	8b12      	ldrh	r2, [r2, #24]
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d90b      	bls.n	8009f6c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	69d9      	ldr	r1, [r3, #28]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	8b1a      	ldrh	r2, [r3, #24]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	7b5b      	ldrb	r3, [r3, #13]
 8009f60:	2001      	movs	r0, #1
 8009f62:	9000      	str	r0, [sp, #0]
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f001 fe20 	bl	800bbaa <USBH_BulkSendData>
 8009f6a:	e00b      	b.n	8009f84 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	7b5b      	ldrb	r3, [r3, #13]
 8009f7a:	2001      	movs	r0, #1
 8009f7c:	9000      	str	r0, [sp, #0]
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f001 fe13 	bl	800bbaa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2202      	movs	r2, #2
 8009f88:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009f8c:	e047      	b.n	800a01e <CDC_ProcessTransmission+0xfc>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	7b5b      	ldrb	r3, [r3, #13]
 8009f92:	4619      	mov	r1, r3
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f006 fc5b 	bl	8010850 <USBH_LL_GetURBState>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009f9e:	7afb      	ldrb	r3, [r7, #11]
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d12e      	bne.n	800a002 <CDC_ProcessTransmission+0xe0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	8b12      	ldrh	r2, [r2, #24]
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d90e      	bls.n	8009fce <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fb4:	68fa      	ldr	r2, [r7, #12]
 8009fb6:	8b12      	ldrh	r2, [r2, #24]
 8009fb8:	1a9a      	subs	r2, r3, r2
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	69db      	ldr	r3, [r3, #28]
 8009fc2:	68fa      	ldr	r2, [r7, #12]
 8009fc4:	8b12      	ldrh	r2, [r2, #24]
 8009fc6:	441a      	add	r2, r3
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	61da      	str	r2, [r3, #28]
 8009fcc:	e002      	b.n	8009fd4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d004      	beq.n	8009fe6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8009fe4:	e006      	b.n	8009ff4 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 f87a 	bl	800a0e8 <USBH_CDC_TransmitCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	2104      	movs	r1, #4
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 feb6 	bl	800ad6c <USBH_OS_PutMessage>
      break;
 800a000:	e00c      	b.n	800a01c <CDC_ProcessTransmission+0xfa>
        if (URB_Status == USBH_URB_NOTREADY)
 800a002:	7afb      	ldrb	r3, [r7, #11]
 800a004:	2b02      	cmp	r3, #2
 800a006:	d109      	bne.n	800a01c <CDC_ProcessTransmission+0xfa>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2201      	movs	r2, #1
 800a00c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800a010:	2300      	movs	r3, #0
 800a012:	2200      	movs	r2, #0
 800a014:	2104      	movs	r1, #4
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 fea8 	bl	800ad6c <USBH_OS_PutMessage>
      break;
 800a01c:	bf00      	nop
  }
}
 800a01e:	bf00      	nop
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b086      	sub	sp, #24
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a034:	69db      	ldr	r3, [r3, #28]
 800a036:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a038:	2300      	movs	r3, #0
 800a03a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800a042:	2b03      	cmp	r3, #3
 800a044:	d002      	beq.n	800a04c <CDC_ProcessReception+0x26>
 800a046:	2b04      	cmp	r3, #4
 800a048:	d00e      	beq.n	800a068 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 800a04a:	e049      	b.n	800a0e0 <CDC_ProcessReception+0xba>
      (void)USBH_BulkReceiveData(phost,
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	6a19      	ldr	r1, [r3, #32]
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	8b5a      	ldrh	r2, [r3, #26]
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	7b1b      	ldrb	r3, [r3, #12]
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f001 fdcb 	bl	800bbf4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	2204      	movs	r2, #4
 800a062:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800a066:	e03b      	b.n	800a0e0 <CDC_ProcessReception+0xba>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	7b1b      	ldrb	r3, [r3, #12]
 800a06c:	4619      	mov	r1, r3
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f006 fbee 	bl	8010850 <USBH_LL_GetURBState>
 800a074:	4603      	mov	r3, r0
 800a076:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a078:	7cfb      	ldrb	r3, [r7, #19]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d12f      	bne.n	800a0de <CDC_ProcessReception+0xb8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	7b1b      	ldrb	r3, [r3, #12]
 800a082:	4619      	mov	r1, r3
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f006 fb51 	bl	801072c <USBH_LL_GetLastXferSize>
 800a08a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	429a      	cmp	r2, r3
 800a094:	d016      	beq.n	800a0c4 <CDC_ProcessReception+0x9e>
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	8b5b      	ldrh	r3, [r3, #26]
 800a09a:	461a      	mov	r2, r3
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d110      	bne.n	800a0c4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	1ad2      	subs	r2, r2, r3
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	6a1a      	ldr	r2, [r3, #32]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	441a      	add	r2, r3
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	2203      	movs	r2, #3
 800a0be:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800a0c2:	e006      	b.n	800a0d2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 f815 	bl	800a0fc <USBH_CDC_ReceiveCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	2104      	movs	r1, #4
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 fe47 	bl	800ad6c <USBH_OS_PutMessage>
      break;
 800a0de:	bf00      	nop
  }
}
 800a0e0:	bf00      	nop
 800a0e2:	3718      	adds	r7, #24
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a104:	bf00      	nop
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	4613      	mov	r3, r2
 800a130:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d101      	bne.n	800a13c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a138:	2302      	movs	r3, #2
 800a13a:	e044      	b.n	800a1c6 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	79fa      	ldrb	r2, [r7, #7]
 800a140:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2200      	movs	r2, #0
 800a148:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2200      	movs	r2, #0
 800a150:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f000 f841 	bl	800a1dc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2200      	movs	r2, #0
 800a15e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2200      	movs	r2, #0
 800a166:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d003      	beq.n	800a188 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	68ba      	ldr	r2, [r7, #8]
 800a184:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800a188:	2200      	movs	r2, #0
 800a18a:	2104      	movs	r1, #4
 800a18c:	2010      	movs	r0, #16
 800a18e:	f001 ff5a 	bl	800c046 <osMessageQueueNew>
 800a192:	4602      	mov	r2, r0
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800a19a:	4b0d      	ldr	r3, [pc, #52]	@ (800a1d0 <USBH_Init+0xac>)
 800a19c:	4a0d      	ldr	r2, [pc, #52]	@ (800a1d4 <USBH_Init+0xb0>)
 800a19e:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800a1a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a1d0 <USBH_Init+0xac>)
 800a1a2:	2280      	movs	r2, #128	@ 0x80
 800a1a4:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800a1a6:	4b0a      	ldr	r3, [pc, #40]	@ (800a1d0 <USBH_Init+0xac>)
 800a1a8:	2218      	movs	r2, #24
 800a1aa:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800a1ac:	4a08      	ldr	r2, [pc, #32]	@ (800a1d0 <USBH_Init+0xac>)
 800a1ae:	68f9      	ldr	r1, [r7, #12]
 800a1b0:	4809      	ldr	r0, [pc, #36]	@ (800a1d8 <USBH_Init+0xb4>)
 800a1b2:	f001 fe9b 	bl	800beec <osThreadNew>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	f006 fa00 	bl	80105c4 <USBH_LL_Init>

  return USBH_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	20000540 	.word	0x20000540
 800a1d4:	08012944 	.word	0x08012944
 800a1d8:	0800adb5 	.word	0x0800adb5

0800a1dc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	60fb      	str	r3, [r7, #12]
 800a1e8:	e009      	b.n	800a1fe <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	33e0      	adds	r3, #224	@ 0xe0
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	4413      	add	r3, r2
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	60fb      	str	r3, [r7, #12]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2b0f      	cmp	r3, #15
 800a202:	d9f2      	bls.n	800a1ea <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a204:	2300      	movs	r3, #0
 800a206:	60fb      	str	r3, [r7, #12]
 800a208:	e009      	b.n	800a21e <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	4413      	add	r3, r2
 800a210:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a214:	2200      	movs	r2, #0
 800a216:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	3301      	adds	r3, #1
 800a21c:	60fb      	str	r3, [r7, #12]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a224:	d3f1      	bcc.n	800a20a <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2201      	movs	r2, #1
 800a236:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2240      	movs	r2, #64	@ 0x40
 800a24a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2201      	movs	r2, #1
 800a25e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	331c      	adds	r3, #28
 800a276:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a27a:	2100      	movs	r1, #0
 800a27c:	4618      	mov	r0, r3
 800a27e:	f006 fe1e 	bl	8010ebe <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a288:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a28c:	2100      	movs	r1, #0
 800a28e:	4618      	mov	r0, r3
 800a290:	f006 fe15 	bl	8010ebe <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a29a:	2212      	movs	r2, #18
 800a29c:	2100      	movs	r1, #0
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f006 fe0d 	bl	8010ebe <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a2aa:	223e      	movs	r2, #62	@ 0x3e
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f006 fe05 	bl	8010ebe <memset>

  return USBH_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a2be:	b480      	push	{r7}
 800a2c0:	b085      	sub	sp, #20
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d016      	beq.n	800a300 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d10e      	bne.n	800a2fa <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a2e2:	1c59      	adds	r1, r3, #1
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	33de      	adds	r3, #222	@ 0xde
 800a2ee:	6839      	ldr	r1, [r7, #0]
 800a2f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	73fb      	strb	r3, [r7, #15]
 800a2f8:	e004      	b.n	800a304 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a2fa:	2302      	movs	r3, #2
 800a2fc:	73fb      	strb	r3, [r7, #15]
 800a2fe:	e001      	b.n	800a304 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a300:	2302      	movs	r3, #2
 800a302:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a304:	7bfb      	ldrb	r3, [r7, #15]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3714      	adds	r7, #20
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr

0800a312 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a312:	b480      	push	{r7}
 800a314:	b085      	sub	sp, #20
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
 800a31a:	460b      	mov	r3, r1
 800a31c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800a328:	78fa      	ldrb	r2, [r7, #3]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d204      	bcs.n	800a338 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	78fa      	ldrb	r2, [r7, #3]
 800a332:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800a336:	e001      	b.n	800a33c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a338:	2302      	movs	r3, #2
 800a33a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a33c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3714      	adds	r7, #20
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr

0800a34a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a34a:	b480      	push	{r7}
 800a34c:	b087      	sub	sp, #28
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	4608      	mov	r0, r1
 800a354:	4611      	mov	r1, r2
 800a356:	461a      	mov	r2, r3
 800a358:	4603      	mov	r3, r0
 800a35a:	70fb      	strb	r3, [r7, #3]
 800a35c:	460b      	mov	r3, r1
 800a35e:	70bb      	strb	r3, [r7, #2]
 800a360:	4613      	mov	r3, r2
 800a362:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a364:	2300      	movs	r3, #0
 800a366:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a368:	2300      	movs	r3, #0
 800a36a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a372:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a374:	e025      	b.n	800a3c2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a376:	7dfb      	ldrb	r3, [r7, #23]
 800a378:	221a      	movs	r2, #26
 800a37a:	fb02 f303 	mul.w	r3, r2, r3
 800a37e:	3308      	adds	r3, #8
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	4413      	add	r3, r2
 800a384:	3302      	adds	r3, #2
 800a386:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	795b      	ldrb	r3, [r3, #5]
 800a38c:	78fa      	ldrb	r2, [r7, #3]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d002      	beq.n	800a398 <USBH_FindInterface+0x4e>
 800a392:	78fb      	ldrb	r3, [r7, #3]
 800a394:	2bff      	cmp	r3, #255	@ 0xff
 800a396:	d111      	bne.n	800a3bc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a39c:	78ba      	ldrb	r2, [r7, #2]
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d002      	beq.n	800a3a8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a3a2:	78bb      	ldrb	r3, [r7, #2]
 800a3a4:	2bff      	cmp	r3, #255	@ 0xff
 800a3a6:	d109      	bne.n	800a3bc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a3ac:	787a      	ldrb	r2, [r7, #1]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d002      	beq.n	800a3b8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a3b2:	787b      	ldrb	r3, [r7, #1]
 800a3b4:	2bff      	cmp	r3, #255	@ 0xff
 800a3b6:	d101      	bne.n	800a3bc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a3b8:	7dfb      	ldrb	r3, [r7, #23]
 800a3ba:	e006      	b.n	800a3ca <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a3bc:	7dfb      	ldrb	r3, [r7, #23]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a3c2:	7dfb      	ldrb	r3, [r7, #23]
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d9d6      	bls.n	800a376 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a3c8:	23ff      	movs	r3, #255	@ 0xff
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	371c      	adds	r7, #28
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr

0800a3d6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b082      	sub	sp, #8
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f006 f92c 	bl	801063c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a3e4:	2101      	movs	r1, #1
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f006 fa45 	bl	8010876 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3708      	adds	r7, #8
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
	...

0800a3f8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b088      	sub	sp, #32
 800a3fc:	af04      	add	r7, sp, #16
 800a3fe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a400:	2302      	movs	r3, #2
 800a402:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a404:	2300      	movs	r3, #0
 800a406:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	2b01      	cmp	r3, #1
 800a412:	d102      	bne.n	800a41a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2203      	movs	r2, #3
 800a418:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	2b0b      	cmp	r3, #11
 800a422:	f200 81f5 	bhi.w	800a810 <USBH_Process+0x418>
 800a426:	a201      	add	r2, pc, #4	@ (adr r2, 800a42c <USBH_Process+0x34>)
 800a428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a42c:	0800a45d 	.word	0x0800a45d
 800a430:	0800a49b 	.word	0x0800a49b
 800a434:	0800a511 	.word	0x0800a511
 800a438:	0800a79f 	.word	0x0800a79f
 800a43c:	0800a811 	.word	0x0800a811
 800a440:	0800a5bd 	.word	0x0800a5bd
 800a444:	0800a739 	.word	0x0800a739
 800a448:	0800a5ff 	.word	0x0800a5ff
 800a44c:	0800a62b 	.word	0x0800a62b
 800a450:	0800a653 	.word	0x0800a653
 800a454:	0800a6a1 	.word	0x0800a6a1
 800a458:	0800a787 	.word	0x0800a787
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a462:	b2db      	uxtb	r3, r3
 800a464:	2b00      	cmp	r3, #0
 800a466:	f000 81d5 	beq.w	800a814 <USBH_Process+0x41c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2201      	movs	r2, #1
 800a46e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a470:	20c8      	movs	r0, #200	@ 0xc8
 800a472:	f006 fa4a 	bl	801090a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f006 f93d 	bl	80106f6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a48c:	2300      	movs	r3, #0
 800a48e:	2200      	movs	r2, #0
 800a490:	2101      	movs	r1, #1
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 fc6a 	bl	800ad6c <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a498:	e1bc      	b.n	800a814 <USBH_Process+0x41c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d107      	bne.n	800a4b6 <USBH_Process+0xbe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2202      	movs	r2, #2
 800a4b2:	701a      	strb	r2, [r3, #0]
 800a4b4:	e025      	b.n	800a502 <USBH_Process+0x10a>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a4bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a4c0:	d914      	bls.n	800a4ec <USBH_Process+0xf4>
        {
          phost->device.RstCnt++;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	b2da      	uxtb	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a4d8:	2b03      	cmp	r3, #3
 800a4da:	d903      	bls.n	800a4e4 <USBH_Process+0xec>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	220d      	movs	r2, #13
 800a4e0:	701a      	strb	r2, [r3, #0]
 800a4e2:	e00e      	b.n	800a502 <USBH_Process+0x10a>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	701a      	strb	r2, [r3, #0]
 800a4ea:	e00a      	b.n	800a502 <USBH_Process+0x10a>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a4f2:	f103 020a 	add.w	r2, r3, #10
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800a4fc:	200a      	movs	r0, #10
 800a4fe:	f006 fa04 	bl	801090a <USBH_Delay>
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a502:	2300      	movs	r3, #0
 800a504:	2200      	movs	r2, #0
 800a506:	2101      	movs	r1, #1
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 fc2f 	bl	800ad6c <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a50e:	e188      	b.n	800a822 <USBH_Process+0x42a>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a516:	2b00      	cmp	r3, #0
 800a518:	d005      	beq.n	800a526 <USBH_Process+0x12e>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a520:	2104      	movs	r1, #4
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a526:	2064      	movs	r0, #100	@ 0x64
 800a528:	f006 f9ef 	bl	801090a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f006 f8bb 	bl	80106a8 <USBH_LL_GetSpeed>
 800a532:	4603      	mov	r3, r0
 800a534:	461a      	mov	r2, r3
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2205      	movs	r2, #5
 800a540:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a542:	2100      	movs	r1, #0
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f001 fba2 	bl	800bc8e <USBH_AllocPipe>
 800a54a:	4603      	mov	r3, r0
 800a54c:	461a      	mov	r2, r3
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a552:	2180      	movs	r1, #128	@ 0x80
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f001 fb9a 	bl	800bc8e <USBH_AllocPipe>
 800a55a:	4603      	mov	r3, r0
 800a55c:	461a      	mov	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	7919      	ldrb	r1, [r3, #4]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a576:	9202      	str	r2, [sp, #8]
 800a578:	2200      	movs	r2, #0
 800a57a:	9201      	str	r2, [sp, #4]
 800a57c:	9300      	str	r3, [sp, #0]
 800a57e:	4603      	mov	r3, r0
 800a580:	2280      	movs	r2, #128	@ 0x80
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f001 fb54 	bl	800bc30 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	7959      	ldrb	r1, [r3, #5]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a59c:	9202      	str	r2, [sp, #8]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	9201      	str	r2, [sp, #4]
 800a5a2:	9300      	str	r3, [sp, #0]
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f001 fb41 	bl	800bc30 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	2101      	movs	r1, #1
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 fbd9 	bl	800ad6c <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a5ba:	e132      	b.n	800a822 <USBH_Process+0x42a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 f935 	bl	800a82c <USBH_HandleEnum>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a5c6:	7bbb      	ldrb	r3, [r7, #14]
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	f040 8124 	bne.w	800a818 <USBH_Process+0x420>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d103      	bne.n	800a5ea <USBH_Process+0x1f2>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2208      	movs	r2, #8
 800a5e6:	701a      	strb	r2, [r3, #0]
 800a5e8:	e002      	b.n	800a5f0 <USBH_Process+0x1f8>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2207      	movs	r2, #7
 800a5ee:	701a      	strb	r2, [r3, #0]
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	2105      	movs	r1, #5
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 fbb8 	bl	800ad6c <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a5fc:	e10c      	b.n	800a818 <USBH_Process+0x420>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a604:	2b00      	cmp	r3, #0
 800a606:	f000 8109 	beq.w	800a81c <USBH_Process+0x424>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a610:	2101      	movs	r1, #1
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2208      	movs	r2, #8
 800a61a:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a61c:	2300      	movs	r3, #0
 800a61e:	2200      	movs	r2, #0
 800a620:	2105      	movs	r1, #5
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 fba2 	bl	800ad6c <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 800a628:	e0f8      	b.n	800a81c <USBH_Process+0x424>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800a630:	4619      	mov	r1, r3
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 fcc7 	bl	800afc6 <USBH_SetCfg>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d102      	bne.n	800a644 <USBH_Process+0x24c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2209      	movs	r2, #9
 800a642:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a644:	2300      	movs	r3, #0
 800a646:	2200      	movs	r2, #0
 800a648:	2101      	movs	r1, #1
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 fb8e 	bl	800ad6c <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a650:	e0e7      	b.n	800a822 <USBH_Process+0x42a>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800a658:	f003 0320 	and.w	r3, r3, #32
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d015      	beq.n	800a68c <USBH_Process+0x294>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a660:	2101      	movs	r1, #1
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 fcd2 	bl	800b00c <USBH_SetFeature>
 800a668:	4603      	mov	r3, r0
 800a66a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a66c:	7bbb      	ldrb	r3, [r7, #14]
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	2b00      	cmp	r3, #0
 800a672:	d103      	bne.n	800a67c <USBH_Process+0x284>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	220a      	movs	r2, #10
 800a678:	701a      	strb	r2, [r3, #0]
 800a67a:	e00a      	b.n	800a692 <USBH_Process+0x29a>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800a67c:	7bbb      	ldrb	r3, [r7, #14]
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	2b03      	cmp	r3, #3
 800a682:	d106      	bne.n	800a692 <USBH_Process+0x29a>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	220a      	movs	r2, #10
 800a688:	701a      	strb	r2, [r3, #0]
 800a68a:	e002      	b.n	800a692 <USBH_Process+0x29a>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	220a      	movs	r2, #10
 800a690:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a692:	2300      	movs	r3, #0
 800a694:	2200      	movs	r2, #0
 800a696:	2101      	movs	r1, #1
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 fb67 	bl	800ad6c <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a69e:	e0c0      	b.n	800a822 <USBH_Process+0x42a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d03f      	beq.n	800a72a <USBH_Process+0x332>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	73fb      	strb	r3, [r7, #15]
 800a6b6:	e016      	b.n	800a6e6 <USBH_Process+0x2ee>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a6b8:	7bfa      	ldrb	r2, [r7, #15]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	32de      	adds	r2, #222	@ 0xde
 800a6be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6c2:	791a      	ldrb	r2, [r3, #4]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d108      	bne.n	800a6e0 <USBH_Process+0x2e8>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a6ce:	7bfa      	ldrb	r2, [r7, #15]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	32de      	adds	r2, #222	@ 0xde
 800a6d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800a6de:	e005      	b.n	800a6ec <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a6e0:	7bfb      	ldrb	r3, [r7, #15]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	73fb      	strb	r3, [r7, #15]
 800a6e6:	7bfb      	ldrb	r3, [r7, #15]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d0e5      	beq.n	800a6b8 <USBH_Process+0x2c0>
          }
        }

        if (phost->pActiveClass != NULL)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d016      	beq.n	800a724 <USBH_Process+0x32c>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	4798      	blx	r3
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d109      	bne.n	800a71c <USBH_Process+0x324>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2206      	movs	r2, #6
 800a70c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a714:	2103      	movs	r1, #3
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	4798      	blx	r3
 800a71a:	e006      	b.n	800a72a <USBH_Process+0x332>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	220d      	movs	r2, #13
 800a720:	701a      	strb	r2, [r3, #0]
 800a722:	e002      	b.n	800a72a <USBH_Process+0x332>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	220d      	movs	r2, #13
 800a728:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a72a:	2300      	movs	r3, #0
 800a72c:	2200      	movs	r2, #0
 800a72e:	2105      	movs	r1, #5
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 fb1b 	bl	800ad6c <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a736:	e074      	b.n	800a822 <USBH_Process+0x42a>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d017      	beq.n	800a772 <USBH_Process+0x37a>
      {
        status = phost->pActiveClass->Requests(phost);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a748:	691b      	ldr	r3, [r3, #16]
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	4798      	blx	r3
 800a74e:	4603      	mov	r3, r0
 800a750:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a752:	7bbb      	ldrb	r3, [r7, #14]
 800a754:	b2db      	uxtb	r3, r3
 800a756:	2b00      	cmp	r3, #0
 800a758:	d103      	bne.n	800a762 <USBH_Process+0x36a>
        {
          phost->gState = HOST_CLASS;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	220b      	movs	r2, #11
 800a75e:	701a      	strb	r2, [r3, #0]
 800a760:	e00a      	b.n	800a778 <USBH_Process+0x380>
        }
        else if (status == USBH_FAIL)
 800a762:	7bbb      	ldrb	r3, [r7, #14]
 800a764:	b2db      	uxtb	r3, r3
 800a766:	2b02      	cmp	r3, #2
 800a768:	d106      	bne.n	800a778 <USBH_Process+0x380>
        {
          phost->gState = HOST_ABORT_STATE;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	220d      	movs	r2, #13
 800a76e:	701a      	strb	r2, [r3, #0]
 800a770:	e002      	b.n	800a778 <USBH_Process+0x380>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	220d      	movs	r2, #13
 800a776:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a778:	2300      	movs	r3, #0
 800a77a:	2200      	movs	r2, #0
 800a77c:	2105      	movs	r1, #5
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 faf4 	bl	800ad6c <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a784:	e04d      	b.n	800a822 <USBH_Process+0x42a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d047      	beq.n	800a820 <USBH_Process+0x428>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a796:	695b      	ldr	r3, [r3, #20]
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	4798      	blx	r3
      }
      break;
 800a79c:	e040      	b.n	800a820 <USBH_Process+0x428>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f7ff fd18 	bl	800a1dc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d009      	beq.n	800a7ca <USBH_Process+0x3d2>
      {
        phost->pActiveClass->DeInit(phost);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d005      	beq.n	800a7e0 <USBH_Process+0x3e8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a7da:	2105      	movs	r1, #5
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d107      	bne.n	800a7fc <USBH_Process+0x404>
      {
        phost->device.is_ReEnumerated = 0U;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f7ff fdee 	bl	800a3d6 <USBH_Start>
 800a7fa:	e002      	b.n	800a802 <USBH_Process+0x40a>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f005 ff1d 	bl	801063c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a802:	2300      	movs	r3, #0
 800a804:	2200      	movs	r2, #0
 800a806:	2101      	movs	r1, #1
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 faaf 	bl	800ad6c <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a80e:	e008      	b.n	800a822 <USBH_Process+0x42a>

    case HOST_ABORT_STATE:
    default :
      break;
 800a810:	bf00      	nop
 800a812:	e006      	b.n	800a822 <USBH_Process+0x42a>
      break;
 800a814:	bf00      	nop
 800a816:	e004      	b.n	800a822 <USBH_Process+0x42a>
      break;
 800a818:	bf00      	nop
 800a81a:	e002      	b.n	800a822 <USBH_Process+0x42a>
    break;
 800a81c:	bf00      	nop
 800a81e:	e000      	b.n	800a822 <USBH_Process+0x42a>
      break;
 800a820:	bf00      	nop
  }
  return USBH_OK;
 800a822:	2300      	movs	r3, #0
}
 800a824:	4618      	mov	r0, r3
 800a826:	3710      	adds	r7, #16
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b088      	sub	sp, #32
 800a830:	af04      	add	r7, sp, #16
 800a832:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a834:	2301      	movs	r3, #1
 800a836:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a838:	2301      	movs	r3, #1
 800a83a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	785b      	ldrb	r3, [r3, #1]
 800a840:	2b07      	cmp	r3, #7
 800a842:	f200 81db 	bhi.w	800abfc <USBH_HandleEnum+0x3d0>
 800a846:	a201      	add	r2, pc, #4	@ (adr r2, 800a84c <USBH_HandleEnum+0x20>)
 800a848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a84c:	0800a86d 	.word	0x0800a86d
 800a850:	0800a927 	.word	0x0800a927
 800a854:	0800a991 	.word	0x0800a991
 800a858:	0800aa1b 	.word	0x0800aa1b
 800a85c:	0800aa85 	.word	0x0800aa85
 800a860:	0800aaf5 	.word	0x0800aaf5
 800a864:	0800ab5f 	.word	0x0800ab5f
 800a868:	0800abbd 	.word	0x0800abbd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a86c:	2108      	movs	r1, #8
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 fac6 	bl	800ae00 <USBH_Get_DevDesc>
 800a874:	4603      	mov	r3, r0
 800a876:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a878:	7bbb      	ldrb	r3, [r7, #14]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d12e      	bne.n	800a8dc <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2201      	movs	r2, #1
 800a88c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	7919      	ldrb	r1, [r3, #4]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a8a2:	9202      	str	r2, [sp, #8]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	9201      	str	r2, [sp, #4]
 800a8a8:	9300      	str	r3, [sp, #0]
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	2280      	movs	r2, #128	@ 0x80
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f001 f9be 	bl	800bc30 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	7959      	ldrb	r1, [r3, #5]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a8c8:	9202      	str	r2, [sp, #8]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	9201      	str	r2, [sp, #4]
 800a8ce:	9300      	str	r3, [sp, #0]
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f001 f9ab 	bl	800bc30 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a8da:	e191      	b.n	800ac00 <USBH_HandleEnum+0x3d4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8dc:	7bbb      	ldrb	r3, [r7, #14]
 800a8de:	2b03      	cmp	r3, #3
 800a8e0:	f040 818e 	bne.w	800ac00 <USBH_HandleEnum+0x3d4>
        phost->device.EnumCnt++;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	b2da      	uxtb	r2, r3
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a8fa:	2b03      	cmp	r3, #3
 800a8fc:	d903      	bls.n	800a906 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	220d      	movs	r2, #13
 800a902:	701a      	strb	r2, [r3, #0]
      break;
 800a904:	e17c      	b.n	800ac00 <USBH_HandleEnum+0x3d4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	795b      	ldrb	r3, [r3, #5]
 800a90a:	4619      	mov	r1, r3
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f001 f9df 	bl	800bcd0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	791b      	ldrb	r3, [r3, #4]
 800a916:	4619      	mov	r1, r3
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f001 f9d9 	bl	800bcd0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2200      	movs	r2, #0
 800a922:	701a      	strb	r2, [r3, #0]
      break;
 800a924:	e16c      	b.n	800ac00 <USBH_HandleEnum+0x3d4>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a926:	2112      	movs	r1, #18
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 fa69 	bl	800ae00 <USBH_Get_DevDesc>
 800a92e:	4603      	mov	r3, r0
 800a930:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a932:	7bbb      	ldrb	r3, [r7, #14]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d103      	bne.n	800a940 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2202      	movs	r2, #2
 800a93c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a93e:	e161      	b.n	800ac04 <USBH_HandleEnum+0x3d8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a940:	7bbb      	ldrb	r3, [r7, #14]
 800a942:	2b03      	cmp	r3, #3
 800a944:	f040 815e 	bne.w	800ac04 <USBH_HandleEnum+0x3d8>
        phost->device.EnumCnt++;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a94e:	3301      	adds	r3, #1
 800a950:	b2da      	uxtb	r2, r3
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a95e:	2b03      	cmp	r3, #3
 800a960:	d903      	bls.n	800a96a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	220d      	movs	r2, #13
 800a966:	701a      	strb	r2, [r3, #0]
      break;
 800a968:	e14c      	b.n	800ac04 <USBH_HandleEnum+0x3d8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	795b      	ldrb	r3, [r3, #5]
 800a96e:	4619      	mov	r1, r3
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f001 f9ad 	bl	800bcd0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	791b      	ldrb	r3, [r3, #4]
 800a97a:	4619      	mov	r1, r3
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f001 f9a7 	bl	800bcd0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	701a      	strb	r2, [r3, #0]
      break;
 800a98e:	e139      	b.n	800ac04 <USBH_HandleEnum+0x3d8>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a990:	2101      	movs	r1, #1
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 faf3 	bl	800af7e <USBH_SetAddress>
 800a998:	4603      	mov	r3, r0
 800a99a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a99c:	7bbb      	ldrb	r3, [r7, #14]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d130      	bne.n	800aa04 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a9a2:	2002      	movs	r0, #2
 800a9a4:	f005 ffb1 	bl	801090a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2203      	movs	r2, #3
 800a9b4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	7919      	ldrb	r1, [r3, #4]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a9ca:	9202      	str	r2, [sp, #8]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	9201      	str	r2, [sp, #4]
 800a9d0:	9300      	str	r3, [sp, #0]
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2280      	movs	r2, #128	@ 0x80
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f001 f92a 	bl	800bc30 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	7959      	ldrb	r1, [r3, #5]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a9f0:	9202      	str	r2, [sp, #8]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	9201      	str	r2, [sp, #4]
 800a9f6:	9300      	str	r3, [sp, #0]
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f001 f917 	bl	800bc30 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800aa02:	e101      	b.n	800ac08 <USBH_HandleEnum+0x3dc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa04:	7bbb      	ldrb	r3, [r7, #14]
 800aa06:	2b03      	cmp	r3, #3
 800aa08:	f040 80fe 	bne.w	800ac08 <USBH_HandleEnum+0x3dc>
        phost->gState = HOST_ABORT_STATE;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	220d      	movs	r2, #13
 800aa10:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2200      	movs	r2, #0
 800aa16:	705a      	strb	r2, [r3, #1]
      break;
 800aa18:	e0f6      	b.n	800ac08 <USBH_HandleEnum+0x3dc>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800aa1a:	2109      	movs	r1, #9
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fa1b 	bl	800ae58 <USBH_Get_CfgDesc>
 800aa22:	4603      	mov	r3, r0
 800aa24:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa26:	7bbb      	ldrb	r3, [r7, #14]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d103      	bne.n	800aa34 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2204      	movs	r2, #4
 800aa30:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aa32:	e0eb      	b.n	800ac0c <USBH_HandleEnum+0x3e0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa34:	7bbb      	ldrb	r3, [r7, #14]
 800aa36:	2b03      	cmp	r3, #3
 800aa38:	f040 80e8 	bne.w	800ac0c <USBH_HandleEnum+0x3e0>
        phost->device.EnumCnt++;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa42:	3301      	adds	r3, #1
 800aa44:	b2da      	uxtb	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa52:	2b03      	cmp	r3, #3
 800aa54:	d903      	bls.n	800aa5e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	220d      	movs	r2, #13
 800aa5a:	701a      	strb	r2, [r3, #0]
      break;
 800aa5c:	e0d6      	b.n	800ac0c <USBH_HandleEnum+0x3e0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	795b      	ldrb	r3, [r3, #5]
 800aa62:	4619      	mov	r1, r3
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f001 f933 	bl	800bcd0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	791b      	ldrb	r3, [r3, #4]
 800aa6e:	4619      	mov	r1, r3
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f001 f92d 	bl	800bcd0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	701a      	strb	r2, [r3, #0]
      break;
 800aa82:	e0c3      	b.n	800ac0c <USBH_HandleEnum+0x3e0>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 f9e3 	bl	800ae58 <USBH_Get_CfgDesc>
 800aa92:	4603      	mov	r3, r0
 800aa94:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa96:	7bbb      	ldrb	r3, [r7, #14]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d103      	bne.n	800aaa4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2205      	movs	r2, #5
 800aaa0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aaa2:	e0b5      	b.n	800ac10 <USBH_HandleEnum+0x3e4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aaa4:	7bbb      	ldrb	r3, [r7, #14]
 800aaa6:	2b03      	cmp	r3, #3
 800aaa8:	f040 80b2 	bne.w	800ac10 <USBH_HandleEnum+0x3e4>
        phost->device.EnumCnt++;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aab2:	3301      	adds	r3, #1
 800aab4:	b2da      	uxtb	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aac2:	2b03      	cmp	r3, #3
 800aac4:	d903      	bls.n	800aace <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	220d      	movs	r2, #13
 800aaca:	701a      	strb	r2, [r3, #0]
      break;
 800aacc:	e0a0      	b.n	800ac10 <USBH_HandleEnum+0x3e4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	795b      	ldrb	r3, [r3, #5]
 800aad2:	4619      	mov	r1, r3
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f001 f8fb 	bl	800bcd0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	791b      	ldrb	r3, [r3, #4]
 800aade:	4619      	mov	r1, r3
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f001 f8f5 	bl	800bcd0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	701a      	strb	r2, [r3, #0]
      break;
 800aaf2:	e08d      	b.n	800ac10 <USBH_HandleEnum+0x3e4>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d025      	beq.n	800ab4a <USBH_HandleEnum+0x31e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ab0a:	23ff      	movs	r3, #255	@ 0xff
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 f9cd 	bl	800aeac <USBH_Get_StringDesc>
 800ab12:	4603      	mov	r3, r0
 800ab14:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ab16:	7bbb      	ldrb	r3, [r7, #14]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d109      	bne.n	800ab30 <USBH_HandleEnum+0x304>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2206      	movs	r2, #6
 800ab20:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800ab22:	2300      	movs	r3, #0
 800ab24:	2200      	movs	r2, #0
 800ab26:	2105      	movs	r1, #5
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 f91f 	bl	800ad6c <USBH_OS_PutMessage>

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800ab2e:	e071      	b.n	800ac14 <USBH_HandleEnum+0x3e8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab30:	7bbb      	ldrb	r3, [r7, #14]
 800ab32:	2b03      	cmp	r3, #3
 800ab34:	d16e      	bne.n	800ac14 <USBH_HandleEnum+0x3e8>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2206      	movs	r2, #6
 800ab3a:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	2200      	movs	r2, #0
 800ab40:	2105      	movs	r1, #5
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 f912 	bl	800ad6c <USBH_OS_PutMessage>
      break;
 800ab48:	e064      	b.n	800ac14 <USBH_HandleEnum+0x3e8>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2206      	movs	r2, #6
 800ab4e:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800ab50:	2300      	movs	r3, #0
 800ab52:	2200      	movs	r2, #0
 800ab54:	2105      	movs	r1, #5
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 f908 	bl	800ad6c <USBH_OS_PutMessage>
      break;
 800ab5c:	e05a      	b.n	800ac14 <USBH_HandleEnum+0x3e8>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d01f      	beq.n	800aba8 <USBH_HandleEnum+0x37c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab74:	23ff      	movs	r3, #255	@ 0xff
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 f998 	bl	800aeac <USBH_Get_StringDesc>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ab80:	7bbb      	ldrb	r3, [r7, #14]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d103      	bne.n	800ab8e <USBH_HandleEnum+0x362>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2207      	movs	r2, #7
 800ab8a:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800ab8c:	e044      	b.n	800ac18 <USBH_HandleEnum+0x3ec>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab8e:	7bbb      	ldrb	r3, [r7, #14]
 800ab90:	2b03      	cmp	r3, #3
 800ab92:	d141      	bne.n	800ac18 <USBH_HandleEnum+0x3ec>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2207      	movs	r2, #7
 800ab98:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	2105      	movs	r1, #5
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 f8e3 	bl	800ad6c <USBH_OS_PutMessage>
      break;
 800aba6:	e037      	b.n	800ac18 <USBH_HandleEnum+0x3ec>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2207      	movs	r2, #7
 800abac:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800abae:	2300      	movs	r3, #0
 800abb0:	2200      	movs	r2, #0
 800abb2:	2105      	movs	r1, #5
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 f8d9 	bl	800ad6c <USBH_OS_PutMessage>
      break;
 800abba:	e02d      	b.n	800ac18 <USBH_HandleEnum+0x3ec>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d017      	beq.n	800abf6 <USBH_HandleEnum+0x3ca>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800abd2:	23ff      	movs	r3, #255	@ 0xff
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 f969 	bl	800aeac <USBH_Get_StringDesc>
 800abda:	4603      	mov	r3, r0
 800abdc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800abde:	7bbb      	ldrb	r3, [r7, #14]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d102      	bne.n	800abea <USBH_HandleEnum+0x3be>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800abe4:	2300      	movs	r3, #0
 800abe6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800abe8:	e018      	b.n	800ac1c <USBH_HandleEnum+0x3f0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abea:	7bbb      	ldrb	r3, [r7, #14]
 800abec:	2b03      	cmp	r3, #3
 800abee:	d115      	bne.n	800ac1c <USBH_HandleEnum+0x3f0>
          Status = USBH_OK;
 800abf0:	2300      	movs	r3, #0
 800abf2:	73fb      	strb	r3, [r7, #15]
      break;
 800abf4:	e012      	b.n	800ac1c <USBH_HandleEnum+0x3f0>
        Status = USBH_OK;
 800abf6:	2300      	movs	r3, #0
 800abf8:	73fb      	strb	r3, [r7, #15]
      break;
 800abfa:	e00f      	b.n	800ac1c <USBH_HandleEnum+0x3f0>

    default:
      break;
 800abfc:	bf00      	nop
 800abfe:	e00e      	b.n	800ac1e <USBH_HandleEnum+0x3f2>
      break;
 800ac00:	bf00      	nop
 800ac02:	e00c      	b.n	800ac1e <USBH_HandleEnum+0x3f2>
      break;
 800ac04:	bf00      	nop
 800ac06:	e00a      	b.n	800ac1e <USBH_HandleEnum+0x3f2>
      break;
 800ac08:	bf00      	nop
 800ac0a:	e008      	b.n	800ac1e <USBH_HandleEnum+0x3f2>
      break;
 800ac0c:	bf00      	nop
 800ac0e:	e006      	b.n	800ac1e <USBH_HandleEnum+0x3f2>
      break;
 800ac10:	bf00      	nop
 800ac12:	e004      	b.n	800ac1e <USBH_HandleEnum+0x3f2>
      break;
 800ac14:	bf00      	nop
 800ac16:	e002      	b.n	800ac1e <USBH_HandleEnum+0x3f2>
      break;
 800ac18:	bf00      	nop
 800ac1a:	e000      	b.n	800ac1e <USBH_HandleEnum+0x3f2>
      break;
 800ac1c:	bf00      	nop
  }
  return Status;
 800ac1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3710      	adds	r7, #16
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	683a      	ldr	r2, [r7, #0]
 800ac36:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800ac3a:	bf00      	nop
 800ac3c:	370c      	adds	r7, #12
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr

0800ac46 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b082      	sub	sp, #8
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ac54:	1c5a      	adds	r2, r3, #1
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 f804 	bl	800ac6a <USBH_HandleSof>
}
 800ac62:	bf00      	nop
 800ac64:	3708      	adds	r7, #8
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b082      	sub	sp, #8
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	2b0b      	cmp	r3, #11
 800ac7a:	d10a      	bne.n	800ac92 <USBH_HandleSof+0x28>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d005      	beq.n	800ac92 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac8c:	699b      	ldr	r3, [r3, #24]
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	4798      	blx	r3
  }
}
 800ac92:	bf00      	nop
 800ac94:	3708      	adds	r7, #8
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b082      	sub	sp, #8
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2201      	movs	r2, #1
 800aca6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800acaa:	2300      	movs	r3, #0
 800acac:	2200      	movs	r2, #0
 800acae:	2101      	movs	r1, #1
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 f85b 	bl	800ad6c <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 800acb6:	bf00      	nop
}
 800acb8:	3708      	adds	r7, #8
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}

0800acbe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800acbe:	b480      	push	{r7}
 800acc0:	b083      	sub	sp, #12
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2201      	movs	r2, #1
 800acd2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800acd6:	bf00      	nop
}
 800acd8:	370c      	adds	r7, #12
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr

0800ace2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b082      	sub	sp, #8
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2201      	movs	r2, #1
 800acee:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2200      	movs	r2, #0
 800acfe:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800ad02:	2300      	movs	r3, #0
 800ad04:	2200      	movs	r2, #0
 800ad06:	2101      	movs	r1, #1
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 f82f 	bl	800ad6c <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3708      	adds	r7, #8
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2201      	movs	r2, #1
 800ad24:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f005 fc9a 	bl	8010672 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	791b      	ldrb	r3, [r3, #4]
 800ad42:	4619      	mov	r1, r3
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 ffc3 	bl	800bcd0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	795b      	ldrb	r3, [r3, #5]
 800ad4e:	4619      	mov	r1, r3
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 ffbd 	bl	800bcd0 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800ad56:	2300      	movs	r3, #0
 800ad58:	2200      	movs	r2, #0
 800ad5a:	2101      	movs	r1, #1
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 f805 	bl	800ad6c <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800ad62:	2300      	movs	r3, #0
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3708      	adds	r7, #8
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	607a      	str	r2, [r7, #4]
 800ad76:	603b      	str	r3, [r7, #0]
 800ad78:	460b      	mov	r3, r1
 800ad7a:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 800ad7c:	7afa      	ldrb	r2, [r7, #11]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
  if (available_spaces != 0U)
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
  }
#else
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f001 fa8c 	bl	800c2a8 <osMessageQueueGetSpace>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d00a      	beq.n	800adac <USBH_OS_PutMessage+0x40>
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	b2da      	uxtb	r2, r3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f001 f9c0 	bl	800c12c <osMessageQueuePut>
  }
#endif /* (osCMSIS < 0x20000U) */
}
 800adac:	bf00      	nop
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800adc8:	f04f 33ff 	mov.w	r3, #4294967295
 800adcc:	2200      	movs	r2, #0
 800adce:	f001 fa0d 	bl	800c1ec <osMessageQueueGet>
 800add2:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1f0      	bne.n	800adbc <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f7ff fb0c 	bl	800a3f8 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800ade0:	e7ec      	b.n	800adbc <USBH_Process_OS+0x8>

0800ade2 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b082      	sub	sp, #8
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800adea:	2300      	movs	r3, #0
 800adec:	2200      	movs	r2, #0
 800adee:	2101      	movs	r1, #1
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f7ff ffbb 	bl	800ad6c <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3708      	adds	r7, #8
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b086      	sub	sp, #24
 800ae04:	af02      	add	r7, sp, #8
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	460b      	mov	r3, r1
 800ae0a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800ae0c:	887b      	ldrh	r3, [r7, #2]
 800ae0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae12:	d901      	bls.n	800ae18 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ae14:	2303      	movs	r3, #3
 800ae16:	e01b      	b.n	800ae50 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ae1e:	887b      	ldrh	r3, [r7, #2]
 800ae20:	9300      	str	r3, [sp, #0]
 800ae22:	4613      	mov	r3, r2
 800ae24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ae28:	2100      	movs	r1, #0
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 f872 	bl	800af14 <USBH_GetDescriptor>
 800ae30:	4603      	mov	r3, r0
 800ae32:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800ae34:	7bfb      	ldrb	r3, [r7, #15]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d109      	bne.n	800ae4e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ae40:	887a      	ldrh	r2, [r7, #2]
 800ae42:	4619      	mov	r1, r3
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 f929 	bl	800b09c <USBH_ParseDevDesc>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ae4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3710      	adds	r7, #16
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b086      	sub	sp, #24
 800ae5c:	af02      	add	r7, sp, #8
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	460b      	mov	r3, r1
 800ae62:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	331c      	adds	r3, #28
 800ae68:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800ae6a:	887b      	ldrh	r3, [r7, #2]
 800ae6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae70:	d901      	bls.n	800ae76 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ae72:	2303      	movs	r3, #3
 800ae74:	e016      	b.n	800aea4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ae76:	887b      	ldrh	r3, [r7, #2]
 800ae78:	9300      	str	r3, [sp, #0]
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae80:	2100      	movs	r1, #0
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 f846 	bl	800af14 <USBH_GetDescriptor>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800ae8c:	7bfb      	ldrb	r3, [r7, #15]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d107      	bne.n	800aea2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800ae92:	887b      	ldrh	r3, [r7, #2]
 800ae94:	461a      	mov	r2, r3
 800ae96:	68b9      	ldr	r1, [r7, #8]
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 f9af 	bl	800b1fc <USBH_ParseCfgDesc>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aea2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3710      	adds	r7, #16
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b088      	sub	sp, #32
 800aeb0:	af02      	add	r7, sp, #8
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	607a      	str	r2, [r7, #4]
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	460b      	mov	r3, r1
 800aeba:	72fb      	strb	r3, [r7, #11]
 800aebc:	4613      	mov	r3, r2
 800aebe:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800aec0:	893b      	ldrh	r3, [r7, #8]
 800aec2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aec6:	d802      	bhi.n	800aece <USBH_Get_StringDesc+0x22>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d101      	bne.n	800aed2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800aece:	2303      	movs	r3, #3
 800aed0:	e01c      	b.n	800af0c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800aed2:	7afb      	ldrb	r3, [r7, #11]
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800aeda:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800aee2:	893b      	ldrh	r3, [r7, #8]
 800aee4:	9300      	str	r3, [sp, #0]
 800aee6:	460b      	mov	r3, r1
 800aee8:	2100      	movs	r1, #0
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f000 f812 	bl	800af14 <USBH_GetDescriptor>
 800aef0:	4603      	mov	r3, r0
 800aef2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800aef4:	7dfb      	ldrb	r3, [r7, #23]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d107      	bne.n	800af0a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800af00:	893a      	ldrh	r2, [r7, #8]
 800af02:	6879      	ldr	r1, [r7, #4]
 800af04:	4618      	mov	r0, r3
 800af06:	f000 fb8c 	bl	800b622 <USBH_ParseStringDesc>
  }

  return status;
 800af0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3718      	adds	r7, #24
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	607b      	str	r3, [r7, #4]
 800af1e:	460b      	mov	r3, r1
 800af20:	72fb      	strb	r3, [r7, #11]
 800af22:	4613      	mov	r3, r2
 800af24:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	789b      	ldrb	r3, [r3, #2]
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d11c      	bne.n	800af68 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800af2e:	7afb      	ldrb	r3, [r7, #11]
 800af30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800af34:	b2da      	uxtb	r2, r3
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2206      	movs	r2, #6
 800af3e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	893a      	ldrh	r2, [r7, #8]
 800af44:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800af46:	893b      	ldrh	r3, [r7, #8]
 800af48:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800af4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800af50:	d104      	bne.n	800af5c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f240 4209 	movw	r2, #1033	@ 0x409
 800af58:	829a      	strh	r2, [r3, #20]
 800af5a:	e002      	b.n	800af62 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2200      	movs	r2, #0
 800af60:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	8b3a      	ldrh	r2, [r7, #24]
 800af66:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800af68:	8b3b      	ldrh	r3, [r7, #24]
 800af6a:	461a      	mov	r2, r3
 800af6c:	6879      	ldr	r1, [r7, #4]
 800af6e:	68f8      	ldr	r0, [r7, #12]
 800af70:	f000 fba4 	bl	800b6bc <USBH_CtlReq>
 800af74:	4603      	mov	r3, r0
}
 800af76:	4618      	mov	r0, r3
 800af78:	3710      	adds	r7, #16
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800af7e:	b580      	push	{r7, lr}
 800af80:	b082      	sub	sp, #8
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
 800af86:	460b      	mov	r3, r1
 800af88:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	789b      	ldrb	r3, [r3, #2]
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d10f      	bne.n	800afb2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2200      	movs	r2, #0
 800af96:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2205      	movs	r2, #5
 800af9c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800af9e:	78fb      	ldrb	r3, [r7, #3]
 800afa0:	b29a      	uxth	r2, r3
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800afb2:	2200      	movs	r2, #0
 800afb4:	2100      	movs	r1, #0
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 fb80 	bl	800b6bc <USBH_CtlReq>
 800afbc:	4603      	mov	r3, r0
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3708      	adds	r7, #8
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b082      	sub	sp, #8
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
 800afce:	460b      	mov	r3, r1
 800afd0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	789b      	ldrb	r3, [r3, #2]
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d10e      	bne.n	800aff8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2209      	movs	r2, #9
 800afe4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	887a      	ldrh	r2, [r7, #2]
 800afea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2200      	movs	r2, #0
 800aff0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aff8:	2200      	movs	r2, #0
 800affa:	2100      	movs	r1, #0
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 fb5d 	bl	800b6bc <USBH_CtlReq>
 800b002:	4603      	mov	r3, r0
}
 800b004:	4618      	mov	r0, r3
 800b006:	3708      	adds	r7, #8
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	460b      	mov	r3, r1
 800b016:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	789b      	ldrb	r3, [r3, #2]
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d10f      	bne.n	800b040 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2203      	movs	r2, #3
 800b02a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b02c:	78fb      	ldrb	r3, [r7, #3]
 800b02e:	b29a      	uxth	r2, r3
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b040:	2200      	movs	r2, #0
 800b042:	2100      	movs	r1, #0
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 fb39 	bl	800b6bc <USBH_CtlReq>
 800b04a:	4603      	mov	r3, r0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3708      	adds	r7, #8
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	460b      	mov	r3, r1
 800b05e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	789b      	ldrb	r3, [r3, #2]
 800b064:	2b01      	cmp	r3, #1
 800b066:	d10f      	bne.n	800b088 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2202      	movs	r2, #2
 800b06c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2201      	movs	r2, #1
 800b072:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2200      	movs	r2, #0
 800b078:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b07a:	78fb      	ldrb	r3, [r7, #3]
 800b07c:	b29a      	uxth	r2, r3
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2200      	movs	r2, #0
 800b086:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b088:	2200      	movs	r2, #0
 800b08a:	2100      	movs	r1, #0
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fb15 	bl	800b6bc <USBH_CtlReq>
 800b092:	4603      	mov	r3, r0
}
 800b094:	4618      	mov	r0, r3
 800b096:	3708      	adds	r7, #8
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b087      	sub	sp, #28
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800b0b0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d101      	bne.n	800b0c0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800b0bc:	2302      	movs	r3, #2
 800b0be:	e094      	b.n	800b1ea <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	781a      	ldrb	r2, [r3, #0]
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	785a      	ldrb	r2, [r3, #1]
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	3302      	adds	r3, #2
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	3303      	adds	r3, #3
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	021b      	lsls	r3, r3, #8
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	b29a      	uxth	r2, r3
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	791a      	ldrb	r2, [r3, #4]
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	795a      	ldrb	r2, [r3, #5]
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	799a      	ldrb	r2, [r3, #6]
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	79da      	ldrb	r2, [r3, #7]
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b110:	2b00      	cmp	r3, #0
 800b112:	d004      	beq.n	800b11e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d11b      	bne.n	800b156 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	79db      	ldrb	r3, [r3, #7]
 800b122:	2b20      	cmp	r3, #32
 800b124:	dc0f      	bgt.n	800b146 <USBH_ParseDevDesc+0xaa>
 800b126:	2b08      	cmp	r3, #8
 800b128:	db0f      	blt.n	800b14a <USBH_ParseDevDesc+0xae>
 800b12a:	3b08      	subs	r3, #8
 800b12c:	4a32      	ldr	r2, [pc, #200]	@ (800b1f8 <USBH_ParseDevDesc+0x15c>)
 800b12e:	fa22 f303 	lsr.w	r3, r2, r3
 800b132:	f003 0301 	and.w	r3, r3, #1
 800b136:	2b00      	cmp	r3, #0
 800b138:	bf14      	ite	ne
 800b13a:	2301      	movne	r3, #1
 800b13c:	2300      	moveq	r3, #0
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	2b00      	cmp	r3, #0
 800b142:	d106      	bne.n	800b152 <USBH_ParseDevDesc+0xb6>
 800b144:	e001      	b.n	800b14a <USBH_ParseDevDesc+0xae>
 800b146:	2b40      	cmp	r3, #64	@ 0x40
 800b148:	d003      	beq.n	800b152 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	2208      	movs	r2, #8
 800b14e:	71da      	strb	r2, [r3, #7]
        break;
 800b150:	e000      	b.n	800b154 <USBH_ParseDevDesc+0xb8>
        break;
 800b152:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800b154:	e00e      	b.n	800b174 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b15c:	2b02      	cmp	r3, #2
 800b15e:	d107      	bne.n	800b170 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	79db      	ldrb	r3, [r3, #7]
 800b164:	2b08      	cmp	r3, #8
 800b166:	d005      	beq.n	800b174 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	2208      	movs	r2, #8
 800b16c:	71da      	strb	r2, [r3, #7]
 800b16e:	e001      	b.n	800b174 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b170:	2303      	movs	r3, #3
 800b172:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800b174:	88fb      	ldrh	r3, [r7, #6]
 800b176:	2b08      	cmp	r3, #8
 800b178:	d936      	bls.n	800b1e8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	3308      	adds	r3, #8
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	461a      	mov	r2, r3
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	3309      	adds	r3, #9
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	021b      	lsls	r3, r3, #8
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	4313      	orrs	r3, r2
 800b18e:	b29a      	uxth	r2, r3
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	330a      	adds	r3, #10
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	461a      	mov	r2, r3
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	330b      	adds	r3, #11
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	021b      	lsls	r3, r3, #8
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	b29a      	uxth	r2, r3
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	330c      	adds	r3, #12
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	330d      	adds	r3, #13
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	021b      	lsls	r3, r3, #8
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	b29a      	uxth	r2, r3
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	7b9a      	ldrb	r2, [r3, #14]
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	7bda      	ldrb	r2, [r3, #15]
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	7c1a      	ldrb	r2, [r3, #16]
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	7c5a      	ldrb	r2, [r3, #17]
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800b1e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	371c      	adds	r7, #28
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	01000101 	.word	0x01000101

0800b1fc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b08c      	sub	sp, #48	@ 0x30
 800b200:	af00      	add	r7, sp, #0
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	60b9      	str	r1, [r7, #8]
 800b206:	4613      	mov	r3, r2
 800b208:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b210:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b212:	2300      	movs	r3, #0
 800b214:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b218:	2300      	movs	r3, #0
 800b21a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800b21e:	2300      	movs	r3, #0
 800b220:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d101      	bne.n	800b22e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800b22a:	2302      	movs	r3, #2
 800b22c:	e0de      	b.n	800b3ec <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800b232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	2b09      	cmp	r3, #9
 800b238:	d002      	beq.n	800b240 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b23c:	2209      	movs	r2, #9
 800b23e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	781a      	ldrb	r2, [r3, #0]
 800b244:	6a3b      	ldr	r3, [r7, #32]
 800b246:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	785a      	ldrb	r2, [r3, #1]
 800b24c:	6a3b      	ldr	r3, [r7, #32]
 800b24e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	3302      	adds	r3, #2
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	461a      	mov	r2, r3
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	3303      	adds	r3, #3
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	021b      	lsls	r3, r3, #8
 800b260:	b29b      	uxth	r3, r3
 800b262:	4313      	orrs	r3, r2
 800b264:	b29b      	uxth	r3, r3
 800b266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b26a:	bf28      	it	cs
 800b26c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800b270:	b29a      	uxth	r2, r3
 800b272:	6a3b      	ldr	r3, [r7, #32]
 800b274:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	791a      	ldrb	r2, [r3, #4]
 800b27a:	6a3b      	ldr	r3, [r7, #32]
 800b27c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	795a      	ldrb	r2, [r3, #5]
 800b282:	6a3b      	ldr	r3, [r7, #32]
 800b284:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	799a      	ldrb	r2, [r3, #6]
 800b28a:	6a3b      	ldr	r3, [r7, #32]
 800b28c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	79da      	ldrb	r2, [r3, #7]
 800b292:	6a3b      	ldr	r3, [r7, #32]
 800b294:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	7a1a      	ldrb	r2, [r3, #8]
 800b29a:	6a3b      	ldr	r3, [r7, #32]
 800b29c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b29e:	88fb      	ldrh	r3, [r7, #6]
 800b2a0:	2b09      	cmp	r3, #9
 800b2a2:	f240 80a1 	bls.w	800b3e8 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800b2a6:	2309      	movs	r3, #9
 800b2a8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b2ae:	e085      	b.n	800b3bc <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b2b0:	f107 0316 	add.w	r3, r7, #22
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2b8:	f000 f9e6 	bl	800b688 <USBH_GetNextDesc>
 800b2bc:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2c0:	785b      	ldrb	r3, [r3, #1]
 800b2c2:	2b04      	cmp	r3, #4
 800b2c4:	d17a      	bne.n	800b3bc <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b2c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	2b09      	cmp	r3, #9
 800b2cc:	d002      	beq.n	800b2d4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d0:	2209      	movs	r2, #9
 800b2d2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b2d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b2d8:	221a      	movs	r2, #26
 800b2da:	fb02 f303 	mul.w	r3, r2, r3
 800b2de:	3308      	adds	r3, #8
 800b2e0:	6a3a      	ldr	r2, [r7, #32]
 800b2e2:	4413      	add	r3, r2
 800b2e4:	3302      	adds	r3, #2
 800b2e6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b2e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b2ea:	69f8      	ldr	r0, [r7, #28]
 800b2ec:	f000 f882 	bl	800b3f4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b2fa:	e043      	b.n	800b384 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b2fc:	f107 0316 	add.w	r3, r7, #22
 800b300:	4619      	mov	r1, r3
 800b302:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b304:	f000 f9c0 	bl	800b688 <USBH_GetNextDesc>
 800b308:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b30c:	785b      	ldrb	r3, [r3, #1]
 800b30e:	2b05      	cmp	r3, #5
 800b310:	d138      	bne.n	800b384 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800b312:	69fb      	ldr	r3, [r7, #28]
 800b314:	795b      	ldrb	r3, [r3, #5]
 800b316:	2b01      	cmp	r3, #1
 800b318:	d113      	bne.n	800b342 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800b31e:	2b02      	cmp	r3, #2
 800b320:	d003      	beq.n	800b32a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b322:	69fb      	ldr	r3, [r7, #28]
 800b324:	799b      	ldrb	r3, [r3, #6]
 800b326:	2b03      	cmp	r3, #3
 800b328:	d10b      	bne.n	800b342 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	79db      	ldrb	r3, [r3, #7]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d10b      	bne.n	800b34a <USBH_ParseCfgDesc+0x14e>
 800b332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	2b09      	cmp	r3, #9
 800b338:	d007      	beq.n	800b34a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800b33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b33c:	2209      	movs	r2, #9
 800b33e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b340:	e003      	b.n	800b34a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b344:	2207      	movs	r2, #7
 800b346:	701a      	strb	r2, [r3, #0]
 800b348:	e000      	b.n	800b34c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b34a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b34c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b350:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b354:	3201      	adds	r2, #1
 800b356:	00d2      	lsls	r2, r2, #3
 800b358:	211a      	movs	r1, #26
 800b35a:	fb01 f303 	mul.w	r3, r1, r3
 800b35e:	4413      	add	r3, r2
 800b360:	3308      	adds	r3, #8
 800b362:	6a3a      	ldr	r2, [r7, #32]
 800b364:	4413      	add	r3, r2
 800b366:	3304      	adds	r3, #4
 800b368:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b36a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b36c:	69b9      	ldr	r1, [r7, #24]
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	f000 f86f 	bl	800b452 <USBH_ParseEPDesc>
 800b374:	4603      	mov	r3, r0
 800b376:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800b37a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b37e:	3301      	adds	r3, #1
 800b380:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b384:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d80a      	bhi.n	800b3a2 <USBH_ParseCfgDesc+0x1a6>
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	791b      	ldrb	r3, [r3, #4]
 800b390:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b394:	429a      	cmp	r2, r3
 800b396:	d204      	bcs.n	800b3a2 <USBH_ParseCfgDesc+0x1a6>
 800b398:	6a3b      	ldr	r3, [r7, #32]
 800b39a:	885a      	ldrh	r2, [r3, #2]
 800b39c:	8afb      	ldrh	r3, [r7, #22]
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d8ac      	bhi.n	800b2fc <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	791b      	ldrb	r3, [r3, #4]
 800b3a6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d201      	bcs.n	800b3b2 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800b3ae:	2303      	movs	r3, #3
 800b3b0:	e01c      	b.n	800b3ec <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800b3b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b3bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d805      	bhi.n	800b3d0 <USBH_ParseCfgDesc+0x1d4>
 800b3c4:	6a3b      	ldr	r3, [r7, #32]
 800b3c6:	885a      	ldrh	r2, [r3, #2]
 800b3c8:	8afb      	ldrh	r3, [r7, #22]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	f63f af70 	bhi.w	800b2b0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b3d0:	6a3b      	ldr	r3, [r7, #32]
 800b3d2:	791b      	ldrb	r3, [r3, #4]
 800b3d4:	2b02      	cmp	r3, #2
 800b3d6:	bf28      	it	cs
 800b3d8:	2302      	movcs	r3, #2
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d201      	bcs.n	800b3e8 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800b3e4:	2303      	movs	r3, #3
 800b3e6:	e001      	b.n	800b3ec <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800b3e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3730      	adds	r7, #48	@ 0x30
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	781a      	ldrb	r2, [r3, #0]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	785a      	ldrb	r2, [r3, #1]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	789a      	ldrb	r2, [r3, #2]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	78da      	ldrb	r2, [r3, #3]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	791a      	ldrb	r2, [r3, #4]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	795a      	ldrb	r2, [r3, #5]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	799a      	ldrb	r2, [r3, #6]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	79da      	ldrb	r2, [r3, #7]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	7a1a      	ldrb	r2, [r3, #8]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	721a      	strb	r2, [r3, #8]
}
 800b446:	bf00      	nop
 800b448:	370c      	adds	r7, #12
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr

0800b452 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800b452:	b480      	push	{r7}
 800b454:	b087      	sub	sp, #28
 800b456:	af00      	add	r7, sp, #0
 800b458:	60f8      	str	r0, [r7, #12]
 800b45a:	60b9      	str	r1, [r7, #8]
 800b45c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b45e:	2300      	movs	r3, #0
 800b460:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	781a      	ldrb	r2, [r3, #0]
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	785a      	ldrb	r2, [r3, #1]
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	789a      	ldrb	r2, [r3, #2]
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	78da      	ldrb	r2, [r3, #3]
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	3304      	adds	r3, #4
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	461a      	mov	r2, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	3305      	adds	r3, #5
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	021b      	lsls	r3, r3, #8
 800b492:	b29b      	uxth	r3, r3
 800b494:	4313      	orrs	r3, r2
 800b496:	b29a      	uxth	r2, r3
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	799a      	ldrb	r2, [r3, #6]
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	889b      	ldrh	r3, [r3, #4]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d009      	beq.n	800b4c0 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b4b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4b4:	d804      	bhi.n	800b4c0 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b4ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4be:	d901      	bls.n	800b4c4 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800b4c0:	2303      	movs	r3, #3
 800b4c2:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d136      	bne.n	800b53c <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	78db      	ldrb	r3, [r3, #3]
 800b4d2:	f003 0303 	and.w	r3, r3, #3
 800b4d6:	2b02      	cmp	r3, #2
 800b4d8:	d108      	bne.n	800b4ec <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	889b      	ldrh	r3, [r3, #4]
 800b4de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4e2:	f240 8097 	bls.w	800b614 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b4e6:	2303      	movs	r3, #3
 800b4e8:	75fb      	strb	r3, [r7, #23]
 800b4ea:	e093      	b.n	800b614 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	78db      	ldrb	r3, [r3, #3]
 800b4f0:	f003 0303 	and.w	r3, r3, #3
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d107      	bne.n	800b508 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	889b      	ldrh	r3, [r3, #4]
 800b4fc:	2b40      	cmp	r3, #64	@ 0x40
 800b4fe:	f240 8089 	bls.w	800b614 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b502:	2303      	movs	r3, #3
 800b504:	75fb      	strb	r3, [r7, #23]
 800b506:	e085      	b.n	800b614 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	78db      	ldrb	r3, [r3, #3]
 800b50c:	f003 0303 	and.w	r3, r3, #3
 800b510:	2b01      	cmp	r3, #1
 800b512:	d005      	beq.n	800b520 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	78db      	ldrb	r3, [r3, #3]
 800b518:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b51c:	2b03      	cmp	r3, #3
 800b51e:	d10a      	bne.n	800b536 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	799b      	ldrb	r3, [r3, #6]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d003      	beq.n	800b530 <USBH_ParseEPDesc+0xde>
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	799b      	ldrb	r3, [r3, #6]
 800b52c:	2b10      	cmp	r3, #16
 800b52e:	d970      	bls.n	800b612 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800b530:	2303      	movs	r3, #3
 800b532:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b534:	e06d      	b.n	800b612 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b536:	2303      	movs	r3, #3
 800b538:	75fb      	strb	r3, [r7, #23]
 800b53a:	e06b      	b.n	800b614 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b542:	2b01      	cmp	r3, #1
 800b544:	d13c      	bne.n	800b5c0 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	78db      	ldrb	r3, [r3, #3]
 800b54a:	f003 0303 	and.w	r3, r3, #3
 800b54e:	2b02      	cmp	r3, #2
 800b550:	d005      	beq.n	800b55e <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	78db      	ldrb	r3, [r3, #3]
 800b556:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d106      	bne.n	800b56c <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	889b      	ldrh	r3, [r3, #4]
 800b562:	2b40      	cmp	r3, #64	@ 0x40
 800b564:	d956      	bls.n	800b614 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b566:	2303      	movs	r3, #3
 800b568:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b56a:	e053      	b.n	800b614 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	78db      	ldrb	r3, [r3, #3]
 800b570:	f003 0303 	and.w	r3, r3, #3
 800b574:	2b01      	cmp	r3, #1
 800b576:	d10e      	bne.n	800b596 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	799b      	ldrb	r3, [r3, #6]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d007      	beq.n	800b590 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800b584:	2b10      	cmp	r3, #16
 800b586:	d803      	bhi.n	800b590 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800b58c:	2b40      	cmp	r3, #64	@ 0x40
 800b58e:	d941      	bls.n	800b614 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b590:	2303      	movs	r3, #3
 800b592:	75fb      	strb	r3, [r7, #23]
 800b594:	e03e      	b.n	800b614 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	78db      	ldrb	r3, [r3, #3]
 800b59a:	f003 0303 	and.w	r3, r3, #3
 800b59e:	2b03      	cmp	r3, #3
 800b5a0:	d10b      	bne.n	800b5ba <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	799b      	ldrb	r3, [r3, #6]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d004      	beq.n	800b5b4 <USBH_ParseEPDesc+0x162>
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	889b      	ldrh	r3, [r3, #4]
 800b5ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b5b2:	d32f      	bcc.n	800b614 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b5b4:	2303      	movs	r3, #3
 800b5b6:	75fb      	strb	r3, [r7, #23]
 800b5b8:	e02c      	b.n	800b614 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b5ba:	2303      	movs	r3, #3
 800b5bc:	75fb      	strb	r3, [r7, #23]
 800b5be:	e029      	b.n	800b614 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d120      	bne.n	800b60c <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	78db      	ldrb	r3, [r3, #3]
 800b5ce:	f003 0303 	and.w	r3, r3, #3
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d106      	bne.n	800b5e4 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	889b      	ldrh	r3, [r3, #4]
 800b5da:	2b08      	cmp	r3, #8
 800b5dc:	d01a      	beq.n	800b614 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b5de:	2303      	movs	r3, #3
 800b5e0:	75fb      	strb	r3, [r7, #23]
 800b5e2:	e017      	b.n	800b614 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	78db      	ldrb	r3, [r3, #3]
 800b5e8:	f003 0303 	and.w	r3, r3, #3
 800b5ec:	2b03      	cmp	r3, #3
 800b5ee:	d10a      	bne.n	800b606 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	799b      	ldrb	r3, [r3, #6]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d003      	beq.n	800b600 <USBH_ParseEPDesc+0x1ae>
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	889b      	ldrh	r3, [r3, #4]
 800b5fc:	2b08      	cmp	r3, #8
 800b5fe:	d909      	bls.n	800b614 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b600:	2303      	movs	r3, #3
 800b602:	75fb      	strb	r3, [r7, #23]
 800b604:	e006      	b.n	800b614 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b606:	2303      	movs	r3, #3
 800b608:	75fb      	strb	r3, [r7, #23]
 800b60a:	e003      	b.n	800b614 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b60c:	2303      	movs	r3, #3
 800b60e:	75fb      	strb	r3, [r7, #23]
 800b610:	e000      	b.n	800b614 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b612:	bf00      	nop
  }

  return status;
 800b614:	7dfb      	ldrb	r3, [r7, #23]
}
 800b616:	4618      	mov	r0, r3
 800b618:	371c      	adds	r7, #28
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr

0800b622 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b622:	b480      	push	{r7}
 800b624:	b087      	sub	sp, #28
 800b626:	af00      	add	r7, sp, #0
 800b628:	60f8      	str	r0, [r7, #12]
 800b62a:	60b9      	str	r1, [r7, #8]
 800b62c:	4613      	mov	r3, r2
 800b62e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	3301      	adds	r3, #1
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	2b03      	cmp	r3, #3
 800b638:	d120      	bne.n	800b67c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	1e9a      	subs	r2, r3, #2
 800b640:	88fb      	ldrh	r3, [r7, #6]
 800b642:	4293      	cmp	r3, r2
 800b644:	bf28      	it	cs
 800b646:	4613      	movcs	r3, r2
 800b648:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	3302      	adds	r3, #2
 800b64e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b650:	2300      	movs	r3, #0
 800b652:	82fb      	strh	r3, [r7, #22]
 800b654:	e00b      	b.n	800b66e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b656:	8afb      	ldrh	r3, [r7, #22]
 800b658:	68fa      	ldr	r2, [r7, #12]
 800b65a:	4413      	add	r3, r2
 800b65c:	781a      	ldrb	r2, [r3, #0]
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	3301      	adds	r3, #1
 800b666:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b668:	8afb      	ldrh	r3, [r7, #22]
 800b66a:	3302      	adds	r3, #2
 800b66c:	82fb      	strh	r3, [r7, #22]
 800b66e:	8afa      	ldrh	r2, [r7, #22]
 800b670:	8abb      	ldrh	r3, [r7, #20]
 800b672:	429a      	cmp	r2, r3
 800b674:	d3ef      	bcc.n	800b656 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	2200      	movs	r2, #0
 800b67a:	701a      	strb	r2, [r3, #0]
  }
}
 800b67c:	bf00      	nop
 800b67e:	371c      	adds	r7, #28
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr

0800b688 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b688:	b480      	push	{r7}
 800b68a:	b085      	sub	sp, #20
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	881b      	ldrh	r3, [r3, #0]
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	7812      	ldrb	r2, [r2, #0]
 800b69a:	4413      	add	r3, r2
 800b69c:	b29a      	uxth	r2, r3
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	4413      	add	r3, r2
 800b6ac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3714      	adds	r7, #20
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b086      	sub	sp, #24
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	789b      	ldrb	r3, [r3, #2]
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d002      	beq.n	800b6dc <USBH_CtlReq+0x20>
 800b6d6:	2b02      	cmp	r3, #2
 800b6d8:	d015      	beq.n	800b706 <USBH_CtlReq+0x4a>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800b6da:	e033      	b.n	800b744 <USBH_CtlReq+0x88>
      phost->Control.buff = buff;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	68ba      	ldr	r2, [r7, #8]
 800b6e0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	88fa      	ldrh	r2, [r7, #6]
 800b6e6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2202      	movs	r2, #2
 800b6f2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	75fb      	strb	r3, [r7, #23]
      USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	2103      	movs	r1, #3
 800b6fe:	68f8      	ldr	r0, [r7, #12]
 800b700:	f7ff fb34 	bl	800ad6c <USBH_OS_PutMessage>
      break;
 800b704:	e01e      	b.n	800b744 <USBH_CtlReq+0x88>
      status = USBH_HandleControl(phost);
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f000 f822 	bl	800b750 <USBH_HandleControl>
 800b70c:	4603      	mov	r3, r0
 800b70e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b710:	7dfb      	ldrb	r3, [r7, #23]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d002      	beq.n	800b71c <USBH_CtlReq+0x60>
 800b716:	7dfb      	ldrb	r3, [r7, #23]
 800b718:	2b03      	cmp	r3, #3
 800b71a:	d106      	bne.n	800b72a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2201      	movs	r2, #1
 800b720:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2200      	movs	r2, #0
 800b726:	761a      	strb	r2, [r3, #24]
 800b728:	e005      	b.n	800b736 <USBH_CtlReq+0x7a>
      else if (status == USBH_FAIL)
 800b72a:	7dfb      	ldrb	r3, [r7, #23]
 800b72c:	2b02      	cmp	r3, #2
 800b72e:	d102      	bne.n	800b736 <USBH_CtlReq+0x7a>
        phost->RequestState = CMD_SEND;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2201      	movs	r2, #1
 800b734:	709a      	strb	r2, [r3, #2]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b736:	2300      	movs	r3, #0
 800b738:	2200      	movs	r2, #0
 800b73a:	2103      	movs	r1, #3
 800b73c:	68f8      	ldr	r0, [r7, #12]
 800b73e:	f7ff fb15 	bl	800ad6c <USBH_OS_PutMessage>
      break;
 800b742:	bf00      	nop
  }
  return status;
 800b744:	7dfb      	ldrb	r3, [r7, #23]
}
 800b746:	4618      	mov	r0, r3
 800b748:	3718      	adds	r7, #24
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
	...

0800b750 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b086      	sub	sp, #24
 800b754:	af02      	add	r7, sp, #8
 800b756:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b758:	2301      	movs	r3, #1
 800b75a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b75c:	2300      	movs	r3, #0
 800b75e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	7e1b      	ldrb	r3, [r3, #24]
 800b764:	3b01      	subs	r3, #1
 800b766:	2b0a      	cmp	r3, #10
 800b768:	f200 81b2 	bhi.w	800bad0 <USBH_HandleControl+0x380>
 800b76c:	a201      	add	r2, pc, #4	@ (adr r2, 800b774 <USBH_HandleControl+0x24>)
 800b76e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b772:	bf00      	nop
 800b774:	0800b7a1 	.word	0x0800b7a1
 800b778:	0800b7bb 	.word	0x0800b7bb
 800b77c:	0800b83d 	.word	0x0800b83d
 800b780:	0800b863 	.word	0x0800b863
 800b784:	0800b8c1 	.word	0x0800b8c1
 800b788:	0800b8eb 	.word	0x0800b8eb
 800b78c:	0800b96d 	.word	0x0800b96d
 800b790:	0800b98f 	.word	0x0800b98f
 800b794:	0800b9f1 	.word	0x0800b9f1
 800b798:	0800ba17 	.word	0x0800ba17
 800b79c:	0800ba79 	.word	0x0800ba79
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f103 0110 	add.w	r1, r3, #16
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	795b      	ldrb	r3, [r3, #5]
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 f99f 	bl	800baf0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2202      	movs	r2, #2
 800b7b6:	761a      	strb	r2, [r3, #24]
      break;
 800b7b8:	e195      	b.n	800bae6 <USBH_HandleControl+0x396>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	795b      	ldrb	r3, [r3, #5]
 800b7be:	4619      	mov	r1, r3
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f005 f845 	bl	8010850 <USBH_LL_GetURBState>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b7ca:	7bbb      	ldrb	r3, [r7, #14]
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d124      	bne.n	800b81a <USBH_HandleControl+0xca>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	7c1b      	ldrb	r3, [r3, #16]
 800b7d4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b7d8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	8adb      	ldrh	r3, [r3, #22]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d00a      	beq.n	800b7f8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b7e2:	7b7b      	ldrb	r3, [r7, #13]
 800b7e4:	2b80      	cmp	r3, #128	@ 0x80
 800b7e6:	d103      	bne.n	800b7f0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2203      	movs	r2, #3
 800b7ec:	761a      	strb	r2, [r3, #24]
 800b7ee:	e00d      	b.n	800b80c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2205      	movs	r2, #5
 800b7f4:	761a      	strb	r2, [r3, #24]
 800b7f6:	e009      	b.n	800b80c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b7f8:	7b7b      	ldrb	r3, [r7, #13]
 800b7fa:	2b80      	cmp	r3, #128	@ 0x80
 800b7fc:	d103      	bne.n	800b806 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2209      	movs	r2, #9
 800b802:	761a      	strb	r2, [r3, #24]
 800b804:	e002      	b.n	800b80c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2207      	movs	r2, #7
 800b80a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b80c:	2300      	movs	r3, #0
 800b80e:	2200      	movs	r2, #0
 800b810:	2103      	movs	r1, #3
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f7ff faaa 	bl	800ad6c <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b818:	e15c      	b.n	800bad4 <USBH_HandleControl+0x384>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b81a:	7bbb      	ldrb	r3, [r7, #14]
 800b81c:	2b04      	cmp	r3, #4
 800b81e:	d003      	beq.n	800b828 <USBH_HandleControl+0xd8>
 800b820:	7bbb      	ldrb	r3, [r7, #14]
 800b822:	2b02      	cmp	r3, #2
 800b824:	f040 8156 	bne.w	800bad4 <USBH_HandleControl+0x384>
          phost->Control.state = CTRL_ERROR;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	220b      	movs	r2, #11
 800b82c:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b82e:	2300      	movs	r3, #0
 800b830:	2200      	movs	r2, #0
 800b832:	2103      	movs	r1, #3
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f7ff fa99 	bl	800ad6c <USBH_OS_PutMessage>
      break;
 800b83a:	e14b      	b.n	800bad4 <USBH_HandleControl+0x384>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b842:	b29a      	uxth	r2, r3
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6899      	ldr	r1, [r3, #8]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	899a      	ldrh	r2, [r3, #12]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	791b      	ldrb	r3, [r3, #4]
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 f98a 	bl	800bb6e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2204      	movs	r2, #4
 800b85e:	761a      	strb	r2, [r3, #24]
      break;
 800b860:	e141      	b.n	800bae6 <USBH_HandleControl+0x396>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	791b      	ldrb	r3, [r3, #4]
 800b866:	4619      	mov	r1, r3
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f004 fff1 	bl	8010850 <USBH_LL_GetURBState>
 800b86e:	4603      	mov	r3, r0
 800b870:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b872:	7bbb      	ldrb	r3, [r7, #14]
 800b874:	2b01      	cmp	r3, #1
 800b876:	d109      	bne.n	800b88c <USBH_HandleControl+0x13c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2209      	movs	r2, #9
 800b87c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b87e:	2300      	movs	r3, #0
 800b880:	2200      	movs	r2, #0
 800b882:	2103      	movs	r1, #3
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f7ff fa71 	bl	800ad6c <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b88a:	e125      	b.n	800bad8 <USBH_HandleControl+0x388>
      else if (URB_Status == USBH_URB_STALL)
 800b88c:	7bbb      	ldrb	r3, [r7, #14]
 800b88e:	2b05      	cmp	r3, #5
 800b890:	d108      	bne.n	800b8a4 <USBH_HandleControl+0x154>
        status = USBH_NOT_SUPPORTED;
 800b892:	2303      	movs	r3, #3
 800b894:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b896:	2300      	movs	r3, #0
 800b898:	2200      	movs	r2, #0
 800b89a:	2103      	movs	r1, #3
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f7ff fa65 	bl	800ad6c <USBH_OS_PutMessage>
      break;
 800b8a2:	e119      	b.n	800bad8 <USBH_HandleControl+0x388>
        if (URB_Status == USBH_URB_ERROR)
 800b8a4:	7bbb      	ldrb	r3, [r7, #14]
 800b8a6:	2b04      	cmp	r3, #4
 800b8a8:	f040 8116 	bne.w	800bad8 <USBH_HandleControl+0x388>
          phost->Control.state = CTRL_ERROR;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	220b      	movs	r2, #11
 800b8b0:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	2103      	movs	r1, #3
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f7ff fa57 	bl	800ad6c <USBH_OS_PutMessage>
      break;
 800b8be:	e10b      	b.n	800bad8 <USBH_HandleControl+0x388>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6899      	ldr	r1, [r3, #8]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	899a      	ldrh	r2, [r3, #12]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	795b      	ldrb	r3, [r3, #5]
 800b8cc:	2001      	movs	r0, #1
 800b8ce:	9000      	str	r0, [sp, #0]
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 f927 	bl	800bb24 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b8dc:	b29a      	uxth	r2, r3
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2206      	movs	r2, #6
 800b8e6:	761a      	strb	r2, [r3, #24]
      break;
 800b8e8:	e0fd      	b.n	800bae6 <USBH_HandleControl+0x396>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	795b      	ldrb	r3, [r3, #5]
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f004 ffad 	bl	8010850 <USBH_LL_GetURBState>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b8fa:	7bbb      	ldrb	r3, [r7, #14]
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d109      	bne.n	800b914 <USBH_HandleControl+0x1c4>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2207      	movs	r2, #7
 800b904:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b906:	2300      	movs	r3, #0
 800b908:	2200      	movs	r2, #0
 800b90a:	2103      	movs	r1, #3
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f7ff fa2d 	bl	800ad6c <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b912:	e0e3      	b.n	800badc <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_STALL)
 800b914:	7bbb      	ldrb	r3, [r7, #14]
 800b916:	2b05      	cmp	r3, #5
 800b918:	d10b      	bne.n	800b932 <USBH_HandleControl+0x1e2>
        phost->Control.state = CTRL_STALLED;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	220c      	movs	r2, #12
 800b91e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b920:	2303      	movs	r3, #3
 800b922:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b924:	2300      	movs	r3, #0
 800b926:	2200      	movs	r2, #0
 800b928:	2103      	movs	r1, #3
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f7ff fa1e 	bl	800ad6c <USBH_OS_PutMessage>
      break;
 800b930:	e0d4      	b.n	800badc <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b932:	7bbb      	ldrb	r3, [r7, #14]
 800b934:	2b02      	cmp	r3, #2
 800b936:	d109      	bne.n	800b94c <USBH_HandleControl+0x1fc>
        phost->Control.state = CTRL_DATA_OUT;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2205      	movs	r2, #5
 800b93c:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b93e:	2300      	movs	r3, #0
 800b940:	2200      	movs	r2, #0
 800b942:	2103      	movs	r1, #3
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f7ff fa11 	bl	800ad6c <USBH_OS_PutMessage>
      break;
 800b94a:	e0c7      	b.n	800badc <USBH_HandleControl+0x38c>
        if (URB_Status == USBH_URB_ERROR)
 800b94c:	7bbb      	ldrb	r3, [r7, #14]
 800b94e:	2b04      	cmp	r3, #4
 800b950:	f040 80c4 	bne.w	800badc <USBH_HandleControl+0x38c>
          phost->Control.state = CTRL_ERROR;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	220b      	movs	r2, #11
 800b958:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b95a:	2302      	movs	r3, #2
 800b95c:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b95e:	2300      	movs	r3, #0
 800b960:	2200      	movs	r2, #0
 800b962:	2103      	movs	r1, #3
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f7ff fa01 	bl	800ad6c <USBH_OS_PutMessage>
      break;
 800b96a:	e0b7      	b.n	800badc <USBH_HandleControl+0x38c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	791b      	ldrb	r3, [r3, #4]
 800b970:	2200      	movs	r2, #0
 800b972:	2100      	movs	r1, #0
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 f8fa 	bl	800bb6e <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b980:	b29a      	uxth	r2, r3
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2208      	movs	r2, #8
 800b98a:	761a      	strb	r2, [r3, #24]

      break;
 800b98c:	e0ab      	b.n	800bae6 <USBH_HandleControl+0x396>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	791b      	ldrb	r3, [r3, #4]
 800b992:	4619      	mov	r1, r3
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f004 ff5b 	bl	8010850 <USBH_LL_GetURBState>
 800b99a:	4603      	mov	r3, r0
 800b99c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b99e:	7bbb      	ldrb	r3, [r7, #14]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d10b      	bne.n	800b9bc <USBH_HandleControl+0x26c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	220d      	movs	r2, #13
 800b9a8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	2103      	movs	r1, #3
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f7ff f9d9 	bl	800ad6c <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b9ba:	e091      	b.n	800bae0 <USBH_HandleControl+0x390>
      else if (URB_Status == USBH_URB_ERROR)
 800b9bc:	7bbb      	ldrb	r3, [r7, #14]
 800b9be:	2b04      	cmp	r3, #4
 800b9c0:	d109      	bne.n	800b9d6 <USBH_HandleControl+0x286>
        phost->Control.state = CTRL_ERROR;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	220b      	movs	r2, #11
 800b9c6:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	2103      	movs	r1, #3
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f7ff f9cc 	bl	800ad6c <USBH_OS_PutMessage>
      break;
 800b9d4:	e084      	b.n	800bae0 <USBH_HandleControl+0x390>
        if (URB_Status == USBH_URB_STALL)
 800b9d6:	7bbb      	ldrb	r3, [r7, #14]
 800b9d8:	2b05      	cmp	r3, #5
 800b9da:	f040 8081 	bne.w	800bae0 <USBH_HandleControl+0x390>
          status = USBH_NOT_SUPPORTED;
 800b9de:	2303      	movs	r3, #3
 800b9e0:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	2103      	movs	r1, #3
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f7ff f9bf 	bl	800ad6c <USBH_OS_PutMessage>
      break;
 800b9ee:	e077      	b.n	800bae0 <USBH_HandleControl+0x390>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	795b      	ldrb	r3, [r3, #5]
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	9200      	str	r2, [sp, #0]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 f891 	bl	800bb24 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ba08:	b29a      	uxth	r2, r3
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	220a      	movs	r2, #10
 800ba12:	761a      	strb	r2, [r3, #24]
      break;
 800ba14:	e067      	b.n	800bae6 <USBH_HandleControl+0x396>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	795b      	ldrb	r3, [r3, #5]
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f004 ff17 	bl	8010850 <USBH_LL_GetURBState>
 800ba22:	4603      	mov	r3, r0
 800ba24:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ba26:	7bbb      	ldrb	r3, [r7, #14]
 800ba28:	2b01      	cmp	r3, #1
 800ba2a:	d10b      	bne.n	800ba44 <USBH_HandleControl+0x2f4>
      {
        status = USBH_OK;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	220d      	movs	r2, #13
 800ba34:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800ba36:	2300      	movs	r3, #0
 800ba38:	2200      	movs	r2, #0
 800ba3a:	2103      	movs	r1, #3
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f7ff f995 	bl	800ad6c <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800ba42:	e04f      	b.n	800bae4 <USBH_HandleControl+0x394>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ba44:	7bbb      	ldrb	r3, [r7, #14]
 800ba46:	2b02      	cmp	r3, #2
 800ba48:	d109      	bne.n	800ba5e <USBH_HandleControl+0x30e>
        phost->Control.state = CTRL_STATUS_OUT;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2209      	movs	r2, #9
 800ba4e:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800ba50:	2300      	movs	r3, #0
 800ba52:	2200      	movs	r2, #0
 800ba54:	2103      	movs	r1, #3
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f7ff f988 	bl	800ad6c <USBH_OS_PutMessage>
      break;
 800ba5c:	e042      	b.n	800bae4 <USBH_HandleControl+0x394>
        if (URB_Status == USBH_URB_ERROR)
 800ba5e:	7bbb      	ldrb	r3, [r7, #14]
 800ba60:	2b04      	cmp	r3, #4
 800ba62:	d13f      	bne.n	800bae4 <USBH_HandleControl+0x394>
          phost->Control.state = CTRL_ERROR;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	220b      	movs	r2, #11
 800ba68:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	2103      	movs	r1, #3
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f7ff f97b 	bl	800ad6c <USBH_OS_PutMessage>
      break;
 800ba76:	e035      	b.n	800bae4 <USBH_HandleControl+0x394>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	7e5b      	ldrb	r3, [r3, #25]
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	b2da      	uxtb	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	765a      	strb	r2, [r3, #25]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	7e5b      	ldrb	r3, [r3, #25]
 800ba88:	2b02      	cmp	r3, #2
 800ba8a:	d806      	bhi.n	800ba9a <USBH_HandleControl+0x34a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2201      	movs	r2, #1
 800ba96:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ba98:	e025      	b.n	800bae6 <USBH_HandleControl+0x396>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800baa0:	2106      	movs	r1, #6
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2200      	movs	r2, #0
 800baaa:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	795b      	ldrb	r3, [r3, #5]
 800bab0:	4619      	mov	r1, r3
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 f90c 	bl	800bcd0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	791b      	ldrb	r3, [r3, #4]
 800babc:	4619      	mov	r1, r3
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 f906 	bl	800bcd0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800baca:	2302      	movs	r3, #2
 800bacc:	73fb      	strb	r3, [r7, #15]
      break;
 800bace:	e00a      	b.n	800bae6 <USBH_HandleControl+0x396>

    default:
      break;
 800bad0:	bf00      	nop
 800bad2:	e008      	b.n	800bae6 <USBH_HandleControl+0x396>
      break;
 800bad4:	bf00      	nop
 800bad6:	e006      	b.n	800bae6 <USBH_HandleControl+0x396>
      break;
 800bad8:	bf00      	nop
 800bada:	e004      	b.n	800bae6 <USBH_HandleControl+0x396>
      break;
 800badc:	bf00      	nop
 800bade:	e002      	b.n	800bae6 <USBH_HandleControl+0x396>
      break;
 800bae0:	bf00      	nop
 800bae2:	e000      	b.n	800bae6 <USBH_HandleControl+0x396>
      break;
 800bae4:	bf00      	nop
  }

  return status;
 800bae6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3710      	adds	r7, #16
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b088      	sub	sp, #32
 800baf4:	af04      	add	r7, sp, #16
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	4613      	mov	r3, r2
 800bafc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bafe:	79f9      	ldrb	r1, [r7, #7]
 800bb00:	2300      	movs	r3, #0
 800bb02:	9303      	str	r3, [sp, #12]
 800bb04:	2308      	movs	r3, #8
 800bb06:	9302      	str	r3, [sp, #8]
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	9301      	str	r3, [sp, #4]
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	9300      	str	r3, [sp, #0]
 800bb10:	2300      	movs	r3, #0
 800bb12:	2200      	movs	r2, #0
 800bb14:	68f8      	ldr	r0, [r7, #12]
 800bb16:	f004 fe6a 	bl	80107ee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800bb1a:	2300      	movs	r3, #0
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3710      	adds	r7, #16
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b088      	sub	sp, #32
 800bb28:	af04      	add	r7, sp, #16
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	4611      	mov	r1, r2
 800bb30:	461a      	mov	r2, r3
 800bb32:	460b      	mov	r3, r1
 800bb34:	80fb      	strh	r3, [r7, #6]
 800bb36:	4613      	mov	r3, r2
 800bb38:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d001      	beq.n	800bb48 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bb44:	2300      	movs	r3, #0
 800bb46:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bb48:	7979      	ldrb	r1, [r7, #5]
 800bb4a:	7e3b      	ldrb	r3, [r7, #24]
 800bb4c:	9303      	str	r3, [sp, #12]
 800bb4e:	88fb      	ldrh	r3, [r7, #6]
 800bb50:	9302      	str	r3, [sp, #8]
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	9301      	str	r3, [sp, #4]
 800bb56:	2301      	movs	r3, #1
 800bb58:	9300      	str	r3, [sp, #0]
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	68f8      	ldr	r0, [r7, #12]
 800bb60:	f004 fe45 	bl	80107ee <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bb64:	2300      	movs	r3, #0
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3710      	adds	r7, #16
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}

0800bb6e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bb6e:	b580      	push	{r7, lr}
 800bb70:	b088      	sub	sp, #32
 800bb72:	af04      	add	r7, sp, #16
 800bb74:	60f8      	str	r0, [r7, #12]
 800bb76:	60b9      	str	r1, [r7, #8]
 800bb78:	4611      	mov	r1, r2
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	80fb      	strh	r3, [r7, #6]
 800bb80:	4613      	mov	r3, r2
 800bb82:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bb84:	7979      	ldrb	r1, [r7, #5]
 800bb86:	2300      	movs	r3, #0
 800bb88:	9303      	str	r3, [sp, #12]
 800bb8a:	88fb      	ldrh	r3, [r7, #6]
 800bb8c:	9302      	str	r3, [sp, #8]
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	9301      	str	r3, [sp, #4]
 800bb92:	2301      	movs	r3, #1
 800bb94:	9300      	str	r3, [sp, #0]
 800bb96:	2300      	movs	r3, #0
 800bb98:	2201      	movs	r2, #1
 800bb9a:	68f8      	ldr	r0, [r7, #12]
 800bb9c:	f004 fe27 	bl	80107ee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bba0:	2300      	movs	r3, #0

}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b088      	sub	sp, #32
 800bbae:	af04      	add	r7, sp, #16
 800bbb0:	60f8      	str	r0, [r7, #12]
 800bbb2:	60b9      	str	r1, [r7, #8]
 800bbb4:	4611      	mov	r1, r2
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	460b      	mov	r3, r1
 800bbba:	80fb      	strh	r3, [r7, #6]
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d001      	beq.n	800bbce <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bbce:	7979      	ldrb	r1, [r7, #5]
 800bbd0:	7e3b      	ldrb	r3, [r7, #24]
 800bbd2:	9303      	str	r3, [sp, #12]
 800bbd4:	88fb      	ldrh	r3, [r7, #6]
 800bbd6:	9302      	str	r3, [sp, #8]
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	9301      	str	r3, [sp, #4]
 800bbdc:	2301      	movs	r3, #1
 800bbde:	9300      	str	r3, [sp, #0]
 800bbe0:	2302      	movs	r3, #2
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f004 fe02 	bl	80107ee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bbea:	2300      	movs	r3, #0
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3710      	adds	r7, #16
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b088      	sub	sp, #32
 800bbf8:	af04      	add	r7, sp, #16
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	4611      	mov	r1, r2
 800bc00:	461a      	mov	r2, r3
 800bc02:	460b      	mov	r3, r1
 800bc04:	80fb      	strh	r3, [r7, #6]
 800bc06:	4613      	mov	r3, r2
 800bc08:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bc0a:	7979      	ldrb	r1, [r7, #5]
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	9303      	str	r3, [sp, #12]
 800bc10:	88fb      	ldrh	r3, [r7, #6]
 800bc12:	9302      	str	r3, [sp, #8]
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	9301      	str	r3, [sp, #4]
 800bc18:	2301      	movs	r3, #1
 800bc1a:	9300      	str	r3, [sp, #0]
 800bc1c:	2302      	movs	r3, #2
 800bc1e:	2201      	movs	r2, #1
 800bc20:	68f8      	ldr	r0, [r7, #12]
 800bc22:	f004 fde4 	bl	80107ee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bc26:	2300      	movs	r3, #0
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3710      	adds	r7, #16
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af04      	add	r7, sp, #16
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	4608      	mov	r0, r1
 800bc3a:	4611      	mov	r1, r2
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	4603      	mov	r3, r0
 800bc40:	70fb      	strb	r3, [r7, #3]
 800bc42:	460b      	mov	r3, r1
 800bc44:	70bb      	strb	r3, [r7, #2]
 800bc46:	4613      	mov	r3, r2
 800bc48:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bc4a:	7878      	ldrb	r0, [r7, #1]
 800bc4c:	78ba      	ldrb	r2, [r7, #2]
 800bc4e:	78f9      	ldrb	r1, [r7, #3]
 800bc50:	8b3b      	ldrh	r3, [r7, #24]
 800bc52:	9302      	str	r3, [sp, #8]
 800bc54:	7d3b      	ldrb	r3, [r7, #20]
 800bc56:	9301      	str	r3, [sp, #4]
 800bc58:	7c3b      	ldrb	r3, [r7, #16]
 800bc5a:	9300      	str	r3, [sp, #0]
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f004 fd77 	bl	8010752 <USBH_LL_OpenPipe>

  return USBH_OK;
 800bc64:	2300      	movs	r3, #0
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3708      	adds	r7, #8
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}

0800bc6e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bc6e:	b580      	push	{r7, lr}
 800bc70:	b082      	sub	sp, #8
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
 800bc76:	460b      	mov	r3, r1
 800bc78:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800bc7a:	78fb      	ldrb	r3, [r7, #3]
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f004 fd96 	bl	80107b0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bc84:	2300      	movs	r3, #0
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3708      	adds	r7, #8
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}

0800bc8e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bc8e:	b580      	push	{r7, lr}
 800bc90:	b084      	sub	sp, #16
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
 800bc96:	460b      	mov	r3, r1
 800bc98:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f000 f836 	bl	800bd0c <USBH_GetFreePipe>
 800bca0:	4603      	mov	r3, r0
 800bca2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bca4:	89fb      	ldrh	r3, [r7, #14]
 800bca6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d00a      	beq.n	800bcc4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800bcae:	78fa      	ldrb	r2, [r7, #3]
 800bcb0:	89fb      	ldrh	r3, [r7, #14]
 800bcb2:	f003 030f 	and.w	r3, r3, #15
 800bcb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bcba:	6879      	ldr	r1, [r7, #4]
 800bcbc:	33e0      	adds	r3, #224	@ 0xe0
 800bcbe:	009b      	lsls	r3, r3, #2
 800bcc0:	440b      	add	r3, r1
 800bcc2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bcc4:	89fb      	ldrh	r3, [r7, #14]
 800bcc6:	b2db      	uxtb	r3, r3
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3710      	adds	r7, #16
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	460b      	mov	r3, r1
 800bcda:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800bcdc:	78fb      	ldrb	r3, [r7, #3]
 800bcde:	2b0f      	cmp	r3, #15
 800bce0:	d80d      	bhi.n	800bcfe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bce2:	78fb      	ldrb	r3, [r7, #3]
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	33e0      	adds	r3, #224	@ 0xe0
 800bce8:	009b      	lsls	r3, r3, #2
 800bcea:	4413      	add	r3, r2
 800bcec:	685a      	ldr	r2, [r3, #4]
 800bcee:	78fb      	ldrb	r3, [r7, #3]
 800bcf0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bcf4:	6879      	ldr	r1, [r7, #4]
 800bcf6:	33e0      	adds	r3, #224	@ 0xe0
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	440b      	add	r3, r1
 800bcfc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bcfe:	2300      	movs	r3, #0
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	370c      	adds	r7, #12
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr

0800bd0c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b085      	sub	sp, #20
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bd14:	2300      	movs	r3, #0
 800bd16:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800bd18:	2300      	movs	r3, #0
 800bd1a:	73fb      	strb	r3, [r7, #15]
 800bd1c:	e00f      	b.n	800bd3e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bd1e:	7bfb      	ldrb	r3, [r7, #15]
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	33e0      	adds	r3, #224	@ 0xe0
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	4413      	add	r3, r2
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d102      	bne.n	800bd38 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bd32:	7bfb      	ldrb	r3, [r7, #15]
 800bd34:	b29b      	uxth	r3, r3
 800bd36:	e007      	b.n	800bd48 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800bd38:	7bfb      	ldrb	r3, [r7, #15]
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	73fb      	strb	r3, [r7, #15]
 800bd3e:	7bfb      	ldrb	r3, [r7, #15]
 800bd40:	2b0f      	cmp	r3, #15
 800bd42:	d9ec      	bls.n	800bd1e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bd44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3714      	adds	r7, #20
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <__NVIC_SetPriority>:
{
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	6039      	str	r1, [r7, #0]
 800bd5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bd60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	db0a      	blt.n	800bd7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	b2da      	uxtb	r2, r3
 800bd6c:	490c      	ldr	r1, [pc, #48]	@ (800bda0 <__NVIC_SetPriority+0x4c>)
 800bd6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd72:	0112      	lsls	r2, r2, #4
 800bd74:	b2d2      	uxtb	r2, r2
 800bd76:	440b      	add	r3, r1
 800bd78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bd7c:	e00a      	b.n	800bd94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	b2da      	uxtb	r2, r3
 800bd82:	4908      	ldr	r1, [pc, #32]	@ (800bda4 <__NVIC_SetPriority+0x50>)
 800bd84:	79fb      	ldrb	r3, [r7, #7]
 800bd86:	f003 030f 	and.w	r3, r3, #15
 800bd8a:	3b04      	subs	r3, #4
 800bd8c:	0112      	lsls	r2, r2, #4
 800bd8e:	b2d2      	uxtb	r2, r2
 800bd90:	440b      	add	r3, r1
 800bd92:	761a      	strb	r2, [r3, #24]
}
 800bd94:	bf00      	nop
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr
 800bda0:	e000e100 	.word	0xe000e100
 800bda4:	e000ed00 	.word	0xe000ed00

0800bda8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bdac:	4b05      	ldr	r3, [pc, #20]	@ (800bdc4 <SysTick_Handler+0x1c>)
 800bdae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bdb0:	f002 ff78 	bl	800eca4 <xTaskGetSchedulerState>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d001      	beq.n	800bdbe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bdba:	f004 f875 	bl	800fea8 <xPortSysTickHandler>
  }
}
 800bdbe:	bf00      	nop
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	e000e010 	.word	0xe000e010

0800bdc8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bdcc:	2100      	movs	r1, #0
 800bdce:	f06f 0004 	mvn.w	r0, #4
 800bdd2:	f7ff ffbf 	bl	800bd54 <__NVIC_SetPriority>
#endif
}
 800bdd6:	bf00      	nop
 800bdd8:	bd80      	pop	{r7, pc}
	...

0800bddc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bde2:	f3ef 8305 	mrs	r3, IPSR
 800bde6:	603b      	str	r3, [r7, #0]
  return(result);
 800bde8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d003      	beq.n	800bdf6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bdee:	f06f 0305 	mvn.w	r3, #5
 800bdf2:	607b      	str	r3, [r7, #4]
 800bdf4:	e00c      	b.n	800be10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bdf6:	4b0a      	ldr	r3, [pc, #40]	@ (800be20 <osKernelInitialize+0x44>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d105      	bne.n	800be0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bdfe:	4b08      	ldr	r3, [pc, #32]	@ (800be20 <osKernelInitialize+0x44>)
 800be00:	2201      	movs	r2, #1
 800be02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800be04:	2300      	movs	r3, #0
 800be06:	607b      	str	r3, [r7, #4]
 800be08:	e002      	b.n	800be10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800be0a:	f04f 33ff 	mov.w	r3, #4294967295
 800be0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800be10:	687b      	ldr	r3, [r7, #4]
}
 800be12:	4618      	mov	r0, r3
 800be14:	370c      	adds	r7, #12
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr
 800be1e:	bf00      	nop
 800be20:	20000564 	.word	0x20000564

0800be24 <osKernelGetInfo>:

osStatus_t osKernelGetInfo (osVersion_t *version, char *id_buf, uint32_t id_size) {
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	607a      	str	r2, [r7, #4]

  if (version != NULL) {
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d005      	beq.n	800be42 <osKernelGetInfo+0x1e>
    /* Version encoding is major.minor.rev: mmnnnrrrr dec */
    version->api    = KERNEL_VERSION;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	4a0c      	ldr	r2, [pc, #48]	@ (800be6c <osKernelGetInfo+0x48>)
 800be3a:	601a      	str	r2, [r3, #0]
    version->kernel = KERNEL_VERSION;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	4a0b      	ldr	r2, [pc, #44]	@ (800be6c <osKernelGetInfo+0x48>)
 800be40:	605a      	str	r2, [r3, #4]
  }

  if ((id_buf != NULL) && (id_size != 0U)) {
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d00c      	beq.n	800be62 <osKernelGetInfo+0x3e>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d009      	beq.n	800be62 <osKernelGetInfo+0x3e>
    if (id_size > sizeof(KERNEL_ID)) {
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2b11      	cmp	r3, #17
 800be52:	d901      	bls.n	800be58 <osKernelGetInfo+0x34>
      id_size = sizeof(KERNEL_ID);
 800be54:	2311      	movs	r3, #17
 800be56:	607b      	str	r3, [r7, #4]
    }
    memcpy(id_buf, KERNEL_ID, id_size);
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	4905      	ldr	r1, [pc, #20]	@ (800be70 <osKernelGetInfo+0x4c>)
 800be5c:	68b8      	ldr	r0, [r7, #8]
 800be5e:	f005 f99a 	bl	8011196 <memcpy>
  }

  return (osOK);
 800be62:	2300      	movs	r3, #0
}
 800be64:	4618      	mov	r0, r3
 800be66:	3710      	adds	r7, #16
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	05f5f531 	.word	0x05f5f531
 800be70:	08012950 	.word	0x08012950

0800be74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be7a:	f3ef 8305 	mrs	r3, IPSR
 800be7e:	603b      	str	r3, [r7, #0]
  return(result);
 800be80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800be82:	2b00      	cmp	r3, #0
 800be84:	d003      	beq.n	800be8e <osKernelStart+0x1a>
    stat = osErrorISR;
 800be86:	f06f 0305 	mvn.w	r3, #5
 800be8a:	607b      	str	r3, [r7, #4]
 800be8c:	e010      	b.n	800beb0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800be8e:	4b0b      	ldr	r3, [pc, #44]	@ (800bebc <osKernelStart+0x48>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	2b01      	cmp	r3, #1
 800be94:	d109      	bne.n	800beaa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800be96:	f7ff ff97 	bl	800bdc8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800be9a:	4b08      	ldr	r3, [pc, #32]	@ (800bebc <osKernelStart+0x48>)
 800be9c:	2202      	movs	r2, #2
 800be9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bea0:	f002 f888 	bl	800dfb4 <vTaskStartScheduler>
      stat = osOK;
 800bea4:	2300      	movs	r3, #0
 800bea6:	607b      	str	r3, [r7, #4]
 800bea8:	e002      	b.n	800beb0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800beaa:	f04f 33ff 	mov.w	r3, #4294967295
 800beae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800beb0:	687b      	ldr	r3, [r7, #4]
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3708      	adds	r7, #8
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	20000564 	.word	0x20000564

0800bec0 <osKernelGetTickFreq>:
  }

  return (ticks);
}

uint32_t osKernelGetTickFreq (void) {
 800bec0:	b480      	push	{r7}
 800bec2:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800bec4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 800bec8:	4618      	mov	r0, r3
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr
	...

0800bed4 <osKernelGetSysTimerFreq>:
  }

  return (val);
}

uint32_t osKernelGetSysTimerFreq (void) {
 800bed4:	b480      	push	{r7}
 800bed6:	af00      	add	r7, sp, #0
  return (configCPU_CLOCK_HZ);
 800bed8:	4b03      	ldr	r3, [pc, #12]	@ (800bee8 <osKernelGetSysTimerFreq+0x14>)
 800beda:	681b      	ldr	r3, [r3, #0]
}
 800bedc:	4618      	mov	r0, r3
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr
 800bee6:	bf00      	nop
 800bee8:	2000025c 	.word	0x2000025c

0800beec <osThreadNew>:

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800beec:	b580      	push	{r7, lr}
 800beee:	b08e      	sub	sp, #56	@ 0x38
 800bef0:	af04      	add	r7, sp, #16
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	60b9      	str	r1, [r7, #8]
 800bef6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bef8:	2300      	movs	r3, #0
 800befa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800befc:	f3ef 8305 	mrs	r3, IPSR
 800bf00:	617b      	str	r3, [r7, #20]
  return(result);
 800bf02:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d17e      	bne.n	800c006 <osThreadNew+0x11a>
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d07b      	beq.n	800c006 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bf0e:	2380      	movs	r3, #128	@ 0x80
 800bf10:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bf12:	2318      	movs	r3, #24
 800bf14:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bf16:	2300      	movs	r3, #0
 800bf18:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bf1a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf1e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d045      	beq.n	800bfb2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d002      	beq.n	800bf34 <osThreadNew+0x48>
        name = attr->name;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	699b      	ldr	r3, [r3, #24]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d002      	beq.n	800bf42 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	699b      	ldr	r3, [r3, #24]
 800bf40:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bf42:	69fb      	ldr	r3, [r7, #28]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d008      	beq.n	800bf5a <osThreadNew+0x6e>
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	2b38      	cmp	r3, #56	@ 0x38
 800bf4c:	d805      	bhi.n	800bf5a <osThreadNew+0x6e>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	f003 0301 	and.w	r3, r3, #1
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d001      	beq.n	800bf5e <osThreadNew+0x72>
        return (NULL);
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	e054      	b.n	800c008 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	695b      	ldr	r3, [r3, #20]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d003      	beq.n	800bf6e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	695b      	ldr	r3, [r3, #20]
 800bf6a:	089b      	lsrs	r3, r3, #2
 800bf6c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	689b      	ldr	r3, [r3, #8]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d00e      	beq.n	800bf94 <osThreadNew+0xa8>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	68db      	ldr	r3, [r3, #12]
 800bf7a:	2ba7      	cmp	r3, #167	@ 0xa7
 800bf7c:	d90a      	bls.n	800bf94 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d006      	beq.n	800bf94 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	695b      	ldr	r3, [r3, #20]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d002      	beq.n	800bf94 <osThreadNew+0xa8>
        mem = 1;
 800bf8e:	2301      	movs	r3, #1
 800bf90:	61bb      	str	r3, [r7, #24]
 800bf92:	e010      	b.n	800bfb6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	689b      	ldr	r3, [r3, #8]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d10c      	bne.n	800bfb6 <osThreadNew+0xca>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d108      	bne.n	800bfb6 <osThreadNew+0xca>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	691b      	ldr	r3, [r3, #16]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d104      	bne.n	800bfb6 <osThreadNew+0xca>
          mem = 0;
 800bfac:	2300      	movs	r3, #0
 800bfae:	61bb      	str	r3, [r7, #24]
 800bfb0:	e001      	b.n	800bfb6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d110      	bne.n	800bfde <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bfc0:	687a      	ldr	r2, [r7, #4]
 800bfc2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bfc4:	9202      	str	r2, [sp, #8]
 800bfc6:	9301      	str	r3, [sp, #4]
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	9300      	str	r3, [sp, #0]
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	6a3a      	ldr	r2, [r7, #32]
 800bfd0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f001 fb78 	bl	800d6c8 <xTaskCreateStatic>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	613b      	str	r3, [r7, #16]
 800bfdc:	e013      	b.n	800c006 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bfde:	69bb      	ldr	r3, [r7, #24]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d110      	bne.n	800c006 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bfe4:	6a3b      	ldr	r3, [r7, #32]
 800bfe6:	b29a      	uxth	r2, r3
 800bfe8:	f107 0310 	add.w	r3, r7, #16
 800bfec:	9301      	str	r3, [sp, #4]
 800bfee:	69fb      	ldr	r3, [r7, #28]
 800bff0:	9300      	str	r3, [sp, #0]
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bff6:	68f8      	ldr	r0, [r7, #12]
 800bff8:	f001 fbc6 	bl	800d788 <xTaskCreate>
 800bffc:	4603      	mov	r3, r0
 800bffe:	2b01      	cmp	r3, #1
 800c000:	d001      	beq.n	800c006 <osThreadNew+0x11a>
            hTask = NULL;
 800c002:	2300      	movs	r3, #0
 800c004:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c006:	693b      	ldr	r3, [r7, #16]
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3728      	adds	r7, #40	@ 0x28
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c018:	f3ef 8305 	mrs	r3, IPSR
 800c01c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c01e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c020:	2b00      	cmp	r3, #0
 800c022:	d003      	beq.n	800c02c <osDelay+0x1c>
    stat = osErrorISR;
 800c024:	f06f 0305 	mvn.w	r3, #5
 800c028:	60fb      	str	r3, [r7, #12]
 800c02a:	e007      	b.n	800c03c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c02c:	2300      	movs	r3, #0
 800c02e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d002      	beq.n	800c03c <osDelay+0x2c>
      vTaskDelay(ticks);
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f001 fd78 	bl	800db2c <vTaskDelay>
    }
  }

  return (stat);
 800c03c:	68fb      	ldr	r3, [r7, #12]
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}

0800c046 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c046:	b580      	push	{r7, lr}
 800c048:	b08a      	sub	sp, #40	@ 0x28
 800c04a:	af02      	add	r7, sp, #8
 800c04c:	60f8      	str	r0, [r7, #12]
 800c04e:	60b9      	str	r1, [r7, #8]
 800c050:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c052:	2300      	movs	r3, #0
 800c054:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c056:	f3ef 8305 	mrs	r3, IPSR
 800c05a:	613b      	str	r3, [r7, #16]
  return(result);
 800c05c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d15f      	bne.n	800c122 <osMessageQueueNew+0xdc>
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d05c      	beq.n	800c122 <osMessageQueueNew+0xdc>
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d059      	beq.n	800c122 <osMessageQueueNew+0xdc>
    mem = -1;
 800c06e:	f04f 33ff 	mov.w	r3, #4294967295
 800c072:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d029      	beq.n	800c0ce <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	689b      	ldr	r3, [r3, #8]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d012      	beq.n	800c0a8 <osMessageQueueNew+0x62>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	68db      	ldr	r3, [r3, #12]
 800c086:	2b4f      	cmp	r3, #79	@ 0x4f
 800c088:	d90e      	bls.n	800c0a8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d00a      	beq.n	800c0a8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	695a      	ldr	r2, [r3, #20]
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	68b9      	ldr	r1, [r7, #8]
 800c09a:	fb01 f303 	mul.w	r3, r1, r3
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d302      	bcc.n	800c0a8 <osMessageQueueNew+0x62>
        mem = 1;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	61bb      	str	r3, [r7, #24]
 800c0a6:	e014      	b.n	800c0d2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	689b      	ldr	r3, [r3, #8]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d110      	bne.n	800c0d2 <osMessageQueueNew+0x8c>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	68db      	ldr	r3, [r3, #12]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d10c      	bne.n	800c0d2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d108      	bne.n	800c0d2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	695b      	ldr	r3, [r3, #20]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d104      	bne.n	800c0d2 <osMessageQueueNew+0x8c>
          mem = 0;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	61bb      	str	r3, [r7, #24]
 800c0cc:	e001      	b.n	800c0d2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c0d2:	69bb      	ldr	r3, [r7, #24]
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d10b      	bne.n	800c0f0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	691a      	ldr	r2, [r3, #16]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	9100      	str	r1, [sp, #0]
 800c0e4:	68b9      	ldr	r1, [r7, #8]
 800c0e6:	68f8      	ldr	r0, [r7, #12]
 800c0e8:	f000 fc22 	bl	800c930 <xQueueGenericCreateStatic>
 800c0ec:	61f8      	str	r0, [r7, #28]
 800c0ee:	e008      	b.n	800c102 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c0f0:	69bb      	ldr	r3, [r7, #24]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d105      	bne.n	800c102 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	68b9      	ldr	r1, [r7, #8]
 800c0fa:	68f8      	ldr	r0, [r7, #12]
 800c0fc:	f000 fc95 	bl	800ca2a <xQueueGenericCreate>
 800c100:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d00c      	beq.n	800c122 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d003      	beq.n	800c116 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	617b      	str	r3, [r7, #20]
 800c114:	e001      	b.n	800c11a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c116:	2300      	movs	r3, #0
 800c118:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c11a:	6979      	ldr	r1, [r7, #20]
 800c11c:	69f8      	ldr	r0, [r7, #28]
 800c11e:	f001 fa75 	bl	800d60c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c122:	69fb      	ldr	r3, [r7, #28]
}
 800c124:	4618      	mov	r0, r3
 800c126:	3720      	adds	r7, #32
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b088      	sub	sp, #32
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	603b      	str	r3, [r7, #0]
 800c138:	4613      	mov	r3, r2
 800c13a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c140:	2300      	movs	r3, #0
 800c142:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c144:	f3ef 8305 	mrs	r3, IPSR
 800c148:	617b      	str	r3, [r7, #20]
  return(result);
 800c14a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d028      	beq.n	800c1a2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c150:	69bb      	ldr	r3, [r7, #24]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d005      	beq.n	800c162 <osMessageQueuePut+0x36>
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d002      	beq.n	800c162 <osMessageQueuePut+0x36>
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d003      	beq.n	800c16a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c162:	f06f 0303 	mvn.w	r3, #3
 800c166:	61fb      	str	r3, [r7, #28]
 800c168:	e038      	b.n	800c1dc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c16a:	2300      	movs	r3, #0
 800c16c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c16e:	f107 0210 	add.w	r2, r7, #16
 800c172:	2300      	movs	r3, #0
 800c174:	68b9      	ldr	r1, [r7, #8]
 800c176:	69b8      	ldr	r0, [r7, #24]
 800c178:	f000 fdea 	bl	800cd50 <xQueueGenericSendFromISR>
 800c17c:	4603      	mov	r3, r0
 800c17e:	2b01      	cmp	r3, #1
 800c180:	d003      	beq.n	800c18a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c182:	f06f 0302 	mvn.w	r3, #2
 800c186:	61fb      	str	r3, [r7, #28]
 800c188:	e028      	b.n	800c1dc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d025      	beq.n	800c1dc <osMessageQueuePut+0xb0>
 800c190:	4b15      	ldr	r3, [pc, #84]	@ (800c1e8 <osMessageQueuePut+0xbc>)
 800c192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c196:	601a      	str	r2, [r3, #0]
 800c198:	f3bf 8f4f 	dsb	sy
 800c19c:	f3bf 8f6f 	isb	sy
 800c1a0:	e01c      	b.n	800c1dc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d002      	beq.n	800c1ae <osMessageQueuePut+0x82>
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d103      	bne.n	800c1b6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c1ae:	f06f 0303 	mvn.w	r3, #3
 800c1b2:	61fb      	str	r3, [r7, #28]
 800c1b4:	e012      	b.n	800c1dc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	683a      	ldr	r2, [r7, #0]
 800c1ba:	68b9      	ldr	r1, [r7, #8]
 800c1bc:	69b8      	ldr	r0, [r7, #24]
 800c1be:	f000 fcc5 	bl	800cb4c <xQueueGenericSend>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d009      	beq.n	800c1dc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d003      	beq.n	800c1d6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c1ce:	f06f 0301 	mvn.w	r3, #1
 800c1d2:	61fb      	str	r3, [r7, #28]
 800c1d4:	e002      	b.n	800c1dc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c1d6:	f06f 0302 	mvn.w	r3, #2
 800c1da:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c1dc:	69fb      	ldr	r3, [r7, #28]
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3720      	adds	r7, #32
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	e000ed04 	.word	0xe000ed04

0800c1ec <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b088      	sub	sp, #32
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	607a      	str	r2, [r7, #4]
 800c1f8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c1fe:	2300      	movs	r3, #0
 800c200:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c202:	f3ef 8305 	mrs	r3, IPSR
 800c206:	617b      	str	r3, [r7, #20]
  return(result);
 800c208:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d028      	beq.n	800c260 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c20e:	69bb      	ldr	r3, [r7, #24]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d005      	beq.n	800c220 <osMessageQueueGet+0x34>
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d002      	beq.n	800c220 <osMessageQueueGet+0x34>
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d003      	beq.n	800c228 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c220:	f06f 0303 	mvn.w	r3, #3
 800c224:	61fb      	str	r3, [r7, #28]
 800c226:	e037      	b.n	800c298 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c228:	2300      	movs	r3, #0
 800c22a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c22c:	f107 0310 	add.w	r3, r7, #16
 800c230:	461a      	mov	r2, r3
 800c232:	68b9      	ldr	r1, [r7, #8]
 800c234:	69b8      	ldr	r0, [r7, #24]
 800c236:	f001 f81b 	bl	800d270 <xQueueReceiveFromISR>
 800c23a:	4603      	mov	r3, r0
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	d003      	beq.n	800c248 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c240:	f06f 0302 	mvn.w	r3, #2
 800c244:	61fb      	str	r3, [r7, #28]
 800c246:	e027      	b.n	800c298 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d024      	beq.n	800c298 <osMessageQueueGet+0xac>
 800c24e:	4b15      	ldr	r3, [pc, #84]	@ (800c2a4 <osMessageQueueGet+0xb8>)
 800c250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c254:	601a      	str	r2, [r3, #0]
 800c256:	f3bf 8f4f 	dsb	sy
 800c25a:	f3bf 8f6f 	isb	sy
 800c25e:	e01b      	b.n	800c298 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d002      	beq.n	800c26c <osMessageQueueGet+0x80>
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d103      	bne.n	800c274 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c26c:	f06f 0303 	mvn.w	r3, #3
 800c270:	61fb      	str	r3, [r7, #28]
 800c272:	e011      	b.n	800c298 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c274:	683a      	ldr	r2, [r7, #0]
 800c276:	68b9      	ldr	r1, [r7, #8]
 800c278:	69b8      	ldr	r0, [r7, #24]
 800c27a:	f000 fe07 	bl	800ce8c <xQueueReceive>
 800c27e:	4603      	mov	r3, r0
 800c280:	2b01      	cmp	r3, #1
 800c282:	d009      	beq.n	800c298 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d003      	beq.n	800c292 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c28a:	f06f 0301 	mvn.w	r3, #1
 800c28e:	61fb      	str	r3, [r7, #28]
 800c290:	e002      	b.n	800c298 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c292:	f06f 0302 	mvn.w	r3, #2
 800c296:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c298:	69fb      	ldr	r3, [r7, #28]
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3720      	adds	r7, #32
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	e000ed04 	.word	0xe000ed04

0800c2a8 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b08a      	sub	sp, #40	@ 0x28
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800c2b4:	6a3b      	ldr	r3, [r7, #32]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d102      	bne.n	800c2c0 <osMessageQueueGetSpace+0x18>
    space = 0U;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2be:	e023      	b.n	800c308 <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2c0:	f3ef 8305 	mrs	r3, IPSR
 800c2c4:	61bb      	str	r3, [r7, #24]
  return(result);
 800c2c6:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d019      	beq.n	800c300 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c2cc:	f3ef 8211 	mrs	r2, BASEPRI
 800c2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d4:	f383 8811 	msr	BASEPRI, r3
 800c2d8:	f3bf 8f6f 	isb	sy
 800c2dc:	f3bf 8f4f 	dsb	sy
 800c2e0:	613a      	str	r2, [r7, #16]
 800c2e2:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c2e4:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800c2e6:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800c2e8:	6a3b      	ldr	r3, [r7, #32]
 800c2ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c2ec:	6a3b      	ldr	r3, [r7, #32]
 800c2ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2f0:	1ad3      	subs	r3, r2, r3
 800c2f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2f4:	69fb      	ldr	r3, [r7, #28]
 800c2f6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c2fe:	e003      	b.n	800c308 <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800c300:	6a38      	ldr	r0, [r7, #32]
 800c302:	f001 f837 	bl	800d374 <uxQueueSpacesAvailable>
 800c306:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return (space);
 800c308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3728      	adds	r7, #40	@ 0x28
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
	...

0800c314 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c314:	b480      	push	{r7}
 800c316:	b085      	sub	sp, #20
 800c318:	af00      	add	r7, sp, #0
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	4a07      	ldr	r2, [pc, #28]	@ (800c340 <vApplicationGetIdleTaskMemory+0x2c>)
 800c324:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	4a06      	ldr	r2, [pc, #24]	@ (800c344 <vApplicationGetIdleTaskMemory+0x30>)
 800c32a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2280      	movs	r2, #128	@ 0x80
 800c330:	601a      	str	r2, [r3, #0]
}
 800c332:	bf00      	nop
 800c334:	3714      	adds	r7, #20
 800c336:	46bd      	mov	sp, r7
 800c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33c:	4770      	bx	lr
 800c33e:	bf00      	nop
 800c340:	20000568 	.word	0x20000568
 800c344:	20000610 	.word	0x20000610

0800c348 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c348:	b480      	push	{r7}
 800c34a:	b085      	sub	sp, #20
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	60b9      	str	r1, [r7, #8]
 800c352:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	4a07      	ldr	r2, [pc, #28]	@ (800c374 <vApplicationGetTimerTaskMemory+0x2c>)
 800c358:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	4a06      	ldr	r2, [pc, #24]	@ (800c378 <vApplicationGetTimerTaskMemory+0x30>)
 800c35e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c366:	601a      	str	r2, [r3, #0]
}
 800c368:	bf00      	nop
 800c36a:	3714      	adds	r7, #20
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr
 800c374:	20000810 	.word	0x20000810
 800c378:	200008b8 	.word	0x200008b8

0800c37c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b082      	sub	sp, #8
 800c380:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800c382:	2020      	movs	r0, #32
 800c384:	f003 fe22 	bl	800ffcc <pvPortMalloc>
 800c388:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d00a      	beq.n	800c3a6 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2200      	movs	r2, #0
 800c394:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	3304      	adds	r3, #4
 800c39a:	4618      	mov	r0, r3
 800c39c:	f000 f9aa 	bl	800c6f4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800c3a6:	687b      	ldr	r3, [r7, #4]
	}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3708      	adds	r7, #8
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b090      	sub	sp, #64	@ 0x40
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	60f8      	str	r0, [r7, #12]
 800c3b8:	60b9      	str	r1, [r7, #8]
 800c3ba:	607a      	str	r2, [r7, #4]
 800c3bc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d10b      	bne.n	800c3e8 <xEventGroupWaitBits+0x38>
	__asm volatile
 800c3d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3d4:	f383 8811 	msr	BASEPRI, r3
 800c3d8:	f3bf 8f6f 	isb	sy
 800c3dc:	f3bf 8f4f 	dsb	sy
 800c3e0:	623b      	str	r3, [r7, #32]
}
 800c3e2:	bf00      	nop
 800c3e4:	bf00      	nop
 800c3e6:	e7fd      	b.n	800c3e4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c3ee:	d30b      	bcc.n	800c408 <xEventGroupWaitBits+0x58>
	__asm volatile
 800c3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f4:	f383 8811 	msr	BASEPRI, r3
 800c3f8:	f3bf 8f6f 	isb	sy
 800c3fc:	f3bf 8f4f 	dsb	sy
 800c400:	61fb      	str	r3, [r7, #28]
}
 800c402:	bf00      	nop
 800c404:	bf00      	nop
 800c406:	e7fd      	b.n	800c404 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d10b      	bne.n	800c426 <xEventGroupWaitBits+0x76>
	__asm volatile
 800c40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c412:	f383 8811 	msr	BASEPRI, r3
 800c416:	f3bf 8f6f 	isb	sy
 800c41a:	f3bf 8f4f 	dsb	sy
 800c41e:	61bb      	str	r3, [r7, #24]
}
 800c420:	bf00      	nop
 800c422:	bf00      	nop
 800c424:	e7fd      	b.n	800c422 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c426:	f002 fc3d 	bl	800eca4 <xTaskGetSchedulerState>
 800c42a:	4603      	mov	r3, r0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d102      	bne.n	800c436 <xEventGroupWaitBits+0x86>
 800c430:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c432:	2b00      	cmp	r3, #0
 800c434:	d101      	bne.n	800c43a <xEventGroupWaitBits+0x8a>
 800c436:	2301      	movs	r3, #1
 800c438:	e000      	b.n	800c43c <xEventGroupWaitBits+0x8c>
 800c43a:	2300      	movs	r3, #0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d10b      	bne.n	800c458 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800c440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c444:	f383 8811 	msr	BASEPRI, r3
 800c448:	f3bf 8f6f 	isb	sy
 800c44c:	f3bf 8f4f 	dsb	sy
 800c450:	617b      	str	r3, [r7, #20]
}
 800c452:	bf00      	nop
 800c454:	bf00      	nop
 800c456:	e7fd      	b.n	800c454 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800c458:	f001 fe1c 	bl	800e094 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800c45c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800c462:	683a      	ldr	r2, [r7, #0]
 800c464:	68b9      	ldr	r1, [r7, #8]
 800c466:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c468:	f000 f90d 	bl	800c686 <prvTestWaitCondition>
 800c46c:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800c46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c470:	2b00      	cmp	r3, #0
 800c472:	d00e      	beq.n	800c492 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800c474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c476:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800c478:	2300      	movs	r3, #0
 800c47a:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d028      	beq.n	800c4d4 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c484:	681a      	ldr	r2, [r3, #0]
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	43db      	mvns	r3, r3
 800c48a:	401a      	ands	r2, r3
 800c48c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c48e:	601a      	str	r2, [r3, #0]
 800c490:	e020      	b.n	800c4d4 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800c492:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c494:	2b00      	cmp	r3, #0
 800c496:	d104      	bne.n	800c4a2 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800c498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c49a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800c49c:	2301      	movs	r3, #1
 800c49e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4a0:	e018      	b.n	800c4d4 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d003      	beq.n	800c4b0 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800c4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c4ae:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d003      	beq.n	800c4be <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800c4b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c4bc:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800c4be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4c0:	1d18      	adds	r0, r3, #4
 800c4c2:	68ba      	ldr	r2, [r7, #8]
 800c4c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c4ca:	4619      	mov	r1, r3
 800c4cc:	f002 f8b8 	bl	800e640 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800c4d4:	f001 fdec 	bl	800e0b0 <xTaskResumeAll>
 800c4d8:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800c4da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d031      	beq.n	800c544 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800c4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d107      	bne.n	800c4f6 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800c4e6:	4b1a      	ldr	r3, [pc, #104]	@ (800c550 <xEventGroupWaitBits+0x1a0>)
 800c4e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4ec:	601a      	str	r2, [r3, #0]
 800c4ee:	f3bf 8f4f 	dsb	sy
 800c4f2:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800c4f6:	f002 fd4f 	bl	800ef98 <uxTaskResetEventItemValue>
 800c4fa:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800c4fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c502:	2b00      	cmp	r3, #0
 800c504:	d11a      	bne.n	800c53c <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800c506:	f003 fc3f 	bl	800fd88 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800c50a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800c510:	683a      	ldr	r2, [r7, #0]
 800c512:	68b9      	ldr	r1, [r7, #8]
 800c514:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c516:	f000 f8b6 	bl	800c686 <prvTestWaitCondition>
 800c51a:	4603      	mov	r3, r0
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d009      	beq.n	800c534 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d006      	beq.n	800c534 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	43db      	mvns	r3, r3
 800c52e:	401a      	ands	r2, r3
 800c530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c532:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800c534:	2301      	movs	r3, #1
 800c536:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800c538:	f003 fc58 	bl	800fdec <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c53c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c53e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c542:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800c544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c546:	4618      	mov	r0, r3
 800c548:	3740      	adds	r7, #64	@ 0x40
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	e000ed04 	.word	0xe000ed04

0800c554 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b08e      	sub	sp, #56	@ 0x38
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800c55e:	2300      	movs	r3, #0
 800c560:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800c566:	2300      	movs	r3, #0
 800c568:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d10b      	bne.n	800c588 <xEventGroupSetBits+0x34>
	__asm volatile
 800c570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c574:	f383 8811 	msr	BASEPRI, r3
 800c578:	f3bf 8f6f 	isb	sy
 800c57c:	f3bf 8f4f 	dsb	sy
 800c580:	613b      	str	r3, [r7, #16]
}
 800c582:	bf00      	nop
 800c584:	bf00      	nop
 800c586:	e7fd      	b.n	800c584 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c58e:	d30b      	bcc.n	800c5a8 <xEventGroupSetBits+0x54>
	__asm volatile
 800c590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c594:	f383 8811 	msr	BASEPRI, r3
 800c598:	f3bf 8f6f 	isb	sy
 800c59c:	f3bf 8f4f 	dsb	sy
 800c5a0:	60fb      	str	r3, [r7, #12]
}
 800c5a2:	bf00      	nop
 800c5a4:	bf00      	nop
 800c5a6:	e7fd      	b.n	800c5a4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800c5a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5aa:	3304      	adds	r3, #4
 800c5ac:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5b0:	3308      	adds	r3, #8
 800c5b2:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800c5b4:	f001 fd6e 	bl	800e094 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800c5b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ba:	68db      	ldr	r3, [r3, #12]
 800c5bc:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800c5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	431a      	orrs	r2, r3
 800c5c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5c8:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800c5ca:	e03c      	b.n	800c646 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800c5cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800c5d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800c5dc:	69bb      	ldr	r3, [r7, #24]
 800c5de:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800c5e2:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c5e4:	69bb      	ldr	r3, [r7, #24]
 800c5e6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c5ea:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d108      	bne.n	800c608 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800c5f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5f8:	681a      	ldr	r2, [r3, #0]
 800c5fa:	69bb      	ldr	r3, [r7, #24]
 800c5fc:	4013      	ands	r3, r2
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d00b      	beq.n	800c61a <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800c602:	2301      	movs	r3, #1
 800c604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c606:	e008      	b.n	800c61a <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800c608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c60a:	681a      	ldr	r2, [r3, #0]
 800c60c:	69bb      	ldr	r3, [r7, #24]
 800c60e:	4013      	ands	r3, r2
 800c610:	69ba      	ldr	r2, [r7, #24]
 800c612:	429a      	cmp	r2, r3
 800c614:	d101      	bne.n	800c61a <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800c616:	2301      	movs	r3, #1
 800c618:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800c61a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d010      	beq.n	800c642 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c626:	2b00      	cmp	r3, #0
 800c628:	d003      	beq.n	800c632 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800c62a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c62c:	69bb      	ldr	r3, [r7, #24]
 800c62e:	4313      	orrs	r3, r2
 800c630:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800c632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c63a:	4619      	mov	r1, r3
 800c63c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c63e:	f002 f8cd 	bl	800e7dc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800c646:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c648:	6a3b      	ldr	r3, [r7, #32]
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d1be      	bne.n	800c5cc <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800c64e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c654:	43db      	mvns	r3, r3
 800c656:	401a      	ands	r2, r3
 800c658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c65a:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800c65c:	f001 fd28 	bl	800e0b0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800c660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c662:	681b      	ldr	r3, [r3, #0]
}
 800c664:	4618      	mov	r0, r3
 800c666:	3738      	adds	r7, #56	@ 0x38
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800c676:	6839      	ldr	r1, [r7, #0]
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f7ff ff6b 	bl	800c554 <xEventGroupSetBits>
}
 800c67e:	bf00      	nop
 800c680:	3708      	adds	r7, #8
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}

0800c686 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800c686:	b480      	push	{r7}
 800c688:	b087      	sub	sp, #28
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	60f8      	str	r0, [r7, #12]
 800c68e:	60b9      	str	r1, [r7, #8]
 800c690:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800c692:	2300      	movs	r3, #0
 800c694:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d107      	bne.n	800c6ac <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800c69c:	68fa      	ldr	r2, [r7, #12]
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	4013      	ands	r3, r2
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d00a      	beq.n	800c6bc <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	617b      	str	r3, [r7, #20]
 800c6aa:	e007      	b.n	800c6bc <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800c6ac:	68fa      	ldr	r2, [r7, #12]
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	4013      	ands	r3, r2
 800c6b2:	68ba      	ldr	r2, [r7, #8]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d101      	bne.n	800c6bc <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800c6bc:	697b      	ldr	r3, [r7, #20]
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	371c      	adds	r7, #28
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c8:	4770      	bx	lr
	...

0800c6cc <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b086      	sub	sp, #24
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	60b9      	str	r1, [r7, #8]
 800c6d6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	68ba      	ldr	r2, [r7, #8]
 800c6dc:	68f9      	ldr	r1, [r7, #12]
 800c6de:	4804      	ldr	r0, [pc, #16]	@ (800c6f0 <xEventGroupSetBitsFromISR+0x24>)
 800c6e0:	f003 fa00 	bl	800fae4 <xTimerPendFunctionCallFromISR>
 800c6e4:	6178      	str	r0, [r7, #20]

		return xReturn;
 800c6e6:	697b      	ldr	r3, [r7, #20]
	}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3718      	adds	r7, #24
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}
 800c6f0:	0800c66d 	.word	0x0800c66d

0800c6f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b083      	sub	sp, #12
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f103 0208 	add.w	r2, r3, #8
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f04f 32ff 	mov.w	r2, #4294967295
 800c70c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f103 0208 	add.w	r2, r3, #8
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f103 0208 	add.w	r2, r3, #8
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2200      	movs	r2, #0
 800c726:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c728:	bf00      	nop
 800c72a:	370c      	adds	r7, #12
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c734:	b480      	push	{r7}
 800c736:	b083      	sub	sp, #12
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c742:	bf00      	nop
 800c744:	370c      	adds	r7, #12
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr

0800c74e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c74e:	b480      	push	{r7}
 800c750:	b085      	sub	sp, #20
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]
 800c756:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	68fa      	ldr	r2, [r7, #12]
 800c762:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	689a      	ldr	r2, [r3, #8]
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	689b      	ldr	r3, [r3, #8]
 800c770:	683a      	ldr	r2, [r7, #0]
 800c772:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	683a      	ldr	r2, [r7, #0]
 800c778:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	1c5a      	adds	r2, r3, #1
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	601a      	str	r2, [r3, #0]
}
 800c78a:	bf00      	nop
 800c78c:	3714      	adds	r7, #20
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr

0800c796 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c796:	b480      	push	{r7}
 800c798:	b085      	sub	sp, #20
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
 800c79e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ac:	d103      	bne.n	800c7b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	691b      	ldr	r3, [r3, #16]
 800c7b2:	60fb      	str	r3, [r7, #12]
 800c7b4:	e00c      	b.n	800c7d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	3308      	adds	r3, #8
 800c7ba:	60fb      	str	r3, [r7, #12]
 800c7bc:	e002      	b.n	800c7c4 <vListInsert+0x2e>
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	60fb      	str	r3, [r7, #12]
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	68ba      	ldr	r2, [r7, #8]
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d2f6      	bcs.n	800c7be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	685a      	ldr	r2, [r3, #4]
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	685b      	ldr	r3, [r3, #4]
 800c7dc:	683a      	ldr	r2, [r7, #0]
 800c7de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	68fa      	ldr	r2, [r7, #12]
 800c7e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	683a      	ldr	r2, [r7, #0]
 800c7ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	1c5a      	adds	r2, r3, #1
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	601a      	str	r2, [r3, #0]
}
 800c7fc:	bf00      	nop
 800c7fe:	3714      	adds	r7, #20
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr

0800c808 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c808:	b480      	push	{r7}
 800c80a:	b085      	sub	sp, #20
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	691b      	ldr	r3, [r3, #16]
 800c814:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	6892      	ldr	r2, [r2, #8]
 800c81e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	689b      	ldr	r3, [r3, #8]
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	6852      	ldr	r2, [r2, #4]
 800c828:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	685b      	ldr	r3, [r3, #4]
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	429a      	cmp	r2, r3
 800c832:	d103      	bne.n	800c83c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	689a      	ldr	r2, [r3, #8]
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2200      	movs	r2, #0
 800c840:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	1e5a      	subs	r2, r3, #1
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
}
 800c850:	4618      	mov	r0, r3
 800c852:	3714      	adds	r7, #20
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d10b      	bne.n	800c888 <xQueueGenericReset+0x2c>
	__asm volatile
 800c870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c874:	f383 8811 	msr	BASEPRI, r3
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	f3bf 8f4f 	dsb	sy
 800c880:	60bb      	str	r3, [r7, #8]
}
 800c882:	bf00      	nop
 800c884:	bf00      	nop
 800c886:	e7fd      	b.n	800c884 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c888:	f003 fa7e 	bl	800fd88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681a      	ldr	r2, [r3, #0]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c894:	68f9      	ldr	r1, [r7, #12]
 800c896:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c898:	fb01 f303 	mul.w	r3, r1, r3
 800c89c:	441a      	add	r2, r3
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	68f9      	ldr	r1, [r7, #12]
 800c8bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c8be:	fb01 f303 	mul.w	r3, r1, r3
 800c8c2:	441a      	add	r2, r3
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	22ff      	movs	r2, #255	@ 0xff
 800c8cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	22ff      	movs	r2, #255	@ 0xff
 800c8d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d114      	bne.n	800c908 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	691b      	ldr	r3, [r3, #16]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d01a      	beq.n	800c91c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	3310      	adds	r3, #16
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f001 ff12 	bl	800e714 <xTaskRemoveFromEventList>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d012      	beq.n	800c91c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c8f6:	4b0d      	ldr	r3, [pc, #52]	@ (800c92c <xQueueGenericReset+0xd0>)
 800c8f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8fc:	601a      	str	r2, [r3, #0]
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	f3bf 8f6f 	isb	sy
 800c906:	e009      	b.n	800c91c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	3310      	adds	r3, #16
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7ff fef1 	bl	800c6f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	3324      	adds	r3, #36	@ 0x24
 800c916:	4618      	mov	r0, r3
 800c918:	f7ff feec 	bl	800c6f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c91c:	f003 fa66 	bl	800fdec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c920:	2301      	movs	r3, #1
}
 800c922:	4618      	mov	r0, r3
 800c924:	3710      	adds	r7, #16
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}
 800c92a:	bf00      	nop
 800c92c:	e000ed04 	.word	0xe000ed04

0800c930 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c930:	b580      	push	{r7, lr}
 800c932:	b08e      	sub	sp, #56	@ 0x38
 800c934:	af02      	add	r7, sp, #8
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	607a      	str	r2, [r7, #4]
 800c93c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d10b      	bne.n	800c95c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c948:	f383 8811 	msr	BASEPRI, r3
 800c94c:	f3bf 8f6f 	isb	sy
 800c950:	f3bf 8f4f 	dsb	sy
 800c954:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c956:	bf00      	nop
 800c958:	bf00      	nop
 800c95a:	e7fd      	b.n	800c958 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d10b      	bne.n	800c97a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c966:	f383 8811 	msr	BASEPRI, r3
 800c96a:	f3bf 8f6f 	isb	sy
 800c96e:	f3bf 8f4f 	dsb	sy
 800c972:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c974:	bf00      	nop
 800c976:	bf00      	nop
 800c978:	e7fd      	b.n	800c976 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d002      	beq.n	800c986 <xQueueGenericCreateStatic+0x56>
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d001      	beq.n	800c98a <xQueueGenericCreateStatic+0x5a>
 800c986:	2301      	movs	r3, #1
 800c988:	e000      	b.n	800c98c <xQueueGenericCreateStatic+0x5c>
 800c98a:	2300      	movs	r3, #0
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d10b      	bne.n	800c9a8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c994:	f383 8811 	msr	BASEPRI, r3
 800c998:	f3bf 8f6f 	isb	sy
 800c99c:	f3bf 8f4f 	dsb	sy
 800c9a0:	623b      	str	r3, [r7, #32]
}
 800c9a2:	bf00      	nop
 800c9a4:	bf00      	nop
 800c9a6:	e7fd      	b.n	800c9a4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d102      	bne.n	800c9b4 <xQueueGenericCreateStatic+0x84>
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d101      	bne.n	800c9b8 <xQueueGenericCreateStatic+0x88>
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	e000      	b.n	800c9ba <xQueueGenericCreateStatic+0x8a>
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d10b      	bne.n	800c9d6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9c2:	f383 8811 	msr	BASEPRI, r3
 800c9c6:	f3bf 8f6f 	isb	sy
 800c9ca:	f3bf 8f4f 	dsb	sy
 800c9ce:	61fb      	str	r3, [r7, #28]
}
 800c9d0:	bf00      	nop
 800c9d2:	bf00      	nop
 800c9d4:	e7fd      	b.n	800c9d2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c9d6:	2350      	movs	r3, #80	@ 0x50
 800c9d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	2b50      	cmp	r3, #80	@ 0x50
 800c9de:	d00b      	beq.n	800c9f8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9e4:	f383 8811 	msr	BASEPRI, r3
 800c9e8:	f3bf 8f6f 	isb	sy
 800c9ec:	f3bf 8f4f 	dsb	sy
 800c9f0:	61bb      	str	r3, [r7, #24]
}
 800c9f2:	bf00      	nop
 800c9f4:	bf00      	nop
 800c9f6:	e7fd      	b.n	800c9f4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c9f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c9fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d00d      	beq.n	800ca20 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ca04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca06:	2201      	movs	r2, #1
 800ca08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca0c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ca10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca12:	9300      	str	r3, [sp, #0]
 800ca14:	4613      	mov	r3, r2
 800ca16:	687a      	ldr	r2, [r7, #4]
 800ca18:	68b9      	ldr	r1, [r7, #8]
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f000 f840 	bl	800caa0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3730      	adds	r7, #48	@ 0x30
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}

0800ca2a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ca2a:	b580      	push	{r7, lr}
 800ca2c:	b08a      	sub	sp, #40	@ 0x28
 800ca2e:	af02      	add	r7, sp, #8
 800ca30:	60f8      	str	r0, [r7, #12]
 800ca32:	60b9      	str	r1, [r7, #8]
 800ca34:	4613      	mov	r3, r2
 800ca36:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d10b      	bne.n	800ca56 <xQueueGenericCreate+0x2c>
	__asm volatile
 800ca3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca42:	f383 8811 	msr	BASEPRI, r3
 800ca46:	f3bf 8f6f 	isb	sy
 800ca4a:	f3bf 8f4f 	dsb	sy
 800ca4e:	613b      	str	r3, [r7, #16]
}
 800ca50:	bf00      	nop
 800ca52:	bf00      	nop
 800ca54:	e7fd      	b.n	800ca52 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	68ba      	ldr	r2, [r7, #8]
 800ca5a:	fb02 f303 	mul.w	r3, r2, r3
 800ca5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ca60:	69fb      	ldr	r3, [r7, #28]
 800ca62:	3350      	adds	r3, #80	@ 0x50
 800ca64:	4618      	mov	r0, r3
 800ca66:	f003 fab1 	bl	800ffcc <pvPortMalloc>
 800ca6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ca6c:	69bb      	ldr	r3, [r7, #24]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d011      	beq.n	800ca96 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	3350      	adds	r3, #80	@ 0x50
 800ca7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ca7c:	69bb      	ldr	r3, [r7, #24]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca84:	79fa      	ldrb	r2, [r7, #7]
 800ca86:	69bb      	ldr	r3, [r7, #24]
 800ca88:	9300      	str	r3, [sp, #0]
 800ca8a:	4613      	mov	r3, r2
 800ca8c:	697a      	ldr	r2, [r7, #20]
 800ca8e:	68b9      	ldr	r1, [r7, #8]
 800ca90:	68f8      	ldr	r0, [r7, #12]
 800ca92:	f000 f805 	bl	800caa0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca96:	69bb      	ldr	r3, [r7, #24]
	}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3720      	adds	r7, #32
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	60f8      	str	r0, [r7, #12]
 800caa8:	60b9      	str	r1, [r7, #8]
 800caaa:	607a      	str	r2, [r7, #4]
 800caac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d103      	bne.n	800cabc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	69ba      	ldr	r2, [r7, #24]
 800cab8:	601a      	str	r2, [r3, #0]
 800caba:	e002      	b.n	800cac2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cabc:	69bb      	ldr	r3, [r7, #24]
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cac2:	69bb      	ldr	r3, [r7, #24]
 800cac4:	68fa      	ldr	r2, [r7, #12]
 800cac6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cac8:	69bb      	ldr	r3, [r7, #24]
 800caca:	68ba      	ldr	r2, [r7, #8]
 800cacc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cace:	2101      	movs	r1, #1
 800cad0:	69b8      	ldr	r0, [r7, #24]
 800cad2:	f7ff fec3 	bl	800c85c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cad6:	69bb      	ldr	r3, [r7, #24]
 800cad8:	78fa      	ldrb	r2, [r7, #3]
 800cada:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cade:	bf00      	nop
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b082      	sub	sp, #8
 800caea:	af00      	add	r7, sp, #0
 800caec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d00e      	beq.n	800cb12 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2200      	movs	r2, #0
 800caf8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2200      	movs	r2, #0
 800cafe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2200      	movs	r2, #0
 800cb04:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cb06:	2300      	movs	r3, #0
 800cb08:	2200      	movs	r2, #0
 800cb0a:	2100      	movs	r1, #0
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 f81d 	bl	800cb4c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cb12:	bf00      	nop
 800cb14:	3708      	adds	r7, #8
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b086      	sub	sp, #24
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	4603      	mov	r3, r0
 800cb22:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cb24:	2301      	movs	r3, #1
 800cb26:	617b      	str	r3, [r7, #20]
 800cb28:	2300      	movs	r3, #0
 800cb2a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cb2c:	79fb      	ldrb	r3, [r7, #7]
 800cb2e:	461a      	mov	r2, r3
 800cb30:	6939      	ldr	r1, [r7, #16]
 800cb32:	6978      	ldr	r0, [r7, #20]
 800cb34:	f7ff ff79 	bl	800ca2a <xQueueGenericCreate>
 800cb38:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cb3a:	68f8      	ldr	r0, [r7, #12]
 800cb3c:	f7ff ffd3 	bl	800cae6 <prvInitialiseMutex>

		return xNewQueue;
 800cb40:	68fb      	ldr	r3, [r7, #12]
	}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3718      	adds	r7, #24
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
	...

0800cb4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b08e      	sub	sp, #56	@ 0x38
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	60f8      	str	r0, [r7, #12]
 800cb54:	60b9      	str	r1, [r7, #8]
 800cb56:	607a      	str	r2, [r7, #4]
 800cb58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cb62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d10b      	bne.n	800cb80 <xQueueGenericSend+0x34>
	__asm volatile
 800cb68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb6c:	f383 8811 	msr	BASEPRI, r3
 800cb70:	f3bf 8f6f 	isb	sy
 800cb74:	f3bf 8f4f 	dsb	sy
 800cb78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cb7a:	bf00      	nop
 800cb7c:	bf00      	nop
 800cb7e:	e7fd      	b.n	800cb7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d103      	bne.n	800cb8e <xQueueGenericSend+0x42>
 800cb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d101      	bne.n	800cb92 <xQueueGenericSend+0x46>
 800cb8e:	2301      	movs	r3, #1
 800cb90:	e000      	b.n	800cb94 <xQueueGenericSend+0x48>
 800cb92:	2300      	movs	r3, #0
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d10b      	bne.n	800cbb0 <xQueueGenericSend+0x64>
	__asm volatile
 800cb98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb9c:	f383 8811 	msr	BASEPRI, r3
 800cba0:	f3bf 8f6f 	isb	sy
 800cba4:	f3bf 8f4f 	dsb	sy
 800cba8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cbaa:	bf00      	nop
 800cbac:	bf00      	nop
 800cbae:	e7fd      	b.n	800cbac <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	2b02      	cmp	r3, #2
 800cbb4:	d103      	bne.n	800cbbe <xQueueGenericSend+0x72>
 800cbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d101      	bne.n	800cbc2 <xQueueGenericSend+0x76>
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	e000      	b.n	800cbc4 <xQueueGenericSend+0x78>
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d10b      	bne.n	800cbe0 <xQueueGenericSend+0x94>
	__asm volatile
 800cbc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbcc:	f383 8811 	msr	BASEPRI, r3
 800cbd0:	f3bf 8f6f 	isb	sy
 800cbd4:	f3bf 8f4f 	dsb	sy
 800cbd8:	623b      	str	r3, [r7, #32]
}
 800cbda:	bf00      	nop
 800cbdc:	bf00      	nop
 800cbde:	e7fd      	b.n	800cbdc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cbe0:	f002 f860 	bl	800eca4 <xTaskGetSchedulerState>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d102      	bne.n	800cbf0 <xQueueGenericSend+0xa4>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d101      	bne.n	800cbf4 <xQueueGenericSend+0xa8>
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	e000      	b.n	800cbf6 <xQueueGenericSend+0xaa>
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d10b      	bne.n	800cc12 <xQueueGenericSend+0xc6>
	__asm volatile
 800cbfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbfe:	f383 8811 	msr	BASEPRI, r3
 800cc02:	f3bf 8f6f 	isb	sy
 800cc06:	f3bf 8f4f 	dsb	sy
 800cc0a:	61fb      	str	r3, [r7, #28]
}
 800cc0c:	bf00      	nop
 800cc0e:	bf00      	nop
 800cc10:	e7fd      	b.n	800cc0e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc12:	f003 f8b9 	bl	800fd88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d302      	bcc.n	800cc28 <xQueueGenericSend+0xdc>
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	2b02      	cmp	r3, #2
 800cc26:	d129      	bne.n	800cc7c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc28:	683a      	ldr	r2, [r7, #0]
 800cc2a:	68b9      	ldr	r1, [r7, #8]
 800cc2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cc2e:	f000 fbdd 	bl	800d3ec <prvCopyDataToQueue>
 800cc32:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d010      	beq.n	800cc5e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc3e:	3324      	adds	r3, #36	@ 0x24
 800cc40:	4618      	mov	r0, r3
 800cc42:	f001 fd67 	bl	800e714 <xTaskRemoveFromEventList>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d013      	beq.n	800cc74 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cc4c:	4b3f      	ldr	r3, [pc, #252]	@ (800cd4c <xQueueGenericSend+0x200>)
 800cc4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc52:	601a      	str	r2, [r3, #0]
 800cc54:	f3bf 8f4f 	dsb	sy
 800cc58:	f3bf 8f6f 	isb	sy
 800cc5c:	e00a      	b.n	800cc74 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cc5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d007      	beq.n	800cc74 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cc64:	4b39      	ldr	r3, [pc, #228]	@ (800cd4c <xQueueGenericSend+0x200>)
 800cc66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc6a:	601a      	str	r2, [r3, #0]
 800cc6c:	f3bf 8f4f 	dsb	sy
 800cc70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cc74:	f003 f8ba 	bl	800fdec <vPortExitCritical>
				return pdPASS;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	e063      	b.n	800cd44 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d103      	bne.n	800cc8a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc82:	f003 f8b3 	bl	800fdec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cc86:	2300      	movs	r3, #0
 800cc88:	e05c      	b.n	800cd44 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d106      	bne.n	800cc9e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc90:	f107 0314 	add.w	r3, r7, #20
 800cc94:	4618      	mov	r0, r3
 800cc96:	f001 fe05 	bl	800e8a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc9e:	f003 f8a5 	bl	800fdec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cca2:	f001 f9f7 	bl	800e094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cca6:	f003 f86f 	bl	800fd88 <vPortEnterCritical>
 800ccaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ccb0:	b25b      	sxtb	r3, r3
 800ccb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccb6:	d103      	bne.n	800ccc0 <xQueueGenericSend+0x174>
 800ccb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccba:	2200      	movs	r2, #0
 800ccbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ccc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccc2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ccc6:	b25b      	sxtb	r3, r3
 800ccc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cccc:	d103      	bne.n	800ccd6 <xQueueGenericSend+0x18a>
 800ccce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ccd6:	f003 f889 	bl	800fdec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ccda:	1d3a      	adds	r2, r7, #4
 800ccdc:	f107 0314 	add.w	r3, r7, #20
 800cce0:	4611      	mov	r1, r2
 800cce2:	4618      	mov	r0, r3
 800cce4:	f001 fdf4 	bl	800e8d0 <xTaskCheckForTimeOut>
 800cce8:	4603      	mov	r3, r0
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d124      	bne.n	800cd38 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ccee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ccf0:	f000 fc74 	bl	800d5dc <prvIsQueueFull>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d018      	beq.n	800cd2c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ccfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccfc:	3310      	adds	r3, #16
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	4611      	mov	r1, r2
 800cd02:	4618      	mov	r0, r3
 800cd04:	f001 fc76 	bl	800e5f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cd08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cd0a:	f000 fbff 	bl	800d50c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cd0e:	f001 f9cf 	bl	800e0b0 <xTaskResumeAll>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	f47f af7c 	bne.w	800cc12 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cd1a:	4b0c      	ldr	r3, [pc, #48]	@ (800cd4c <xQueueGenericSend+0x200>)
 800cd1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd20:	601a      	str	r2, [r3, #0]
 800cd22:	f3bf 8f4f 	dsb	sy
 800cd26:	f3bf 8f6f 	isb	sy
 800cd2a:	e772      	b.n	800cc12 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cd2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cd2e:	f000 fbed 	bl	800d50c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd32:	f001 f9bd 	bl	800e0b0 <xTaskResumeAll>
 800cd36:	e76c      	b.n	800cc12 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cd38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cd3a:	f000 fbe7 	bl	800d50c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd3e:	f001 f9b7 	bl	800e0b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cd42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3738      	adds	r7, #56	@ 0x38
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	e000ed04 	.word	0xe000ed04

0800cd50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b090      	sub	sp, #64	@ 0x40
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	60b9      	str	r1, [r7, #8]
 800cd5a:	607a      	str	r2, [r7, #4]
 800cd5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800cd62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d10b      	bne.n	800cd80 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800cd68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd6c:	f383 8811 	msr	BASEPRI, r3
 800cd70:	f3bf 8f6f 	isb	sy
 800cd74:	f3bf 8f4f 	dsb	sy
 800cd78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cd7a:	bf00      	nop
 800cd7c:	bf00      	nop
 800cd7e:	e7fd      	b.n	800cd7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d103      	bne.n	800cd8e <xQueueGenericSendFromISR+0x3e>
 800cd86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d101      	bne.n	800cd92 <xQueueGenericSendFromISR+0x42>
 800cd8e:	2301      	movs	r3, #1
 800cd90:	e000      	b.n	800cd94 <xQueueGenericSendFromISR+0x44>
 800cd92:	2300      	movs	r3, #0
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d10b      	bne.n	800cdb0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800cd98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd9c:	f383 8811 	msr	BASEPRI, r3
 800cda0:	f3bf 8f6f 	isb	sy
 800cda4:	f3bf 8f4f 	dsb	sy
 800cda8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cdaa:	bf00      	nop
 800cdac:	bf00      	nop
 800cdae:	e7fd      	b.n	800cdac <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	2b02      	cmp	r3, #2
 800cdb4:	d103      	bne.n	800cdbe <xQueueGenericSendFromISR+0x6e>
 800cdb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	d101      	bne.n	800cdc2 <xQueueGenericSendFromISR+0x72>
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	e000      	b.n	800cdc4 <xQueueGenericSendFromISR+0x74>
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d10b      	bne.n	800cde0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800cdc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdcc:	f383 8811 	msr	BASEPRI, r3
 800cdd0:	f3bf 8f6f 	isb	sy
 800cdd4:	f3bf 8f4f 	dsb	sy
 800cdd8:	623b      	str	r3, [r7, #32]
}
 800cdda:	bf00      	nop
 800cddc:	bf00      	nop
 800cdde:	e7fd      	b.n	800cddc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cde0:	f003 f8b2 	bl	800ff48 <vPortValidateInterruptPriority>
	__asm volatile
 800cde4:	f3ef 8211 	mrs	r2, BASEPRI
 800cde8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdec:	f383 8811 	msr	BASEPRI, r3
 800cdf0:	f3bf 8f6f 	isb	sy
 800cdf4:	f3bf 8f4f 	dsb	sy
 800cdf8:	61fa      	str	r2, [r7, #28]
 800cdfa:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800cdfc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cdfe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d302      	bcc.n	800ce12 <xQueueGenericSendFromISR+0xc2>
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	2b02      	cmp	r3, #2
 800ce10:	d12f      	bne.n	800ce72 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ce12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ce18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce20:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce22:	683a      	ldr	r2, [r7, #0]
 800ce24:	68b9      	ldr	r1, [r7, #8]
 800ce26:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ce28:	f000 fae0 	bl	800d3ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ce2c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ce30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce34:	d112      	bne.n	800ce5c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d016      	beq.n	800ce6c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce40:	3324      	adds	r3, #36	@ 0x24
 800ce42:	4618      	mov	r0, r3
 800ce44:	f001 fc66 	bl	800e714 <xTaskRemoveFromEventList>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d00e      	beq.n	800ce6c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d00b      	beq.n	800ce6c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2201      	movs	r2, #1
 800ce58:	601a      	str	r2, [r3, #0]
 800ce5a:	e007      	b.n	800ce6c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ce60:	3301      	adds	r3, #1
 800ce62:	b2db      	uxtb	r3, r3
 800ce64:	b25a      	sxtb	r2, r3
 800ce66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ce70:	e001      	b.n	800ce76 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ce72:	2300      	movs	r3, #0
 800ce74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce78:	617b      	str	r3, [r7, #20]
	__asm volatile
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	f383 8811 	msr	BASEPRI, r3
}
 800ce80:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3740      	adds	r7, #64	@ 0x40
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b08c      	sub	sp, #48	@ 0x30
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d10b      	bne.n	800cebe <xQueueReceive+0x32>
	__asm volatile
 800cea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceaa:	f383 8811 	msr	BASEPRI, r3
 800ceae:	f3bf 8f6f 	isb	sy
 800ceb2:	f3bf 8f4f 	dsb	sy
 800ceb6:	623b      	str	r3, [r7, #32]
}
 800ceb8:	bf00      	nop
 800ceba:	bf00      	nop
 800cebc:	e7fd      	b.n	800ceba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d103      	bne.n	800cecc <xQueueReceive+0x40>
 800cec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d101      	bne.n	800ced0 <xQueueReceive+0x44>
 800cecc:	2301      	movs	r3, #1
 800cece:	e000      	b.n	800ced2 <xQueueReceive+0x46>
 800ced0:	2300      	movs	r3, #0
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d10b      	bne.n	800ceee <xQueueReceive+0x62>
	__asm volatile
 800ced6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceda:	f383 8811 	msr	BASEPRI, r3
 800cede:	f3bf 8f6f 	isb	sy
 800cee2:	f3bf 8f4f 	dsb	sy
 800cee6:	61fb      	str	r3, [r7, #28]
}
 800cee8:	bf00      	nop
 800ceea:	bf00      	nop
 800ceec:	e7fd      	b.n	800ceea <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ceee:	f001 fed9 	bl	800eca4 <xTaskGetSchedulerState>
 800cef2:	4603      	mov	r3, r0
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d102      	bne.n	800cefe <xQueueReceive+0x72>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d101      	bne.n	800cf02 <xQueueReceive+0x76>
 800cefe:	2301      	movs	r3, #1
 800cf00:	e000      	b.n	800cf04 <xQueueReceive+0x78>
 800cf02:	2300      	movs	r3, #0
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d10b      	bne.n	800cf20 <xQueueReceive+0x94>
	__asm volatile
 800cf08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf0c:	f383 8811 	msr	BASEPRI, r3
 800cf10:	f3bf 8f6f 	isb	sy
 800cf14:	f3bf 8f4f 	dsb	sy
 800cf18:	61bb      	str	r3, [r7, #24]
}
 800cf1a:	bf00      	nop
 800cf1c:	bf00      	nop
 800cf1e:	e7fd      	b.n	800cf1c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf20:	f002 ff32 	bl	800fd88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf28:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d01f      	beq.n	800cf70 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cf30:	68b9      	ldr	r1, [r7, #8]
 800cf32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf34:	f000 fac4 	bl	800d4c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cf38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf3a:	1e5a      	subs	r2, r3, #1
 800cf3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf3e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf42:	691b      	ldr	r3, [r3, #16]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d00f      	beq.n	800cf68 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf4a:	3310      	adds	r3, #16
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f001 fbe1 	bl	800e714 <xTaskRemoveFromEventList>
 800cf52:	4603      	mov	r3, r0
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d007      	beq.n	800cf68 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cf58:	4b3c      	ldr	r3, [pc, #240]	@ (800d04c <xQueueReceive+0x1c0>)
 800cf5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf5e:	601a      	str	r2, [r3, #0]
 800cf60:	f3bf 8f4f 	dsb	sy
 800cf64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf68:	f002 ff40 	bl	800fdec <vPortExitCritical>
				return pdPASS;
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	e069      	b.n	800d044 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d103      	bne.n	800cf7e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf76:	f002 ff39 	bl	800fdec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	e062      	b.n	800d044 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d106      	bne.n	800cf92 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf84:	f107 0310 	add.w	r3, r7, #16
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f001 fc8b 	bl	800e8a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf8e:	2301      	movs	r3, #1
 800cf90:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf92:	f002 ff2b 	bl	800fdec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf96:	f001 f87d 	bl	800e094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf9a:	f002 fef5 	bl	800fd88 <vPortEnterCritical>
 800cf9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfa0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cfa4:	b25b      	sxtb	r3, r3
 800cfa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfaa:	d103      	bne.n	800cfb4 <xQueueReceive+0x128>
 800cfac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfae:	2200      	movs	r2, #0
 800cfb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cfb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cfba:	b25b      	sxtb	r3, r3
 800cfbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfc0:	d103      	bne.n	800cfca <xQueueReceive+0x13e>
 800cfc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cfca:	f002 ff0f 	bl	800fdec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cfce:	1d3a      	adds	r2, r7, #4
 800cfd0:	f107 0310 	add.w	r3, r7, #16
 800cfd4:	4611      	mov	r1, r2
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f001 fc7a 	bl	800e8d0 <xTaskCheckForTimeOut>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d123      	bne.n	800d02a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfe4:	f000 fae4 	bl	800d5b0 <prvIsQueueEmpty>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d017      	beq.n	800d01e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cfee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cff0:	3324      	adds	r3, #36	@ 0x24
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	4611      	mov	r1, r2
 800cff6:	4618      	mov	r0, r3
 800cff8:	f001 fafc 	bl	800e5f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cffc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cffe:	f000 fa85 	bl	800d50c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d002:	f001 f855 	bl	800e0b0 <xTaskResumeAll>
 800d006:	4603      	mov	r3, r0
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d189      	bne.n	800cf20 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d00c:	4b0f      	ldr	r3, [pc, #60]	@ (800d04c <xQueueReceive+0x1c0>)
 800d00e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d012:	601a      	str	r2, [r3, #0]
 800d014:	f3bf 8f4f 	dsb	sy
 800d018:	f3bf 8f6f 	isb	sy
 800d01c:	e780      	b.n	800cf20 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d01e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d020:	f000 fa74 	bl	800d50c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d024:	f001 f844 	bl	800e0b0 <xTaskResumeAll>
 800d028:	e77a      	b.n	800cf20 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d02a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d02c:	f000 fa6e 	bl	800d50c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d030:	f001 f83e 	bl	800e0b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d034:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d036:	f000 fabb 	bl	800d5b0 <prvIsQueueEmpty>
 800d03a:	4603      	mov	r3, r0
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	f43f af6f 	beq.w	800cf20 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d042:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d044:	4618      	mov	r0, r3
 800d046:	3730      	adds	r7, #48	@ 0x30
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}
 800d04c:	e000ed04 	.word	0xe000ed04

0800d050 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b08e      	sub	sp, #56	@ 0x38
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
 800d058:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d05a:	2300      	movs	r3, #0
 800d05c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d062:	2300      	movs	r3, #0
 800d064:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d10b      	bne.n	800d084 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d06c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d070:	f383 8811 	msr	BASEPRI, r3
 800d074:	f3bf 8f6f 	isb	sy
 800d078:	f3bf 8f4f 	dsb	sy
 800d07c:	623b      	str	r3, [r7, #32]
}
 800d07e:	bf00      	nop
 800d080:	bf00      	nop
 800d082:	e7fd      	b.n	800d080 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d00b      	beq.n	800d0a4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d08c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d090:	f383 8811 	msr	BASEPRI, r3
 800d094:	f3bf 8f6f 	isb	sy
 800d098:	f3bf 8f4f 	dsb	sy
 800d09c:	61fb      	str	r3, [r7, #28]
}
 800d09e:	bf00      	nop
 800d0a0:	bf00      	nop
 800d0a2:	e7fd      	b.n	800d0a0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d0a4:	f001 fdfe 	bl	800eca4 <xTaskGetSchedulerState>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d102      	bne.n	800d0b4 <xQueueSemaphoreTake+0x64>
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d101      	bne.n	800d0b8 <xQueueSemaphoreTake+0x68>
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	e000      	b.n	800d0ba <xQueueSemaphoreTake+0x6a>
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d10b      	bne.n	800d0d6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0c2:	f383 8811 	msr	BASEPRI, r3
 800d0c6:	f3bf 8f6f 	isb	sy
 800d0ca:	f3bf 8f4f 	dsb	sy
 800d0ce:	61bb      	str	r3, [r7, #24]
}
 800d0d0:	bf00      	nop
 800d0d2:	bf00      	nop
 800d0d4:	e7fd      	b.n	800d0d2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d0d6:	f002 fe57 	bl	800fd88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d0da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0de:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d0e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d024      	beq.n	800d130 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0e8:	1e5a      	subs	r2, r3, #1
 800d0ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ec:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d104      	bne.n	800d100 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d0f6:	f001 ff67 	bl	800efc8 <pvTaskIncrementMutexHeldCount>
 800d0fa:	4602      	mov	r2, r0
 800d0fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0fe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d102:	691b      	ldr	r3, [r3, #16]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d00f      	beq.n	800d128 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d10a:	3310      	adds	r3, #16
 800d10c:	4618      	mov	r0, r3
 800d10e:	f001 fb01 	bl	800e714 <xTaskRemoveFromEventList>
 800d112:	4603      	mov	r3, r0
 800d114:	2b00      	cmp	r3, #0
 800d116:	d007      	beq.n	800d128 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d118:	4b54      	ldr	r3, [pc, #336]	@ (800d26c <xQueueSemaphoreTake+0x21c>)
 800d11a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d11e:	601a      	str	r2, [r3, #0]
 800d120:	f3bf 8f4f 	dsb	sy
 800d124:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d128:	f002 fe60 	bl	800fdec <vPortExitCritical>
				return pdPASS;
 800d12c:	2301      	movs	r3, #1
 800d12e:	e098      	b.n	800d262 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d112      	bne.n	800d15c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d00b      	beq.n	800d154 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d13c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d140:	f383 8811 	msr	BASEPRI, r3
 800d144:	f3bf 8f6f 	isb	sy
 800d148:	f3bf 8f4f 	dsb	sy
 800d14c:	617b      	str	r3, [r7, #20]
}
 800d14e:	bf00      	nop
 800d150:	bf00      	nop
 800d152:	e7fd      	b.n	800d150 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d154:	f002 fe4a 	bl	800fdec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d158:	2300      	movs	r3, #0
 800d15a:	e082      	b.n	800d262 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d15c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d106      	bne.n	800d170 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d162:	f107 030c 	add.w	r3, r7, #12
 800d166:	4618      	mov	r0, r3
 800d168:	f001 fb9c 	bl	800e8a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d16c:	2301      	movs	r3, #1
 800d16e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d170:	f002 fe3c 	bl	800fdec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d174:	f000 ff8e 	bl	800e094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d178:	f002 fe06 	bl	800fd88 <vPortEnterCritical>
 800d17c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d17e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d182:	b25b      	sxtb	r3, r3
 800d184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d188:	d103      	bne.n	800d192 <xQueueSemaphoreTake+0x142>
 800d18a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d18c:	2200      	movs	r2, #0
 800d18e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d194:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d198:	b25b      	sxtb	r3, r3
 800d19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d19e:	d103      	bne.n	800d1a8 <xQueueSemaphoreTake+0x158>
 800d1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d1a8:	f002 fe20 	bl	800fdec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1ac:	463a      	mov	r2, r7
 800d1ae:	f107 030c 	add.w	r3, r7, #12
 800d1b2:	4611      	mov	r1, r2
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f001 fb8b 	bl	800e8d0 <xTaskCheckForTimeOut>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d132      	bne.n	800d226 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1c2:	f000 f9f5 	bl	800d5b0 <prvIsQueueEmpty>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d026      	beq.n	800d21a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d109      	bne.n	800d1e8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d1d4:	f002 fdd8 	bl	800fd88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d1d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1da:	689b      	ldr	r3, [r3, #8]
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f001 fd7f 	bl	800ece0 <xTaskPriorityInherit>
 800d1e2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d1e4:	f002 fe02 	bl	800fdec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d1e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ea:	3324      	adds	r3, #36	@ 0x24
 800d1ec:	683a      	ldr	r2, [r7, #0]
 800d1ee:	4611      	mov	r1, r2
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f001 f9ff 	bl	800e5f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d1f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1f8:	f000 f988 	bl	800d50c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d1fc:	f000 ff58 	bl	800e0b0 <xTaskResumeAll>
 800d200:	4603      	mov	r3, r0
 800d202:	2b00      	cmp	r3, #0
 800d204:	f47f af67 	bne.w	800d0d6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d208:	4b18      	ldr	r3, [pc, #96]	@ (800d26c <xQueueSemaphoreTake+0x21c>)
 800d20a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d20e:	601a      	str	r2, [r3, #0]
 800d210:	f3bf 8f4f 	dsb	sy
 800d214:	f3bf 8f6f 	isb	sy
 800d218:	e75d      	b.n	800d0d6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d21a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d21c:	f000 f976 	bl	800d50c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d220:	f000 ff46 	bl	800e0b0 <xTaskResumeAll>
 800d224:	e757      	b.n	800d0d6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d226:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d228:	f000 f970 	bl	800d50c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d22c:	f000 ff40 	bl	800e0b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d230:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d232:	f000 f9bd 	bl	800d5b0 <prvIsQueueEmpty>
 800d236:	4603      	mov	r3, r0
 800d238:	2b00      	cmp	r3, #0
 800d23a:	f43f af4c 	beq.w	800d0d6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d240:	2b00      	cmp	r3, #0
 800d242:	d00d      	beq.n	800d260 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d244:	f002 fda0 	bl	800fd88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d248:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d24a:	f000 f8b7 	bl	800d3bc <prvGetDisinheritPriorityAfterTimeout>
 800d24e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d252:	689b      	ldr	r3, [r3, #8]
 800d254:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d256:	4618      	mov	r0, r3
 800d258:	f001 fe1a 	bl	800ee90 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d25c:	f002 fdc6 	bl	800fdec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d260:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d262:	4618      	mov	r0, r3
 800d264:	3738      	adds	r7, #56	@ 0x38
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop
 800d26c:	e000ed04 	.word	0xe000ed04

0800d270 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b08e      	sub	sp, #56	@ 0x38
 800d274:	af00      	add	r7, sp, #0
 800d276:	60f8      	str	r0, [r7, #12]
 800d278:	60b9      	str	r1, [r7, #8]
 800d27a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d282:	2b00      	cmp	r3, #0
 800d284:	d10b      	bne.n	800d29e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d28a:	f383 8811 	msr	BASEPRI, r3
 800d28e:	f3bf 8f6f 	isb	sy
 800d292:	f3bf 8f4f 	dsb	sy
 800d296:	623b      	str	r3, [r7, #32]
}
 800d298:	bf00      	nop
 800d29a:	bf00      	nop
 800d29c:	e7fd      	b.n	800d29a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d103      	bne.n	800d2ac <xQueueReceiveFromISR+0x3c>
 800d2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d101      	bne.n	800d2b0 <xQueueReceiveFromISR+0x40>
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	e000      	b.n	800d2b2 <xQueueReceiveFromISR+0x42>
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d10b      	bne.n	800d2ce <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d2b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2ba:	f383 8811 	msr	BASEPRI, r3
 800d2be:	f3bf 8f6f 	isb	sy
 800d2c2:	f3bf 8f4f 	dsb	sy
 800d2c6:	61fb      	str	r3, [r7, #28]
}
 800d2c8:	bf00      	nop
 800d2ca:	bf00      	nop
 800d2cc:	e7fd      	b.n	800d2ca <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d2ce:	f002 fe3b 	bl	800ff48 <vPortValidateInterruptPriority>
	__asm volatile
 800d2d2:	f3ef 8211 	mrs	r2, BASEPRI
 800d2d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2da:	f383 8811 	msr	BASEPRI, r3
 800d2de:	f3bf 8f6f 	isb	sy
 800d2e2:	f3bf 8f4f 	dsb	sy
 800d2e6:	61ba      	str	r2, [r7, #24]
 800d2e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d2ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d2ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2f2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d02f      	beq.n	800d35a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d300:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d304:	68b9      	ldr	r1, [r7, #8]
 800d306:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d308:	f000 f8da 	bl	800d4c0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d30e:	1e5a      	subs	r2, r3, #1
 800d310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d312:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d314:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d31c:	d112      	bne.n	800d344 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d320:	691b      	ldr	r3, [r3, #16]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d016      	beq.n	800d354 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d328:	3310      	adds	r3, #16
 800d32a:	4618      	mov	r0, r3
 800d32c:	f001 f9f2 	bl	800e714 <xTaskRemoveFromEventList>
 800d330:	4603      	mov	r3, r0
 800d332:	2b00      	cmp	r3, #0
 800d334:	d00e      	beq.n	800d354 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d00b      	beq.n	800d354 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2201      	movs	r2, #1
 800d340:	601a      	str	r2, [r3, #0]
 800d342:	e007      	b.n	800d354 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d344:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d348:	3301      	adds	r3, #1
 800d34a:	b2db      	uxtb	r3, r3
 800d34c:	b25a      	sxtb	r2, r3
 800d34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d350:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d354:	2301      	movs	r3, #1
 800d356:	637b      	str	r3, [r7, #52]	@ 0x34
 800d358:	e001      	b.n	800d35e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d35a:	2300      	movs	r3, #0
 800d35c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d35e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d360:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	f383 8811 	msr	BASEPRI, r3
}
 800d368:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d36a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3738      	adds	r7, #56	@ 0x38
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b086      	sub	sp, #24
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d10b      	bne.n	800d39e <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 800d386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d38a:	f383 8811 	msr	BASEPRI, r3
 800d38e:	f3bf 8f6f 	isb	sy
 800d392:	f3bf 8f4f 	dsb	sy
 800d396:	60fb      	str	r3, [r7, #12]
}
 800d398:	bf00      	nop
 800d39a:	bf00      	nop
 800d39c:	e7fd      	b.n	800d39a <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800d39e:	f002 fcf3 	bl	800fd88 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3aa:	1ad3      	subs	r3, r2, r3
 800d3ac:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800d3ae:	f002 fd1d 	bl	800fdec <vPortExitCritical>

	return uxReturn;
 800d3b2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3718      	adds	r7, #24
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d3bc:	b480      	push	{r7}
 800d3be:	b085      	sub	sp, #20
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d006      	beq.n	800d3da <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800d3d6:	60fb      	str	r3, [r7, #12]
 800d3d8:	e001      	b.n	800d3de <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d3de:	68fb      	ldr	r3, [r7, #12]
	}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3714      	adds	r7, #20
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr

0800d3ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b086      	sub	sp, #24
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d400:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d406:	2b00      	cmp	r3, #0
 800d408:	d10d      	bne.n	800d426 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d14d      	bne.n	800d4ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	689b      	ldr	r3, [r3, #8]
 800d416:	4618      	mov	r0, r3
 800d418:	f001 fcca 	bl	800edb0 <xTaskPriorityDisinherit>
 800d41c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	2200      	movs	r2, #0
 800d422:	609a      	str	r2, [r3, #8]
 800d424:	e043      	b.n	800d4ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d119      	bne.n	800d460 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	6858      	ldr	r0, [r3, #4]
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d434:	461a      	mov	r2, r3
 800d436:	68b9      	ldr	r1, [r7, #8]
 800d438:	f003 fead 	bl	8011196 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	685a      	ldr	r2, [r3, #4]
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d444:	441a      	add	r2, r3
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	685a      	ldr	r2, [r3, #4]
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	689b      	ldr	r3, [r3, #8]
 800d452:	429a      	cmp	r2, r3
 800d454:	d32b      	bcc.n	800d4ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681a      	ldr	r2, [r3, #0]
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	605a      	str	r2, [r3, #4]
 800d45e:	e026      	b.n	800d4ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	68d8      	ldr	r0, [r3, #12]
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d468:	461a      	mov	r2, r3
 800d46a:	68b9      	ldr	r1, [r7, #8]
 800d46c:	f003 fe93 	bl	8011196 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	68da      	ldr	r2, [r3, #12]
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d478:	425b      	negs	r3, r3
 800d47a:	441a      	add	r2, r3
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	68da      	ldr	r2, [r3, #12]
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	429a      	cmp	r2, r3
 800d48a:	d207      	bcs.n	800d49c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	689a      	ldr	r2, [r3, #8]
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d494:	425b      	negs	r3, r3
 800d496:	441a      	add	r2, r3
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2b02      	cmp	r3, #2
 800d4a0:	d105      	bne.n	800d4ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4a2:	693b      	ldr	r3, [r7, #16]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d002      	beq.n	800d4ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	3b01      	subs	r3, #1
 800d4ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	1c5a      	adds	r2, r3, #1
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d4b6:	697b      	ldr	r3, [r7, #20]
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3718      	adds	r7, #24
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d018      	beq.n	800d504 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	68da      	ldr	r2, [r3, #12]
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4da:	441a      	add	r2, r3
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	68da      	ldr	r2, [r3, #12]
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	689b      	ldr	r3, [r3, #8]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d303      	bcc.n	800d4f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	68d9      	ldr	r1, [r3, #12]
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	6838      	ldr	r0, [r7, #0]
 800d500:	f003 fe49 	bl	8011196 <memcpy>
	}
}
 800d504:	bf00      	nop
 800d506:	3708      	adds	r7, #8
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b084      	sub	sp, #16
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d514:	f002 fc38 	bl	800fd88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d51e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d520:	e011      	b.n	800d546 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d526:	2b00      	cmp	r3, #0
 800d528:	d012      	beq.n	800d550 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	3324      	adds	r3, #36	@ 0x24
 800d52e:	4618      	mov	r0, r3
 800d530:	f001 f8f0 	bl	800e714 <xTaskRemoveFromEventList>
 800d534:	4603      	mov	r3, r0
 800d536:	2b00      	cmp	r3, #0
 800d538:	d001      	beq.n	800d53e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d53a:	f001 fa2d 	bl	800e998 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d53e:	7bfb      	ldrb	r3, [r7, #15]
 800d540:	3b01      	subs	r3, #1
 800d542:	b2db      	uxtb	r3, r3
 800d544:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	dce9      	bgt.n	800d522 <prvUnlockQueue+0x16>
 800d54e:	e000      	b.n	800d552 <prvUnlockQueue+0x46>
					break;
 800d550:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	22ff      	movs	r2, #255	@ 0xff
 800d556:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d55a:	f002 fc47 	bl	800fdec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d55e:	f002 fc13 	bl	800fd88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d568:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d56a:	e011      	b.n	800d590 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	691b      	ldr	r3, [r3, #16]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d012      	beq.n	800d59a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	3310      	adds	r3, #16
 800d578:	4618      	mov	r0, r3
 800d57a:	f001 f8cb 	bl	800e714 <xTaskRemoveFromEventList>
 800d57e:	4603      	mov	r3, r0
 800d580:	2b00      	cmp	r3, #0
 800d582:	d001      	beq.n	800d588 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d584:	f001 fa08 	bl	800e998 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d588:	7bbb      	ldrb	r3, [r7, #14]
 800d58a:	3b01      	subs	r3, #1
 800d58c:	b2db      	uxtb	r3, r3
 800d58e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d594:	2b00      	cmp	r3, #0
 800d596:	dce9      	bgt.n	800d56c <prvUnlockQueue+0x60>
 800d598:	e000      	b.n	800d59c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d59a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	22ff      	movs	r2, #255	@ 0xff
 800d5a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d5a4:	f002 fc22 	bl	800fdec <vPortExitCritical>
}
 800d5a8:	bf00      	nop
 800d5aa:	3710      	adds	r7, #16
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d5b8:	f002 fbe6 	bl	800fd88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d102      	bne.n	800d5ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	60fb      	str	r3, [r7, #12]
 800d5c8:	e001      	b.n	800d5ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d5ce:	f002 fc0d 	bl	800fdec <vPortExitCritical>

	return xReturn;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	3710      	adds	r7, #16
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}

0800d5dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b084      	sub	sp, #16
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d5e4:	f002 fbd0 	bl	800fd88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d102      	bne.n	800d5fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	60fb      	str	r3, [r7, #12]
 800d5f8:	e001      	b.n	800d5fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d5fe:	f002 fbf5 	bl	800fdec <vPortExitCritical>

	return xReturn;
 800d602:	68fb      	ldr	r3, [r7, #12]
}
 800d604:	4618      	mov	r0, r3
 800d606:	3710      	adds	r7, #16
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d60c:	b480      	push	{r7}
 800d60e:	b085      	sub	sp, #20
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d616:	2300      	movs	r3, #0
 800d618:	60fb      	str	r3, [r7, #12]
 800d61a:	e014      	b.n	800d646 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d61c:	4a0f      	ldr	r2, [pc, #60]	@ (800d65c <vQueueAddToRegistry+0x50>)
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d10b      	bne.n	800d640 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d628:	490c      	ldr	r1, [pc, #48]	@ (800d65c <vQueueAddToRegistry+0x50>)
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	683a      	ldr	r2, [r7, #0]
 800d62e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d632:	4a0a      	ldr	r2, [pc, #40]	@ (800d65c <vQueueAddToRegistry+0x50>)
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	00db      	lsls	r3, r3, #3
 800d638:	4413      	add	r3, r2
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d63e:	e006      	b.n	800d64e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	3301      	adds	r3, #1
 800d644:	60fb      	str	r3, [r7, #12]
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	2b07      	cmp	r3, #7
 800d64a:	d9e7      	bls.n	800d61c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d64c:	bf00      	nop
 800d64e:	bf00      	nop
 800d650:	3714      	adds	r7, #20
 800d652:	46bd      	mov	sp, r7
 800d654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d658:	4770      	bx	lr
 800d65a:	bf00      	nop
 800d65c:	20000cb8 	.word	0x20000cb8

0800d660 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d660:	b580      	push	{r7, lr}
 800d662:	b086      	sub	sp, #24
 800d664:	af00      	add	r7, sp, #0
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	60b9      	str	r1, [r7, #8]
 800d66a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d670:	f002 fb8a 	bl	800fd88 <vPortEnterCritical>
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d67a:	b25b      	sxtb	r3, r3
 800d67c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d680:	d103      	bne.n	800d68a <vQueueWaitForMessageRestricted+0x2a>
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	2200      	movs	r2, #0
 800d686:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d690:	b25b      	sxtb	r3, r3
 800d692:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d696:	d103      	bne.n	800d6a0 <vQueueWaitForMessageRestricted+0x40>
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	2200      	movs	r2, #0
 800d69c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d6a0:	f002 fba4 	bl	800fdec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d106      	bne.n	800d6ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	3324      	adds	r3, #36	@ 0x24
 800d6b0:	687a      	ldr	r2, [r7, #4]
 800d6b2:	68b9      	ldr	r1, [r7, #8]
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f001 f801 	bl	800e6bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d6ba:	6978      	ldr	r0, [r7, #20]
 800d6bc:	f7ff ff26 	bl	800d50c <prvUnlockQueue>
	}
 800d6c0:	bf00      	nop
 800d6c2:	3718      	adds	r7, #24
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b08e      	sub	sp, #56	@ 0x38
 800d6cc:	af04      	add	r7, sp, #16
 800d6ce:	60f8      	str	r0, [r7, #12]
 800d6d0:	60b9      	str	r1, [r7, #8]
 800d6d2:	607a      	str	r2, [r7, #4]
 800d6d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d6d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d10b      	bne.n	800d6f4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d6dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6e0:	f383 8811 	msr	BASEPRI, r3
 800d6e4:	f3bf 8f6f 	isb	sy
 800d6e8:	f3bf 8f4f 	dsb	sy
 800d6ec:	623b      	str	r3, [r7, #32]
}
 800d6ee:	bf00      	nop
 800d6f0:	bf00      	nop
 800d6f2:	e7fd      	b.n	800d6f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d10b      	bne.n	800d712 <xTaskCreateStatic+0x4a>
	__asm volatile
 800d6fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6fe:	f383 8811 	msr	BASEPRI, r3
 800d702:	f3bf 8f6f 	isb	sy
 800d706:	f3bf 8f4f 	dsb	sy
 800d70a:	61fb      	str	r3, [r7, #28]
}
 800d70c:	bf00      	nop
 800d70e:	bf00      	nop
 800d710:	e7fd      	b.n	800d70e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d712:	23a8      	movs	r3, #168	@ 0xa8
 800d714:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d716:	693b      	ldr	r3, [r7, #16]
 800d718:	2ba8      	cmp	r3, #168	@ 0xa8
 800d71a:	d00b      	beq.n	800d734 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d71c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d720:	f383 8811 	msr	BASEPRI, r3
 800d724:	f3bf 8f6f 	isb	sy
 800d728:	f3bf 8f4f 	dsb	sy
 800d72c:	61bb      	str	r3, [r7, #24]
}
 800d72e:	bf00      	nop
 800d730:	bf00      	nop
 800d732:	e7fd      	b.n	800d730 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d734:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d01e      	beq.n	800d77a <xTaskCreateStatic+0xb2>
 800d73c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d01b      	beq.n	800d77a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d744:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d748:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d74a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d74e:	2202      	movs	r2, #2
 800d750:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d754:	2300      	movs	r3, #0
 800d756:	9303      	str	r3, [sp, #12]
 800d758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d75a:	9302      	str	r3, [sp, #8]
 800d75c:	f107 0314 	add.w	r3, r7, #20
 800d760:	9301      	str	r3, [sp, #4]
 800d762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d764:	9300      	str	r3, [sp, #0]
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	687a      	ldr	r2, [r7, #4]
 800d76a:	68b9      	ldr	r1, [r7, #8]
 800d76c:	68f8      	ldr	r0, [r7, #12]
 800d76e:	f000 f851 	bl	800d814 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d772:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d774:	f000 f8f6 	bl	800d964 <prvAddNewTaskToReadyList>
 800d778:	e001      	b.n	800d77e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d77a:	2300      	movs	r3, #0
 800d77c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d77e:	697b      	ldr	r3, [r7, #20]
	}
 800d780:	4618      	mov	r0, r3
 800d782:	3728      	adds	r7, #40	@ 0x28
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b08c      	sub	sp, #48	@ 0x30
 800d78c:	af04      	add	r7, sp, #16
 800d78e:	60f8      	str	r0, [r7, #12]
 800d790:	60b9      	str	r1, [r7, #8]
 800d792:	603b      	str	r3, [r7, #0]
 800d794:	4613      	mov	r3, r2
 800d796:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d798:	88fb      	ldrh	r3, [r7, #6]
 800d79a:	009b      	lsls	r3, r3, #2
 800d79c:	4618      	mov	r0, r3
 800d79e:	f002 fc15 	bl	800ffcc <pvPortMalloc>
 800d7a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d00e      	beq.n	800d7c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d7aa:	20a8      	movs	r0, #168	@ 0xa8
 800d7ac:	f002 fc0e 	bl	800ffcc <pvPortMalloc>
 800d7b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d7b2:	69fb      	ldr	r3, [r7, #28]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d003      	beq.n	800d7c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	697a      	ldr	r2, [r7, #20]
 800d7bc:	631a      	str	r2, [r3, #48]	@ 0x30
 800d7be:	e005      	b.n	800d7cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d7c0:	6978      	ldr	r0, [r7, #20]
 800d7c2:	f002 fcd1 	bl	8010168 <vPortFree>
 800d7c6:	e001      	b.n	800d7cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d017      	beq.n	800d802 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d7d2:	69fb      	ldr	r3, [r7, #28]
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d7da:	88fa      	ldrh	r2, [r7, #6]
 800d7dc:	2300      	movs	r3, #0
 800d7de:	9303      	str	r3, [sp, #12]
 800d7e0:	69fb      	ldr	r3, [r7, #28]
 800d7e2:	9302      	str	r3, [sp, #8]
 800d7e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7e6:	9301      	str	r3, [sp, #4]
 800d7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7ea:	9300      	str	r3, [sp, #0]
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	68b9      	ldr	r1, [r7, #8]
 800d7f0:	68f8      	ldr	r0, [r7, #12]
 800d7f2:	f000 f80f 	bl	800d814 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d7f6:	69f8      	ldr	r0, [r7, #28]
 800d7f8:	f000 f8b4 	bl	800d964 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	61bb      	str	r3, [r7, #24]
 800d800:	e002      	b.n	800d808 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d802:	f04f 33ff 	mov.w	r3, #4294967295
 800d806:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d808:	69bb      	ldr	r3, [r7, #24]
	}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3720      	adds	r7, #32
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
	...

0800d814 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b088      	sub	sp, #32
 800d818:	af00      	add	r7, sp, #0
 800d81a:	60f8      	str	r0, [r7, #12]
 800d81c:	60b9      	str	r1, [r7, #8]
 800d81e:	607a      	str	r2, [r7, #4]
 800d820:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d824:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	009b      	lsls	r3, r3, #2
 800d82a:	461a      	mov	r2, r3
 800d82c:	21a5      	movs	r1, #165	@ 0xa5
 800d82e:	f003 fb46 	bl	8010ebe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d834:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d83c:	3b01      	subs	r3, #1
 800d83e:	009b      	lsls	r3, r3, #2
 800d840:	4413      	add	r3, r2
 800d842:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d844:	69bb      	ldr	r3, [r7, #24]
 800d846:	f023 0307 	bic.w	r3, r3, #7
 800d84a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d84c:	69bb      	ldr	r3, [r7, #24]
 800d84e:	f003 0307 	and.w	r3, r3, #7
 800d852:	2b00      	cmp	r3, #0
 800d854:	d00b      	beq.n	800d86e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d85a:	f383 8811 	msr	BASEPRI, r3
 800d85e:	f3bf 8f6f 	isb	sy
 800d862:	f3bf 8f4f 	dsb	sy
 800d866:	617b      	str	r3, [r7, #20]
}
 800d868:	bf00      	nop
 800d86a:	bf00      	nop
 800d86c:	e7fd      	b.n	800d86a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d01f      	beq.n	800d8b4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d874:	2300      	movs	r3, #0
 800d876:	61fb      	str	r3, [r7, #28]
 800d878:	e012      	b.n	800d8a0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d87a:	68ba      	ldr	r2, [r7, #8]
 800d87c:	69fb      	ldr	r3, [r7, #28]
 800d87e:	4413      	add	r3, r2
 800d880:	7819      	ldrb	r1, [r3, #0]
 800d882:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d884:	69fb      	ldr	r3, [r7, #28]
 800d886:	4413      	add	r3, r2
 800d888:	3334      	adds	r3, #52	@ 0x34
 800d88a:	460a      	mov	r2, r1
 800d88c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d88e:	68ba      	ldr	r2, [r7, #8]
 800d890:	69fb      	ldr	r3, [r7, #28]
 800d892:	4413      	add	r3, r2
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d006      	beq.n	800d8a8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d89a:	69fb      	ldr	r3, [r7, #28]
 800d89c:	3301      	adds	r3, #1
 800d89e:	61fb      	str	r3, [r7, #28]
 800d8a0:	69fb      	ldr	r3, [r7, #28]
 800d8a2:	2b0f      	cmp	r3, #15
 800d8a4:	d9e9      	bls.n	800d87a <prvInitialiseNewTask+0x66>
 800d8a6:	e000      	b.n	800d8aa <prvInitialiseNewTask+0x96>
			{
				break;
 800d8a8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d8b2:	e003      	b.n	800d8bc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d8bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8be:	2b37      	cmp	r3, #55	@ 0x37
 800d8c0:	d901      	bls.n	800d8c6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d8c2:	2337      	movs	r3, #55	@ 0x37
 800d8c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d8ca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d8cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d8d0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8da:	3304      	adds	r3, #4
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7fe ff29 	bl	800c734 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8e4:	3318      	adds	r3, #24
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f7fe ff24 	bl	800c734 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d8ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d900:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d904:	2200      	movs	r2, #0
 800d906:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d90c:	2200      	movs	r2, #0
 800d90e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d914:	3354      	adds	r3, #84	@ 0x54
 800d916:	224c      	movs	r2, #76	@ 0x4c
 800d918:	2100      	movs	r1, #0
 800d91a:	4618      	mov	r0, r3
 800d91c:	f003 facf 	bl	8010ebe <memset>
 800d920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d922:	4a0d      	ldr	r2, [pc, #52]	@ (800d958 <prvInitialiseNewTask+0x144>)
 800d924:	659a      	str	r2, [r3, #88]	@ 0x58
 800d926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d928:	4a0c      	ldr	r2, [pc, #48]	@ (800d95c <prvInitialiseNewTask+0x148>)
 800d92a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d92c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d92e:	4a0c      	ldr	r2, [pc, #48]	@ (800d960 <prvInitialiseNewTask+0x14c>)
 800d930:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d932:	683a      	ldr	r2, [r7, #0]
 800d934:	68f9      	ldr	r1, [r7, #12]
 800d936:	69b8      	ldr	r0, [r7, #24]
 800d938:	f002 f8f4 	bl	800fb24 <pxPortInitialiseStack>
 800d93c:	4602      	mov	r2, r0
 800d93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d940:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d944:	2b00      	cmp	r3, #0
 800d946:	d002      	beq.n	800d94e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d94a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d94c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d94e:	bf00      	nop
 800d950:	3720      	adds	r7, #32
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	2001151c 	.word	0x2001151c
 800d95c:	20011584 	.word	0x20011584
 800d960:	200115ec 	.word	0x200115ec

0800d964 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d96c:	f002 fa0c 	bl	800fd88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d970:	4b2d      	ldr	r3, [pc, #180]	@ (800da28 <prvAddNewTaskToReadyList+0xc4>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	3301      	adds	r3, #1
 800d976:	4a2c      	ldr	r2, [pc, #176]	@ (800da28 <prvAddNewTaskToReadyList+0xc4>)
 800d978:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d97a:	4b2c      	ldr	r3, [pc, #176]	@ (800da2c <prvAddNewTaskToReadyList+0xc8>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d109      	bne.n	800d996 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d982:	4a2a      	ldr	r2, [pc, #168]	@ (800da2c <prvAddNewTaskToReadyList+0xc8>)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d988:	4b27      	ldr	r3, [pc, #156]	@ (800da28 <prvAddNewTaskToReadyList+0xc4>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	d110      	bne.n	800d9b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d990:	f001 f826 	bl	800e9e0 <prvInitialiseTaskLists>
 800d994:	e00d      	b.n	800d9b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d996:	4b26      	ldr	r3, [pc, #152]	@ (800da30 <prvAddNewTaskToReadyList+0xcc>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d109      	bne.n	800d9b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d99e:	4b23      	ldr	r3, [pc, #140]	@ (800da2c <prvAddNewTaskToReadyList+0xc8>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	d802      	bhi.n	800d9b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d9ac:	4a1f      	ldr	r2, [pc, #124]	@ (800da2c <prvAddNewTaskToReadyList+0xc8>)
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d9b2:	4b20      	ldr	r3, [pc, #128]	@ (800da34 <prvAddNewTaskToReadyList+0xd0>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	4a1e      	ldr	r2, [pc, #120]	@ (800da34 <prvAddNewTaskToReadyList+0xd0>)
 800d9ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d9bc:	4b1d      	ldr	r3, [pc, #116]	@ (800da34 <prvAddNewTaskToReadyList+0xd0>)
 800d9be:	681a      	ldr	r2, [r3, #0]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9c8:	4b1b      	ldr	r3, [pc, #108]	@ (800da38 <prvAddNewTaskToReadyList+0xd4>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d903      	bls.n	800d9d8 <prvAddNewTaskToReadyList+0x74>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9d4:	4a18      	ldr	r2, [pc, #96]	@ (800da38 <prvAddNewTaskToReadyList+0xd4>)
 800d9d6:	6013      	str	r3, [r2, #0]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9dc:	4613      	mov	r3, r2
 800d9de:	009b      	lsls	r3, r3, #2
 800d9e0:	4413      	add	r3, r2
 800d9e2:	009b      	lsls	r3, r3, #2
 800d9e4:	4a15      	ldr	r2, [pc, #84]	@ (800da3c <prvAddNewTaskToReadyList+0xd8>)
 800d9e6:	441a      	add	r2, r3
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	3304      	adds	r3, #4
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	4610      	mov	r0, r2
 800d9f0:	f7fe fead 	bl	800c74e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d9f4:	f002 f9fa 	bl	800fdec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d9f8:	4b0d      	ldr	r3, [pc, #52]	@ (800da30 <prvAddNewTaskToReadyList+0xcc>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d00e      	beq.n	800da1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800da00:	4b0a      	ldr	r3, [pc, #40]	@ (800da2c <prvAddNewTaskToReadyList+0xc8>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d207      	bcs.n	800da1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800da0e:	4b0c      	ldr	r3, [pc, #48]	@ (800da40 <prvAddNewTaskToReadyList+0xdc>)
 800da10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da14:	601a      	str	r2, [r3, #0]
 800da16:	f3bf 8f4f 	dsb	sy
 800da1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da1e:	bf00      	nop
 800da20:	3708      	adds	r7, #8
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}
 800da26:	bf00      	nop
 800da28:	200011cc 	.word	0x200011cc
 800da2c:	20000cf8 	.word	0x20000cf8
 800da30:	200011d8 	.word	0x200011d8
 800da34:	200011e8 	.word	0x200011e8
 800da38:	200011d4 	.word	0x200011d4
 800da3c:	20000cfc 	.word	0x20000cfc
 800da40:	e000ed04 	.word	0xe000ed04

0800da44 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800da44:	b580      	push	{r7, lr}
 800da46:	b084      	sub	sp, #16
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800da4c:	f002 f99c 	bl	800fd88 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d102      	bne.n	800da5c <vTaskDelete+0x18>
 800da56:	4b2d      	ldr	r3, [pc, #180]	@ (800db0c <vTaskDelete+0xc8>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	e000      	b.n	800da5e <vTaskDelete+0x1a>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	3304      	adds	r3, #4
 800da64:	4618      	mov	r0, r3
 800da66:	f7fe fecf 	bl	800c808 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d004      	beq.n	800da7c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	3318      	adds	r3, #24
 800da76:	4618      	mov	r0, r3
 800da78:	f7fe fec6 	bl	800c808 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800da7c:	4b24      	ldr	r3, [pc, #144]	@ (800db10 <vTaskDelete+0xcc>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	3301      	adds	r3, #1
 800da82:	4a23      	ldr	r2, [pc, #140]	@ (800db10 <vTaskDelete+0xcc>)
 800da84:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800da86:	4b21      	ldr	r3, [pc, #132]	@ (800db0c <vTaskDelete+0xc8>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	68fa      	ldr	r2, [r7, #12]
 800da8c:	429a      	cmp	r2, r3
 800da8e:	d10b      	bne.n	800daa8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	3304      	adds	r3, #4
 800da94:	4619      	mov	r1, r3
 800da96:	481f      	ldr	r0, [pc, #124]	@ (800db14 <vTaskDelete+0xd0>)
 800da98:	f7fe fe59 	bl	800c74e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800da9c:	4b1e      	ldr	r3, [pc, #120]	@ (800db18 <vTaskDelete+0xd4>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	3301      	adds	r3, #1
 800daa2:	4a1d      	ldr	r2, [pc, #116]	@ (800db18 <vTaskDelete+0xd4>)
 800daa4:	6013      	str	r3, [r2, #0]
 800daa6:	e009      	b.n	800dabc <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800daa8:	4b1c      	ldr	r3, [pc, #112]	@ (800db1c <vTaskDelete+0xd8>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	3b01      	subs	r3, #1
 800daae:	4a1b      	ldr	r2, [pc, #108]	@ (800db1c <vTaskDelete+0xd8>)
 800dab0:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800dab2:	68f8      	ldr	r0, [r7, #12]
 800dab4:	f001 f8a0 	bl	800ebf8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800dab8:	f001 f8d4 	bl	800ec64 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800dabc:	f002 f996 	bl	800fdec <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800dac0:	4b17      	ldr	r3, [pc, #92]	@ (800db20 <vTaskDelete+0xdc>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d01c      	beq.n	800db02 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800dac8:	4b10      	ldr	r3, [pc, #64]	@ (800db0c <vTaskDelete+0xc8>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	68fa      	ldr	r2, [r7, #12]
 800dace:	429a      	cmp	r2, r3
 800dad0:	d117      	bne.n	800db02 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800dad2:	4b14      	ldr	r3, [pc, #80]	@ (800db24 <vTaskDelete+0xe0>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d00b      	beq.n	800daf2 <vTaskDelete+0xae>
	__asm volatile
 800dada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dade:	f383 8811 	msr	BASEPRI, r3
 800dae2:	f3bf 8f6f 	isb	sy
 800dae6:	f3bf 8f4f 	dsb	sy
 800daea:	60bb      	str	r3, [r7, #8]
}
 800daec:	bf00      	nop
 800daee:	bf00      	nop
 800daf0:	e7fd      	b.n	800daee <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800daf2:	4b0d      	ldr	r3, [pc, #52]	@ (800db28 <vTaskDelete+0xe4>)
 800daf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800daf8:	601a      	str	r2, [r3, #0]
 800dafa:	f3bf 8f4f 	dsb	sy
 800dafe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800db02:	bf00      	nop
 800db04:	3710      	adds	r7, #16
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
 800db0a:	bf00      	nop
 800db0c:	20000cf8 	.word	0x20000cf8
 800db10:	200011e8 	.word	0x200011e8
 800db14:	200011a0 	.word	0x200011a0
 800db18:	200011b4 	.word	0x200011b4
 800db1c:	200011cc 	.word	0x200011cc
 800db20:	200011d8 	.word	0x200011d8
 800db24:	200011f4 	.word	0x200011f4
 800db28:	e000ed04 	.word	0xe000ed04

0800db2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b084      	sub	sp, #16
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800db34:	2300      	movs	r3, #0
 800db36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d018      	beq.n	800db70 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800db3e:	4b14      	ldr	r3, [pc, #80]	@ (800db90 <vTaskDelay+0x64>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d00b      	beq.n	800db5e <vTaskDelay+0x32>
	__asm volatile
 800db46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db4a:	f383 8811 	msr	BASEPRI, r3
 800db4e:	f3bf 8f6f 	isb	sy
 800db52:	f3bf 8f4f 	dsb	sy
 800db56:	60bb      	str	r3, [r7, #8]
}
 800db58:	bf00      	nop
 800db5a:	bf00      	nop
 800db5c:	e7fd      	b.n	800db5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800db5e:	f000 fa99 	bl	800e094 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800db62:	2100      	movs	r1, #0
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f001 fbb1 	bl	800f2cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800db6a:	f000 faa1 	bl	800e0b0 <xTaskResumeAll>
 800db6e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d107      	bne.n	800db86 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800db76:	4b07      	ldr	r3, [pc, #28]	@ (800db94 <vTaskDelay+0x68>)
 800db78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db7c:	601a      	str	r2, [r3, #0]
 800db7e:	f3bf 8f4f 	dsb	sy
 800db82:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db86:	bf00      	nop
 800db88:	3710      	adds	r7, #16
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	bf00      	nop
 800db90:	200011f4 	.word	0x200011f4
 800db94:	e000ed04 	.word	0xe000ed04

0800db98 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b088      	sub	sp, #32
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800dba4:	69bb      	ldr	r3, [r7, #24]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d10b      	bne.n	800dbc2 <eTaskGetState+0x2a>
	__asm volatile
 800dbaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbae:	f383 8811 	msr	BASEPRI, r3
 800dbb2:	f3bf 8f6f 	isb	sy
 800dbb6:	f3bf 8f4f 	dsb	sy
 800dbba:	60bb      	str	r3, [r7, #8]
}
 800dbbc:	bf00      	nop
 800dbbe:	bf00      	nop
 800dbc0:	e7fd      	b.n	800dbbe <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800dbc2:	4b24      	ldr	r3, [pc, #144]	@ (800dc54 <eTaskGetState+0xbc>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	69ba      	ldr	r2, [r7, #24]
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d102      	bne.n	800dbd2 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	77fb      	strb	r3, [r7, #31]
 800dbd0:	e03a      	b.n	800dc48 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800dbd2:	f002 f8d9 	bl	800fd88 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800dbd6:	69bb      	ldr	r3, [r7, #24]
 800dbd8:	695b      	ldr	r3, [r3, #20]
 800dbda:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800dbdc:	4b1e      	ldr	r3, [pc, #120]	@ (800dc58 <eTaskGetState+0xc0>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800dbe2:	4b1e      	ldr	r3, [pc, #120]	@ (800dc5c <eTaskGetState+0xc4>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800dbe8:	f002 f900 	bl	800fdec <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800dbec:	697a      	ldr	r2, [r7, #20]
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d003      	beq.n	800dbfc <eTaskGetState+0x64>
 800dbf4:	697a      	ldr	r2, [r7, #20]
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d102      	bne.n	800dc02 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800dbfc:	2302      	movs	r3, #2
 800dbfe:	77fb      	strb	r3, [r7, #31]
 800dc00:	e022      	b.n	800dc48 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	4a16      	ldr	r2, [pc, #88]	@ (800dc60 <eTaskGetState+0xc8>)
 800dc06:	4293      	cmp	r3, r2
 800dc08:	d112      	bne.n	800dc30 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800dc0a:	69bb      	ldr	r3, [r7, #24]
 800dc0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d10b      	bne.n	800dc2a <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800dc12:	69bb      	ldr	r3, [r7, #24]
 800dc14:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800dc18:	b2db      	uxtb	r3, r3
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	d102      	bne.n	800dc24 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800dc1e:	2302      	movs	r3, #2
 800dc20:	77fb      	strb	r3, [r7, #31]
 800dc22:	e011      	b.n	800dc48 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800dc24:	2303      	movs	r3, #3
 800dc26:	77fb      	strb	r3, [r7, #31]
 800dc28:	e00e      	b.n	800dc48 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800dc2a:	2302      	movs	r3, #2
 800dc2c:	77fb      	strb	r3, [r7, #31]
 800dc2e:	e00b      	b.n	800dc48 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	4a0c      	ldr	r2, [pc, #48]	@ (800dc64 <eTaskGetState+0xcc>)
 800dc34:	4293      	cmp	r3, r2
 800dc36:	d002      	beq.n	800dc3e <eTaskGetState+0xa6>
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d102      	bne.n	800dc44 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800dc3e:	2304      	movs	r3, #4
 800dc40:	77fb      	strb	r3, [r7, #31]
 800dc42:	e001      	b.n	800dc48 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800dc44:	2301      	movs	r3, #1
 800dc46:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800dc48:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3720      	adds	r7, #32
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}
 800dc52:	bf00      	nop
 800dc54:	20000cf8 	.word	0x20000cf8
 800dc58:	20001184 	.word	0x20001184
 800dc5c:	20001188 	.word	0x20001188
 800dc60:	200011b8 	.word	0x200011b8
 800dc64:	200011a0 	.word	0x200011a0

0800dc68 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b088      	sub	sp, #32
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800dc72:	2300      	movs	r3, #0
 800dc74:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	2b37      	cmp	r3, #55	@ 0x37
 800dc7a:	d90b      	bls.n	800dc94 <vTaskPrioritySet+0x2c>
	__asm volatile
 800dc7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc80:	f383 8811 	msr	BASEPRI, r3
 800dc84:	f3bf 8f6f 	isb	sy
 800dc88:	f3bf 8f4f 	dsb	sy
 800dc8c:	60fb      	str	r3, [r7, #12]
}
 800dc8e:	bf00      	nop
 800dc90:	bf00      	nop
 800dc92:	e7fd      	b.n	800dc90 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	2b37      	cmp	r3, #55	@ 0x37
 800dc98:	d901      	bls.n	800dc9e <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dc9a:	2337      	movs	r3, #55	@ 0x37
 800dc9c:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800dc9e:	f002 f873 	bl	800fd88 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d102      	bne.n	800dcae <vTaskPrioritySet+0x46>
 800dca8:	4b3a      	ldr	r3, [pc, #232]	@ (800dd94 <vTaskPrioritySet+0x12c>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	e000      	b.n	800dcb0 <vTaskPrioritySet+0x48>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800dcb2:	69bb      	ldr	r3, [r7, #24]
 800dcb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dcb6:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800dcb8:	697a      	ldr	r2, [r7, #20]
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d063      	beq.n	800dd88 <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800dcc0:	683a      	ldr	r2, [r7, #0]
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	d90d      	bls.n	800dce4 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 800dcc8:	4b32      	ldr	r3, [pc, #200]	@ (800dd94 <vTaskPrioritySet+0x12c>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	69ba      	ldr	r2, [r7, #24]
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	d00f      	beq.n	800dcf2 <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800dcd2:	4b30      	ldr	r3, [pc, #192]	@ (800dd94 <vTaskPrioritySet+0x12c>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcd8:	683a      	ldr	r2, [r7, #0]
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d309      	bcc.n	800dcf2 <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 800dcde:	2301      	movs	r3, #1
 800dce0:	61fb      	str	r3, [r7, #28]
 800dce2:	e006      	b.n	800dcf2 <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800dce4:	4b2b      	ldr	r3, [pc, #172]	@ (800dd94 <vTaskPrioritySet+0x12c>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	69ba      	ldr	r2, [r7, #24]
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d101      	bne.n	800dcf2 <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800dcee:	2301      	movs	r3, #1
 800dcf0:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dcf2:	69bb      	ldr	r3, [r7, #24]
 800dcf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcf6:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800dcf8:	69bb      	ldr	r3, [r7, #24]
 800dcfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dcfc:	69bb      	ldr	r3, [r7, #24]
 800dcfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d102      	bne.n	800dd0a <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 800dd04:	69bb      	ldr	r3, [r7, #24]
 800dd06:	683a      	ldr	r2, [r7, #0]
 800dd08:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	683a      	ldr	r2, [r7, #0]
 800dd0e:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dd10:	69bb      	ldr	r3, [r7, #24]
 800dd12:	699b      	ldr	r3, [r3, #24]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	db04      	blt.n	800dd22 <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dd22:	69bb      	ldr	r3, [r7, #24]
 800dd24:	6959      	ldr	r1, [r3, #20]
 800dd26:	693a      	ldr	r2, [r7, #16]
 800dd28:	4613      	mov	r3, r2
 800dd2a:	009b      	lsls	r3, r3, #2
 800dd2c:	4413      	add	r3, r2
 800dd2e:	009b      	lsls	r3, r3, #2
 800dd30:	4a19      	ldr	r2, [pc, #100]	@ (800dd98 <vTaskPrioritySet+0x130>)
 800dd32:	4413      	add	r3, r2
 800dd34:	4299      	cmp	r1, r3
 800dd36:	d11c      	bne.n	800dd72 <vTaskPrioritySet+0x10a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd38:	69bb      	ldr	r3, [r7, #24]
 800dd3a:	3304      	adds	r3, #4
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f7fe fd63 	bl	800c808 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800dd42:	69bb      	ldr	r3, [r7, #24]
 800dd44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd46:	4b15      	ldr	r3, [pc, #84]	@ (800dd9c <vTaskPrioritySet+0x134>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d903      	bls.n	800dd56 <vTaskPrioritySet+0xee>
 800dd4e:	69bb      	ldr	r3, [r7, #24]
 800dd50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd52:	4a12      	ldr	r2, [pc, #72]	@ (800dd9c <vTaskPrioritySet+0x134>)
 800dd54:	6013      	str	r3, [r2, #0]
 800dd56:	69bb      	ldr	r3, [r7, #24]
 800dd58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd5a:	4613      	mov	r3, r2
 800dd5c:	009b      	lsls	r3, r3, #2
 800dd5e:	4413      	add	r3, r2
 800dd60:	009b      	lsls	r3, r3, #2
 800dd62:	4a0d      	ldr	r2, [pc, #52]	@ (800dd98 <vTaskPrioritySet+0x130>)
 800dd64:	441a      	add	r2, r3
 800dd66:	69bb      	ldr	r3, [r7, #24]
 800dd68:	3304      	adds	r3, #4
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	4610      	mov	r0, r2
 800dd6e:	f7fe fcee 	bl	800c74e <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800dd72:	69fb      	ldr	r3, [r7, #28]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d007      	beq.n	800dd88 <vTaskPrioritySet+0x120>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800dd78:	4b09      	ldr	r3, [pc, #36]	@ (800dda0 <vTaskPrioritySet+0x138>)
 800dd7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd7e:	601a      	str	r2, [r3, #0]
 800dd80:	f3bf 8f4f 	dsb	sy
 800dd84:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800dd88:	f002 f830 	bl	800fdec <vPortExitCritical>
	}
 800dd8c:	bf00      	nop
 800dd8e:	3720      	adds	r7, #32
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	20000cf8 	.word	0x20000cf8
 800dd98:	20000cfc 	.word	0x20000cfc
 800dd9c:	200011d4 	.word	0x200011d4
 800dda0:	e000ed04 	.word	0xe000ed04

0800dda4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b084      	sub	sp, #16
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ddac:	f001 ffec 	bl	800fd88 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d102      	bne.n	800ddbc <vTaskSuspend+0x18>
 800ddb6:	4b30      	ldr	r3, [pc, #192]	@ (800de78 <vTaskSuspend+0xd4>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	e000      	b.n	800ddbe <vTaskSuspend+0x1a>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	3304      	adds	r3, #4
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7fe fd1f 	bl	800c808 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d004      	beq.n	800dddc <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	3318      	adds	r3, #24
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f7fe fd16 	bl	800c808 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	3304      	adds	r3, #4
 800dde0:	4619      	mov	r1, r3
 800dde2:	4826      	ldr	r0, [pc, #152]	@ (800de7c <vTaskSuspend+0xd8>)
 800dde4:	f7fe fcb3 	bl	800c74e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800ddee:	b2db      	uxtb	r3, r3
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	d103      	bne.n	800ddfc <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800ddfc:	f001 fff6 	bl	800fdec <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800de00:	4b1f      	ldr	r3, [pc, #124]	@ (800de80 <vTaskSuspend+0xdc>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d005      	beq.n	800de14 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800de08:	f001 ffbe 	bl	800fd88 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800de0c:	f000 ff2a 	bl	800ec64 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800de10:	f001 ffec 	bl	800fdec <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800de14:	4b18      	ldr	r3, [pc, #96]	@ (800de78 <vTaskSuspend+0xd4>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	68fa      	ldr	r2, [r7, #12]
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d128      	bne.n	800de70 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800de1e:	4b18      	ldr	r3, [pc, #96]	@ (800de80 <vTaskSuspend+0xdc>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d018      	beq.n	800de58 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800de26:	4b17      	ldr	r3, [pc, #92]	@ (800de84 <vTaskSuspend+0xe0>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d00b      	beq.n	800de46 <vTaskSuspend+0xa2>
	__asm volatile
 800de2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de32:	f383 8811 	msr	BASEPRI, r3
 800de36:	f3bf 8f6f 	isb	sy
 800de3a:	f3bf 8f4f 	dsb	sy
 800de3e:	60bb      	str	r3, [r7, #8]
}
 800de40:	bf00      	nop
 800de42:	bf00      	nop
 800de44:	e7fd      	b.n	800de42 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800de46:	4b10      	ldr	r3, [pc, #64]	@ (800de88 <vTaskSuspend+0xe4>)
 800de48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de4c:	601a      	str	r2, [r3, #0]
 800de4e:	f3bf 8f4f 	dsb	sy
 800de52:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800de56:	e00b      	b.n	800de70 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800de58:	4b08      	ldr	r3, [pc, #32]	@ (800de7c <vTaskSuspend+0xd8>)
 800de5a:	681a      	ldr	r2, [r3, #0]
 800de5c:	4b0b      	ldr	r3, [pc, #44]	@ (800de8c <vTaskSuspend+0xe8>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	429a      	cmp	r2, r3
 800de62:	d103      	bne.n	800de6c <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800de64:	4b04      	ldr	r3, [pc, #16]	@ (800de78 <vTaskSuspend+0xd4>)
 800de66:	2200      	movs	r2, #0
 800de68:	601a      	str	r2, [r3, #0]
	}
 800de6a:	e001      	b.n	800de70 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800de6c:	f000 fb5c 	bl	800e528 <vTaskSwitchContext>
	}
 800de70:	bf00      	nop
 800de72:	3710      	adds	r7, #16
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}
 800de78:	20000cf8 	.word	0x20000cf8
 800de7c:	200011b8 	.word	0x200011b8
 800de80:	200011d8 	.word	0x200011d8
 800de84:	200011f4 	.word	0x200011f4
 800de88:	e000ed04 	.word	0xe000ed04
 800de8c:	200011cc 	.word	0x200011cc

0800de90 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800de90:	b480      	push	{r7}
 800de92:	b087      	sub	sp, #28
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800de98:	2300      	movs	r3, #0
 800de9a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d10b      	bne.n	800debe <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800dea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deaa:	f383 8811 	msr	BASEPRI, r3
 800deae:	f3bf 8f6f 	isb	sy
 800deb2:	f3bf 8f4f 	dsb	sy
 800deb6:	60fb      	str	r3, [r7, #12]
}
 800deb8:	bf00      	nop
 800deba:	bf00      	nop
 800debc:	e7fd      	b.n	800deba <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800debe:	693b      	ldr	r3, [r7, #16]
 800dec0:	695b      	ldr	r3, [r3, #20]
 800dec2:	4a0a      	ldr	r2, [pc, #40]	@ (800deec <prvTaskIsTaskSuspended+0x5c>)
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d10a      	bne.n	800dede <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800decc:	4a08      	ldr	r2, [pc, #32]	@ (800def0 <prvTaskIsTaskSuspended+0x60>)
 800dece:	4293      	cmp	r3, r2
 800ded0:	d005      	beq.n	800dede <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800ded2:	693b      	ldr	r3, [r7, #16]
 800ded4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d101      	bne.n	800dede <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800deda:	2301      	movs	r3, #1
 800dedc:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dede:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800dee0:	4618      	mov	r0, r3
 800dee2:	371c      	adds	r7, #28
 800dee4:	46bd      	mov	sp, r7
 800dee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deea:	4770      	bx	lr
 800deec:	200011b8 	.word	0x200011b8
 800def0:	2000118c 	.word	0x2000118c

0800def4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800def4:	b580      	push	{r7, lr}
 800def6:	b084      	sub	sp, #16
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d10b      	bne.n	800df1e <vTaskResume+0x2a>
	__asm volatile
 800df06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df0a:	f383 8811 	msr	BASEPRI, r3
 800df0e:	f3bf 8f6f 	isb	sy
 800df12:	f3bf 8f4f 	dsb	sy
 800df16:	60bb      	str	r3, [r7, #8]
}
 800df18:	bf00      	nop
 800df1a:	bf00      	nop
 800df1c:	e7fd      	b.n	800df1a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800df1e:	4b21      	ldr	r3, [pc, #132]	@ (800dfa4 <vTaskResume+0xb0>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	68fa      	ldr	r2, [r7, #12]
 800df24:	429a      	cmp	r2, r3
 800df26:	d038      	beq.n	800df9a <vTaskResume+0xa6>
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d035      	beq.n	800df9a <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800df2e:	f001 ff2b 	bl	800fd88 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800df32:	68f8      	ldr	r0, [r7, #12]
 800df34:	f7ff ffac 	bl	800de90 <prvTaskIsTaskSuspended>
 800df38:	4603      	mov	r3, r0
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d02b      	beq.n	800df96 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	3304      	adds	r3, #4
 800df42:	4618      	mov	r0, r3
 800df44:	f7fe fc60 	bl	800c808 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df4c:	4b16      	ldr	r3, [pc, #88]	@ (800dfa8 <vTaskResume+0xb4>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	429a      	cmp	r2, r3
 800df52:	d903      	bls.n	800df5c <vTaskResume+0x68>
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df58:	4a13      	ldr	r2, [pc, #76]	@ (800dfa8 <vTaskResume+0xb4>)
 800df5a:	6013      	str	r3, [r2, #0]
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df60:	4613      	mov	r3, r2
 800df62:	009b      	lsls	r3, r3, #2
 800df64:	4413      	add	r3, r2
 800df66:	009b      	lsls	r3, r3, #2
 800df68:	4a10      	ldr	r2, [pc, #64]	@ (800dfac <vTaskResume+0xb8>)
 800df6a:	441a      	add	r2, r3
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	3304      	adds	r3, #4
 800df70:	4619      	mov	r1, r3
 800df72:	4610      	mov	r0, r2
 800df74:	f7fe fbeb 	bl	800c74e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df7c:	4b09      	ldr	r3, [pc, #36]	@ (800dfa4 <vTaskResume+0xb0>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df82:	429a      	cmp	r2, r3
 800df84:	d307      	bcc.n	800df96 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800df86:	4b0a      	ldr	r3, [pc, #40]	@ (800dfb0 <vTaskResume+0xbc>)
 800df88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df8c:	601a      	str	r2, [r3, #0]
 800df8e:	f3bf 8f4f 	dsb	sy
 800df92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800df96:	f001 ff29 	bl	800fdec <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800df9a:	bf00      	nop
 800df9c:	3710      	adds	r7, #16
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}
 800dfa2:	bf00      	nop
 800dfa4:	20000cf8 	.word	0x20000cf8
 800dfa8:	200011d4 	.word	0x200011d4
 800dfac:	20000cfc 	.word	0x20000cfc
 800dfb0:	e000ed04 	.word	0xe000ed04

0800dfb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b08a      	sub	sp, #40	@ 0x28
 800dfb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dfc2:	463a      	mov	r2, r7
 800dfc4:	1d39      	adds	r1, r7, #4
 800dfc6:	f107 0308 	add.w	r3, r7, #8
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7fe f9a2 	bl	800c314 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dfd0:	6839      	ldr	r1, [r7, #0]
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	68ba      	ldr	r2, [r7, #8]
 800dfd6:	9202      	str	r2, [sp, #8]
 800dfd8:	9301      	str	r3, [sp, #4]
 800dfda:	2300      	movs	r3, #0
 800dfdc:	9300      	str	r3, [sp, #0]
 800dfde:	2300      	movs	r3, #0
 800dfe0:	460a      	mov	r2, r1
 800dfe2:	4924      	ldr	r1, [pc, #144]	@ (800e074 <vTaskStartScheduler+0xc0>)
 800dfe4:	4824      	ldr	r0, [pc, #144]	@ (800e078 <vTaskStartScheduler+0xc4>)
 800dfe6:	f7ff fb6f 	bl	800d6c8 <xTaskCreateStatic>
 800dfea:	4603      	mov	r3, r0
 800dfec:	4a23      	ldr	r2, [pc, #140]	@ (800e07c <vTaskStartScheduler+0xc8>)
 800dfee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dff0:	4b22      	ldr	r3, [pc, #136]	@ (800e07c <vTaskStartScheduler+0xc8>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d002      	beq.n	800dffe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dff8:	2301      	movs	r3, #1
 800dffa:	617b      	str	r3, [r7, #20]
 800dffc:	e001      	b.n	800e002 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dffe:	2300      	movs	r3, #0
 800e000:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	2b01      	cmp	r3, #1
 800e006:	d102      	bne.n	800e00e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e008:	f001 f9b4 	bl	800f374 <xTimerCreateTimerTask>
 800e00c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	2b01      	cmp	r3, #1
 800e012:	d11b      	bne.n	800e04c <vTaskStartScheduler+0x98>
	__asm volatile
 800e014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e018:	f383 8811 	msr	BASEPRI, r3
 800e01c:	f3bf 8f6f 	isb	sy
 800e020:	f3bf 8f4f 	dsb	sy
 800e024:	613b      	str	r3, [r7, #16]
}
 800e026:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e028:	4b15      	ldr	r3, [pc, #84]	@ (800e080 <vTaskStartScheduler+0xcc>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	3354      	adds	r3, #84	@ 0x54
 800e02e:	4a15      	ldr	r2, [pc, #84]	@ (800e084 <vTaskStartScheduler+0xd0>)
 800e030:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e032:	4b15      	ldr	r3, [pc, #84]	@ (800e088 <vTaskStartScheduler+0xd4>)
 800e034:	f04f 32ff 	mov.w	r2, #4294967295
 800e038:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e03a:	4b14      	ldr	r3, [pc, #80]	@ (800e08c <vTaskStartScheduler+0xd8>)
 800e03c:	2201      	movs	r2, #1
 800e03e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e040:	4b13      	ldr	r3, [pc, #76]	@ (800e090 <vTaskStartScheduler+0xdc>)
 800e042:	2200      	movs	r2, #0
 800e044:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e046:	f001 fdfb 	bl	800fc40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e04a:	e00f      	b.n	800e06c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e052:	d10b      	bne.n	800e06c <vTaskStartScheduler+0xb8>
	__asm volatile
 800e054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e058:	f383 8811 	msr	BASEPRI, r3
 800e05c:	f3bf 8f6f 	isb	sy
 800e060:	f3bf 8f4f 	dsb	sy
 800e064:	60fb      	str	r3, [r7, #12]
}
 800e066:	bf00      	nop
 800e068:	bf00      	nop
 800e06a:	e7fd      	b.n	800e068 <vTaskStartScheduler+0xb4>
}
 800e06c:	bf00      	nop
 800e06e:	3718      	adds	r7, #24
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}
 800e074:	08012964 	.word	0x08012964
 800e078:	0800e9b1 	.word	0x0800e9b1
 800e07c:	200011f0 	.word	0x200011f0
 800e080:	20000cf8 	.word	0x20000cf8
 800e084:	20000298 	.word	0x20000298
 800e088:	200011ec 	.word	0x200011ec
 800e08c:	200011d8 	.word	0x200011d8
 800e090:	200011d0 	.word	0x200011d0

0800e094 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e094:	b480      	push	{r7}
 800e096:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e098:	4b04      	ldr	r3, [pc, #16]	@ (800e0ac <vTaskSuspendAll+0x18>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	3301      	adds	r3, #1
 800e09e:	4a03      	ldr	r2, [pc, #12]	@ (800e0ac <vTaskSuspendAll+0x18>)
 800e0a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e0a2:	bf00      	nop
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0aa:	4770      	bx	lr
 800e0ac:	200011f4 	.word	0x200011f4

0800e0b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b084      	sub	sp, #16
 800e0b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e0be:	4b42      	ldr	r3, [pc, #264]	@ (800e1c8 <xTaskResumeAll+0x118>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d10b      	bne.n	800e0de <xTaskResumeAll+0x2e>
	__asm volatile
 800e0c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ca:	f383 8811 	msr	BASEPRI, r3
 800e0ce:	f3bf 8f6f 	isb	sy
 800e0d2:	f3bf 8f4f 	dsb	sy
 800e0d6:	603b      	str	r3, [r7, #0]
}
 800e0d8:	bf00      	nop
 800e0da:	bf00      	nop
 800e0dc:	e7fd      	b.n	800e0da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e0de:	f001 fe53 	bl	800fd88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e0e2:	4b39      	ldr	r3, [pc, #228]	@ (800e1c8 <xTaskResumeAll+0x118>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	3b01      	subs	r3, #1
 800e0e8:	4a37      	ldr	r2, [pc, #220]	@ (800e1c8 <xTaskResumeAll+0x118>)
 800e0ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e0ec:	4b36      	ldr	r3, [pc, #216]	@ (800e1c8 <xTaskResumeAll+0x118>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d162      	bne.n	800e1ba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e0f4:	4b35      	ldr	r3, [pc, #212]	@ (800e1cc <xTaskResumeAll+0x11c>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d05e      	beq.n	800e1ba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e0fc:	e02f      	b.n	800e15e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0fe:	4b34      	ldr	r3, [pc, #208]	@ (800e1d0 <xTaskResumeAll+0x120>)
 800e100:	68db      	ldr	r3, [r3, #12]
 800e102:	68db      	ldr	r3, [r3, #12]
 800e104:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	3318      	adds	r3, #24
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7fe fb7c 	bl	800c808 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	3304      	adds	r3, #4
 800e114:	4618      	mov	r0, r3
 800e116:	f7fe fb77 	bl	800c808 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e11e:	4b2d      	ldr	r3, [pc, #180]	@ (800e1d4 <xTaskResumeAll+0x124>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	429a      	cmp	r2, r3
 800e124:	d903      	bls.n	800e12e <xTaskResumeAll+0x7e>
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e12a:	4a2a      	ldr	r2, [pc, #168]	@ (800e1d4 <xTaskResumeAll+0x124>)
 800e12c:	6013      	str	r3, [r2, #0]
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e132:	4613      	mov	r3, r2
 800e134:	009b      	lsls	r3, r3, #2
 800e136:	4413      	add	r3, r2
 800e138:	009b      	lsls	r3, r3, #2
 800e13a:	4a27      	ldr	r2, [pc, #156]	@ (800e1d8 <xTaskResumeAll+0x128>)
 800e13c:	441a      	add	r2, r3
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	3304      	adds	r3, #4
 800e142:	4619      	mov	r1, r3
 800e144:	4610      	mov	r0, r2
 800e146:	f7fe fb02 	bl	800c74e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e14e:	4b23      	ldr	r3, [pc, #140]	@ (800e1dc <xTaskResumeAll+0x12c>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e154:	429a      	cmp	r2, r3
 800e156:	d302      	bcc.n	800e15e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e158:	4b21      	ldr	r3, [pc, #132]	@ (800e1e0 <xTaskResumeAll+0x130>)
 800e15a:	2201      	movs	r2, #1
 800e15c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e15e:	4b1c      	ldr	r3, [pc, #112]	@ (800e1d0 <xTaskResumeAll+0x120>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d1cb      	bne.n	800e0fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d001      	beq.n	800e170 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e16c:	f000 fd7a 	bl	800ec64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e170:	4b1c      	ldr	r3, [pc, #112]	@ (800e1e4 <xTaskResumeAll+0x134>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d010      	beq.n	800e19e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e17c:	f000 f91a 	bl	800e3b4 <xTaskIncrementTick>
 800e180:	4603      	mov	r3, r0
 800e182:	2b00      	cmp	r3, #0
 800e184:	d002      	beq.n	800e18c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e186:	4b16      	ldr	r3, [pc, #88]	@ (800e1e0 <xTaskResumeAll+0x130>)
 800e188:	2201      	movs	r2, #1
 800e18a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	3b01      	subs	r3, #1
 800e190:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d1f1      	bne.n	800e17c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e198:	4b12      	ldr	r3, [pc, #72]	@ (800e1e4 <xTaskResumeAll+0x134>)
 800e19a:	2200      	movs	r2, #0
 800e19c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e19e:	4b10      	ldr	r3, [pc, #64]	@ (800e1e0 <xTaskResumeAll+0x130>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d009      	beq.n	800e1ba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e1aa:	4b0f      	ldr	r3, [pc, #60]	@ (800e1e8 <xTaskResumeAll+0x138>)
 800e1ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1b0:	601a      	str	r2, [r3, #0]
 800e1b2:	f3bf 8f4f 	dsb	sy
 800e1b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e1ba:	f001 fe17 	bl	800fdec <vPortExitCritical>

	return xAlreadyYielded;
 800e1be:	68bb      	ldr	r3, [r7, #8]
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	3710      	adds	r7, #16
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}
 800e1c8:	200011f4 	.word	0x200011f4
 800e1cc:	200011cc 	.word	0x200011cc
 800e1d0:	2000118c 	.word	0x2000118c
 800e1d4:	200011d4 	.word	0x200011d4
 800e1d8:	20000cfc 	.word	0x20000cfc
 800e1dc:	20000cf8 	.word	0x20000cf8
 800e1e0:	200011e0 	.word	0x200011e0
 800e1e4:	200011dc 	.word	0x200011dc
 800e1e8:	e000ed04 	.word	0xe000ed04

0800e1ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b083      	sub	sp, #12
 800e1f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e1f2:	4b05      	ldr	r3, [pc, #20]	@ (800e208 <xTaskGetTickCount+0x1c>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e1f8:	687b      	ldr	r3, [r7, #4]
}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	370c      	adds	r7, #12
 800e1fe:	46bd      	mov	sp, r7
 800e200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e204:	4770      	bx	lr
 800e206:	bf00      	nop
 800e208:	200011d0 	.word	0x200011d0

0800e20c <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800e20c:	b480      	push	{r7}
 800e20e:	b08b      	sub	sp, #44	@ 0x2c
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
 800e214:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800e216:	2300      	movs	r3, #0
 800e218:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d05b      	beq.n	800e2da <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	61bb      	str	r3, [r7, #24]
 800e226:	69bb      	ldr	r3, [r7, #24]
 800e228:	685b      	ldr	r3, [r3, #4]
 800e22a:	685a      	ldr	r2, [r3, #4]
 800e22c:	69bb      	ldr	r3, [r7, #24]
 800e22e:	605a      	str	r2, [r3, #4]
 800e230:	69bb      	ldr	r3, [r7, #24]
 800e232:	685a      	ldr	r2, [r3, #4]
 800e234:	69bb      	ldr	r3, [r7, #24]
 800e236:	3308      	adds	r3, #8
 800e238:	429a      	cmp	r2, r3
 800e23a:	d104      	bne.n	800e246 <prvSearchForNameWithinSingleList+0x3a>
 800e23c:	69bb      	ldr	r3, [r7, #24]
 800e23e:	685b      	ldr	r3, [r3, #4]
 800e240:	685a      	ldr	r2, [r3, #4]
 800e242:	69bb      	ldr	r3, [r7, #24]
 800e244:	605a      	str	r2, [r3, #4]
 800e246:	69bb      	ldr	r3, [r7, #24]
 800e248:	685b      	ldr	r3, [r3, #4]
 800e24a:	68db      	ldr	r3, [r3, #12]
 800e24c:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	613b      	str	r3, [r7, #16]
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	685b      	ldr	r3, [r3, #4]
 800e256:	685a      	ldr	r2, [r3, #4]
 800e258:	693b      	ldr	r3, [r7, #16]
 800e25a:	605a      	str	r2, [r3, #4]
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	685a      	ldr	r2, [r3, #4]
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	3308      	adds	r3, #8
 800e264:	429a      	cmp	r2, r3
 800e266:	d104      	bne.n	800e272 <prvSearchForNameWithinSingleList+0x66>
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	685b      	ldr	r3, [r3, #4]
 800e26c:	685a      	ldr	r2, [r3, #4]
 800e26e:	693b      	ldr	r3, [r7, #16]
 800e270:	605a      	str	r2, [r3, #4]
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	68db      	ldr	r3, [r3, #12]
 800e278:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800e27a:	2300      	movs	r3, #0
 800e27c:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e27e:	2300      	movs	r3, #0
 800e280:	623b      	str	r3, [r7, #32]
 800e282:	e01c      	b.n	800e2be <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800e284:	68fa      	ldr	r2, [r7, #12]
 800e286:	6a3b      	ldr	r3, [r7, #32]
 800e288:	4413      	add	r3, r2
 800e28a:	3334      	adds	r3, #52	@ 0x34
 800e28c:	781b      	ldrb	r3, [r3, #0]
 800e28e:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800e290:	683a      	ldr	r2, [r7, #0]
 800e292:	6a3b      	ldr	r3, [r7, #32]
 800e294:	4413      	add	r3, r2
 800e296:	781b      	ldrb	r3, [r3, #0]
 800e298:	7afa      	ldrb	r2, [r7, #11]
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d002      	beq.n	800e2a4 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800e29e:	2301      	movs	r3, #1
 800e2a0:	61fb      	str	r3, [r7, #28]
 800e2a2:	e006      	b.n	800e2b2 <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800e2a4:	7afb      	ldrb	r3, [r7, #11]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d103      	bne.n	800e2b2 <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800e2b2:	69fb      	ldr	r3, [r7, #28]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d106      	bne.n	800e2c6 <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e2b8:	6a3b      	ldr	r3, [r7, #32]
 800e2ba:	3301      	adds	r3, #1
 800e2bc:	623b      	str	r3, [r7, #32]
 800e2be:	6a3b      	ldr	r3, [r7, #32]
 800e2c0:	2b0f      	cmp	r3, #15
 800e2c2:	d9df      	bls.n	800e284 <prvSearchForNameWithinSingleList+0x78>
 800e2c4:	e000      	b.n	800e2c8 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800e2c6:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800e2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d104      	bne.n	800e2d8 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800e2ce:	68fa      	ldr	r2, [r7, #12]
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d1bb      	bne.n	800e24e <prvSearchForNameWithinSingleList+0x42>
 800e2d6:	e000      	b.n	800e2da <prvSearchForNameWithinSingleList+0xce>
					break;
 800e2d8:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800e2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	372c      	adds	r7, #44	@ 0x2c
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e6:	4770      	bx	lr

0800e2e8 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b086      	sub	sp, #24
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800e2f0:	2338      	movs	r3, #56	@ 0x38
 800e2f2:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f7f1 ff6b 	bl	80001d0 <strlen>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	2b0f      	cmp	r3, #15
 800e2fe:	d90b      	bls.n	800e318 <xTaskGetHandle+0x30>
	__asm volatile
 800e300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e304:	f383 8811 	msr	BASEPRI, r3
 800e308:	f3bf 8f6f 	isb	sy
 800e30c:	f3bf 8f4f 	dsb	sy
 800e310:	60fb      	str	r3, [r7, #12]
}
 800e312:	bf00      	nop
 800e314:	bf00      	nop
 800e316:	e7fd      	b.n	800e314 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800e318:	f7ff febc 	bl	800e094 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	3b01      	subs	r3, #1
 800e320:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800e322:	697a      	ldr	r2, [r7, #20]
 800e324:	4613      	mov	r3, r2
 800e326:	009b      	lsls	r3, r3, #2
 800e328:	4413      	add	r3, r2
 800e32a:	009b      	lsls	r3, r3, #2
 800e32c:	4a1c      	ldr	r2, [pc, #112]	@ (800e3a0 <xTaskGetHandle+0xb8>)
 800e32e:	4413      	add	r3, r2
 800e330:	6879      	ldr	r1, [r7, #4]
 800e332:	4618      	mov	r0, r3
 800e334:	f7ff ff6a 	bl	800e20c <prvSearchForNameWithinSingleList>
 800e338:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800e33a:	693b      	ldr	r3, [r7, #16]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d103      	bne.n	800e348 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e340:	697b      	ldr	r3, [r7, #20]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d1ea      	bne.n	800e31c <xTaskGetHandle+0x34>
 800e346:	e000      	b.n	800e34a <xTaskGetHandle+0x62>
					break;
 800e348:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800e34a:	693b      	ldr	r3, [r7, #16]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d106      	bne.n	800e35e <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800e350:	4b14      	ldr	r3, [pc, #80]	@ (800e3a4 <xTaskGetHandle+0xbc>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	6879      	ldr	r1, [r7, #4]
 800e356:	4618      	mov	r0, r3
 800e358:	f7ff ff58 	bl	800e20c <prvSearchForNameWithinSingleList>
 800e35c:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800e35e:	693b      	ldr	r3, [r7, #16]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d106      	bne.n	800e372 <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800e364:	4b10      	ldr	r3, [pc, #64]	@ (800e3a8 <xTaskGetHandle+0xc0>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	6879      	ldr	r1, [r7, #4]
 800e36a:	4618      	mov	r0, r3
 800e36c:	f7ff ff4e 	bl	800e20c <prvSearchForNameWithinSingleList>
 800e370:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d104      	bne.n	800e382 <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800e378:	6879      	ldr	r1, [r7, #4]
 800e37a:	480c      	ldr	r0, [pc, #48]	@ (800e3ac <xTaskGetHandle+0xc4>)
 800e37c:	f7ff ff46 	bl	800e20c <prvSearchForNameWithinSingleList>
 800e380:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d104      	bne.n	800e392 <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800e388:	6879      	ldr	r1, [r7, #4]
 800e38a:	4809      	ldr	r0, [pc, #36]	@ (800e3b0 <xTaskGetHandle+0xc8>)
 800e38c:	f7ff ff3e 	bl	800e20c <prvSearchForNameWithinSingleList>
 800e390:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800e392:	f7ff fe8d 	bl	800e0b0 <xTaskResumeAll>

		return pxTCB;
 800e396:	693b      	ldr	r3, [r7, #16]
	}
 800e398:	4618      	mov	r0, r3
 800e39a:	3718      	adds	r7, #24
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}
 800e3a0:	20000cfc 	.word	0x20000cfc
 800e3a4:	20001184 	.word	0x20001184
 800e3a8:	20001188 	.word	0x20001188
 800e3ac:	200011b8 	.word	0x200011b8
 800e3b0:	200011a0 	.word	0x200011a0

0800e3b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b086      	sub	sp, #24
 800e3b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3be:	4b4f      	ldr	r3, [pc, #316]	@ (800e4fc <xTaskIncrementTick+0x148>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	f040 8090 	bne.w	800e4e8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e3c8:	4b4d      	ldr	r3, [pc, #308]	@ (800e500 <xTaskIncrementTick+0x14c>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e3d0:	4a4b      	ldr	r2, [pc, #300]	@ (800e500 <xTaskIncrementTick+0x14c>)
 800e3d2:	693b      	ldr	r3, [r7, #16]
 800e3d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e3d6:	693b      	ldr	r3, [r7, #16]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d121      	bne.n	800e420 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e3dc:	4b49      	ldr	r3, [pc, #292]	@ (800e504 <xTaskIncrementTick+0x150>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d00b      	beq.n	800e3fe <xTaskIncrementTick+0x4a>
	__asm volatile
 800e3e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3ea:	f383 8811 	msr	BASEPRI, r3
 800e3ee:	f3bf 8f6f 	isb	sy
 800e3f2:	f3bf 8f4f 	dsb	sy
 800e3f6:	603b      	str	r3, [r7, #0]
}
 800e3f8:	bf00      	nop
 800e3fa:	bf00      	nop
 800e3fc:	e7fd      	b.n	800e3fa <xTaskIncrementTick+0x46>
 800e3fe:	4b41      	ldr	r3, [pc, #260]	@ (800e504 <xTaskIncrementTick+0x150>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	60fb      	str	r3, [r7, #12]
 800e404:	4b40      	ldr	r3, [pc, #256]	@ (800e508 <xTaskIncrementTick+0x154>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	4a3e      	ldr	r2, [pc, #248]	@ (800e504 <xTaskIncrementTick+0x150>)
 800e40a:	6013      	str	r3, [r2, #0]
 800e40c:	4a3e      	ldr	r2, [pc, #248]	@ (800e508 <xTaskIncrementTick+0x154>)
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	6013      	str	r3, [r2, #0]
 800e412:	4b3e      	ldr	r3, [pc, #248]	@ (800e50c <xTaskIncrementTick+0x158>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	3301      	adds	r3, #1
 800e418:	4a3c      	ldr	r2, [pc, #240]	@ (800e50c <xTaskIncrementTick+0x158>)
 800e41a:	6013      	str	r3, [r2, #0]
 800e41c:	f000 fc22 	bl	800ec64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e420:	4b3b      	ldr	r3, [pc, #236]	@ (800e510 <xTaskIncrementTick+0x15c>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	693a      	ldr	r2, [r7, #16]
 800e426:	429a      	cmp	r2, r3
 800e428:	d349      	bcc.n	800e4be <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e42a:	4b36      	ldr	r3, [pc, #216]	@ (800e504 <xTaskIncrementTick+0x150>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d104      	bne.n	800e43e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e434:	4b36      	ldr	r3, [pc, #216]	@ (800e510 <xTaskIncrementTick+0x15c>)
 800e436:	f04f 32ff 	mov.w	r2, #4294967295
 800e43a:	601a      	str	r2, [r3, #0]
					break;
 800e43c:	e03f      	b.n	800e4be <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e43e:	4b31      	ldr	r3, [pc, #196]	@ (800e504 <xTaskIncrementTick+0x150>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	68db      	ldr	r3, [r3, #12]
 800e444:	68db      	ldr	r3, [r3, #12]
 800e446:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	685b      	ldr	r3, [r3, #4]
 800e44c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e44e:	693a      	ldr	r2, [r7, #16]
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	429a      	cmp	r2, r3
 800e454:	d203      	bcs.n	800e45e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e456:	4a2e      	ldr	r2, [pc, #184]	@ (800e510 <xTaskIncrementTick+0x15c>)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e45c:	e02f      	b.n	800e4be <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	3304      	adds	r3, #4
 800e462:	4618      	mov	r0, r3
 800e464:	f7fe f9d0 	bl	800c808 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d004      	beq.n	800e47a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	3318      	adds	r3, #24
 800e474:	4618      	mov	r0, r3
 800e476:	f7fe f9c7 	bl	800c808 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e47e:	4b25      	ldr	r3, [pc, #148]	@ (800e514 <xTaskIncrementTick+0x160>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	429a      	cmp	r2, r3
 800e484:	d903      	bls.n	800e48e <xTaskIncrementTick+0xda>
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e48a:	4a22      	ldr	r2, [pc, #136]	@ (800e514 <xTaskIncrementTick+0x160>)
 800e48c:	6013      	str	r3, [r2, #0]
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e492:	4613      	mov	r3, r2
 800e494:	009b      	lsls	r3, r3, #2
 800e496:	4413      	add	r3, r2
 800e498:	009b      	lsls	r3, r3, #2
 800e49a:	4a1f      	ldr	r2, [pc, #124]	@ (800e518 <xTaskIncrementTick+0x164>)
 800e49c:	441a      	add	r2, r3
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	3304      	adds	r3, #4
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	4610      	mov	r0, r2
 800e4a6:	f7fe f952 	bl	800c74e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4ae:	4b1b      	ldr	r3, [pc, #108]	@ (800e51c <xTaskIncrementTick+0x168>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d3b8      	bcc.n	800e42a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4bc:	e7b5      	b.n	800e42a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e4be:	4b17      	ldr	r3, [pc, #92]	@ (800e51c <xTaskIncrementTick+0x168>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4c4:	4914      	ldr	r1, [pc, #80]	@ (800e518 <xTaskIncrementTick+0x164>)
 800e4c6:	4613      	mov	r3, r2
 800e4c8:	009b      	lsls	r3, r3, #2
 800e4ca:	4413      	add	r3, r2
 800e4cc:	009b      	lsls	r3, r3, #2
 800e4ce:	440b      	add	r3, r1
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	2b01      	cmp	r3, #1
 800e4d4:	d901      	bls.n	800e4da <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e4da:	4b11      	ldr	r3, [pc, #68]	@ (800e520 <xTaskIncrementTick+0x16c>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d007      	beq.n	800e4f2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	617b      	str	r3, [r7, #20]
 800e4e6:	e004      	b.n	800e4f2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e4e8:	4b0e      	ldr	r3, [pc, #56]	@ (800e524 <xTaskIncrementTick+0x170>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	3301      	adds	r3, #1
 800e4ee:	4a0d      	ldr	r2, [pc, #52]	@ (800e524 <xTaskIncrementTick+0x170>)
 800e4f0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e4f2:	697b      	ldr	r3, [r7, #20]
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3718      	adds	r7, #24
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}
 800e4fc:	200011f4 	.word	0x200011f4
 800e500:	200011d0 	.word	0x200011d0
 800e504:	20001184 	.word	0x20001184
 800e508:	20001188 	.word	0x20001188
 800e50c:	200011e4 	.word	0x200011e4
 800e510:	200011ec 	.word	0x200011ec
 800e514:	200011d4 	.word	0x200011d4
 800e518:	20000cfc 	.word	0x20000cfc
 800e51c:	20000cf8 	.word	0x20000cf8
 800e520:	200011e0 	.word	0x200011e0
 800e524:	200011dc 	.word	0x200011dc

0800e528 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e528:	b480      	push	{r7}
 800e52a:	b085      	sub	sp, #20
 800e52c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e52e:	4b2b      	ldr	r3, [pc, #172]	@ (800e5dc <vTaskSwitchContext+0xb4>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d003      	beq.n	800e53e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e536:	4b2a      	ldr	r3, [pc, #168]	@ (800e5e0 <vTaskSwitchContext+0xb8>)
 800e538:	2201      	movs	r2, #1
 800e53a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e53c:	e047      	b.n	800e5ce <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e53e:	4b28      	ldr	r3, [pc, #160]	@ (800e5e0 <vTaskSwitchContext+0xb8>)
 800e540:	2200      	movs	r2, #0
 800e542:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e544:	4b27      	ldr	r3, [pc, #156]	@ (800e5e4 <vTaskSwitchContext+0xbc>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	60fb      	str	r3, [r7, #12]
 800e54a:	e011      	b.n	800e570 <vTaskSwitchContext+0x48>
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d10b      	bne.n	800e56a <vTaskSwitchContext+0x42>
	__asm volatile
 800e552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e556:	f383 8811 	msr	BASEPRI, r3
 800e55a:	f3bf 8f6f 	isb	sy
 800e55e:	f3bf 8f4f 	dsb	sy
 800e562:	607b      	str	r3, [r7, #4]
}
 800e564:	bf00      	nop
 800e566:	bf00      	nop
 800e568:	e7fd      	b.n	800e566 <vTaskSwitchContext+0x3e>
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	3b01      	subs	r3, #1
 800e56e:	60fb      	str	r3, [r7, #12]
 800e570:	491d      	ldr	r1, [pc, #116]	@ (800e5e8 <vTaskSwitchContext+0xc0>)
 800e572:	68fa      	ldr	r2, [r7, #12]
 800e574:	4613      	mov	r3, r2
 800e576:	009b      	lsls	r3, r3, #2
 800e578:	4413      	add	r3, r2
 800e57a:	009b      	lsls	r3, r3, #2
 800e57c:	440b      	add	r3, r1
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d0e3      	beq.n	800e54c <vTaskSwitchContext+0x24>
 800e584:	68fa      	ldr	r2, [r7, #12]
 800e586:	4613      	mov	r3, r2
 800e588:	009b      	lsls	r3, r3, #2
 800e58a:	4413      	add	r3, r2
 800e58c:	009b      	lsls	r3, r3, #2
 800e58e:	4a16      	ldr	r2, [pc, #88]	@ (800e5e8 <vTaskSwitchContext+0xc0>)
 800e590:	4413      	add	r3, r2
 800e592:	60bb      	str	r3, [r7, #8]
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	685b      	ldr	r3, [r3, #4]
 800e598:	685a      	ldr	r2, [r3, #4]
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	605a      	str	r2, [r3, #4]
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	685a      	ldr	r2, [r3, #4]
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	3308      	adds	r3, #8
 800e5a6:	429a      	cmp	r2, r3
 800e5a8:	d104      	bne.n	800e5b4 <vTaskSwitchContext+0x8c>
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	685b      	ldr	r3, [r3, #4]
 800e5ae:	685a      	ldr	r2, [r3, #4]
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	605a      	str	r2, [r3, #4]
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	685b      	ldr	r3, [r3, #4]
 800e5b8:	68db      	ldr	r3, [r3, #12]
 800e5ba:	4a0c      	ldr	r2, [pc, #48]	@ (800e5ec <vTaskSwitchContext+0xc4>)
 800e5bc:	6013      	str	r3, [r2, #0]
 800e5be:	4a09      	ldr	r2, [pc, #36]	@ (800e5e4 <vTaskSwitchContext+0xbc>)
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e5c4:	4b09      	ldr	r3, [pc, #36]	@ (800e5ec <vTaskSwitchContext+0xc4>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	3354      	adds	r3, #84	@ 0x54
 800e5ca:	4a09      	ldr	r2, [pc, #36]	@ (800e5f0 <vTaskSwitchContext+0xc8>)
 800e5cc:	6013      	str	r3, [r2, #0]
}
 800e5ce:	bf00      	nop
 800e5d0:	3714      	adds	r7, #20
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d8:	4770      	bx	lr
 800e5da:	bf00      	nop
 800e5dc:	200011f4 	.word	0x200011f4
 800e5e0:	200011e0 	.word	0x200011e0
 800e5e4:	200011d4 	.word	0x200011d4
 800e5e8:	20000cfc 	.word	0x20000cfc
 800e5ec:	20000cf8 	.word	0x20000cf8
 800e5f0:	20000298 	.word	0x20000298

0800e5f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b084      	sub	sp, #16
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d10b      	bne.n	800e61c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e608:	f383 8811 	msr	BASEPRI, r3
 800e60c:	f3bf 8f6f 	isb	sy
 800e610:	f3bf 8f4f 	dsb	sy
 800e614:	60fb      	str	r3, [r7, #12]
}
 800e616:	bf00      	nop
 800e618:	bf00      	nop
 800e61a:	e7fd      	b.n	800e618 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e61c:	4b07      	ldr	r3, [pc, #28]	@ (800e63c <vTaskPlaceOnEventList+0x48>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	3318      	adds	r3, #24
 800e622:	4619      	mov	r1, r3
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f7fe f8b6 	bl	800c796 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e62a:	2101      	movs	r1, #1
 800e62c:	6838      	ldr	r0, [r7, #0]
 800e62e:	f000 fe4d 	bl	800f2cc <prvAddCurrentTaskToDelayedList>
}
 800e632:	bf00      	nop
 800e634:	3710      	adds	r7, #16
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	bf00      	nop
 800e63c:	20000cf8 	.word	0x20000cf8

0800e640 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b086      	sub	sp, #24
 800e644:	af00      	add	r7, sp, #0
 800e646:	60f8      	str	r0, [r7, #12]
 800e648:	60b9      	str	r1, [r7, #8]
 800e64a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d10b      	bne.n	800e66a <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800e652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e656:	f383 8811 	msr	BASEPRI, r3
 800e65a:	f3bf 8f6f 	isb	sy
 800e65e:	f3bf 8f4f 	dsb	sy
 800e662:	617b      	str	r3, [r7, #20]
}
 800e664:	bf00      	nop
 800e666:	bf00      	nop
 800e668:	e7fd      	b.n	800e666 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800e66a:	4b12      	ldr	r3, [pc, #72]	@ (800e6b4 <vTaskPlaceOnUnorderedEventList+0x74>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d10b      	bne.n	800e68a <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800e672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e676:	f383 8811 	msr	BASEPRI, r3
 800e67a:	f3bf 8f6f 	isb	sy
 800e67e:	f3bf 8f4f 	dsb	sy
 800e682:	613b      	str	r3, [r7, #16]
}
 800e684:	bf00      	nop
 800e686:	bf00      	nop
 800e688:	e7fd      	b.n	800e686 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e68a:	4b0b      	ldr	r3, [pc, #44]	@ (800e6b8 <vTaskPlaceOnUnorderedEventList+0x78>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	68ba      	ldr	r2, [r7, #8]
 800e690:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e694:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e696:	4b08      	ldr	r3, [pc, #32]	@ (800e6b8 <vTaskPlaceOnUnorderedEventList+0x78>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	3318      	adds	r3, #24
 800e69c:	4619      	mov	r1, r3
 800e69e:	68f8      	ldr	r0, [r7, #12]
 800e6a0:	f7fe f855 	bl	800c74e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e6a4:	2101      	movs	r1, #1
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f000 fe10 	bl	800f2cc <prvAddCurrentTaskToDelayedList>
}
 800e6ac:	bf00      	nop
 800e6ae:	3718      	adds	r7, #24
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}
 800e6b4:	200011f4 	.word	0x200011f4
 800e6b8:	20000cf8 	.word	0x20000cf8

0800e6bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b086      	sub	sp, #24
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	60f8      	str	r0, [r7, #12]
 800e6c4:	60b9      	str	r1, [r7, #8]
 800e6c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d10b      	bne.n	800e6e6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e6ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6d2:	f383 8811 	msr	BASEPRI, r3
 800e6d6:	f3bf 8f6f 	isb	sy
 800e6da:	f3bf 8f4f 	dsb	sy
 800e6de:	617b      	str	r3, [r7, #20]
}
 800e6e0:	bf00      	nop
 800e6e2:	bf00      	nop
 800e6e4:	e7fd      	b.n	800e6e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e6e6:	4b0a      	ldr	r3, [pc, #40]	@ (800e710 <vTaskPlaceOnEventListRestricted+0x54>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	3318      	adds	r3, #24
 800e6ec:	4619      	mov	r1, r3
 800e6ee:	68f8      	ldr	r0, [r7, #12]
 800e6f0:	f7fe f82d 	bl	800c74e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d002      	beq.n	800e700 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e6fa:	f04f 33ff 	mov.w	r3, #4294967295
 800e6fe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e700:	6879      	ldr	r1, [r7, #4]
 800e702:	68b8      	ldr	r0, [r7, #8]
 800e704:	f000 fde2 	bl	800f2cc <prvAddCurrentTaskToDelayedList>
	}
 800e708:	bf00      	nop
 800e70a:	3718      	adds	r7, #24
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}
 800e710:	20000cf8 	.word	0x20000cf8

0800e714 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b086      	sub	sp, #24
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	68db      	ldr	r3, [r3, #12]
 800e720:	68db      	ldr	r3, [r3, #12]
 800e722:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d10b      	bne.n	800e742 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e72a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e72e:	f383 8811 	msr	BASEPRI, r3
 800e732:	f3bf 8f6f 	isb	sy
 800e736:	f3bf 8f4f 	dsb	sy
 800e73a:	60fb      	str	r3, [r7, #12]
}
 800e73c:	bf00      	nop
 800e73e:	bf00      	nop
 800e740:	e7fd      	b.n	800e73e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e742:	693b      	ldr	r3, [r7, #16]
 800e744:	3318      	adds	r3, #24
 800e746:	4618      	mov	r0, r3
 800e748:	f7fe f85e 	bl	800c808 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e74c:	4b1d      	ldr	r3, [pc, #116]	@ (800e7c4 <xTaskRemoveFromEventList+0xb0>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d11d      	bne.n	800e790 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	3304      	adds	r3, #4
 800e758:	4618      	mov	r0, r3
 800e75a:	f7fe f855 	bl	800c808 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e75e:	693b      	ldr	r3, [r7, #16]
 800e760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e762:	4b19      	ldr	r3, [pc, #100]	@ (800e7c8 <xTaskRemoveFromEventList+0xb4>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	429a      	cmp	r2, r3
 800e768:	d903      	bls.n	800e772 <xTaskRemoveFromEventList+0x5e>
 800e76a:	693b      	ldr	r3, [r7, #16]
 800e76c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e76e:	4a16      	ldr	r2, [pc, #88]	@ (800e7c8 <xTaskRemoveFromEventList+0xb4>)
 800e770:	6013      	str	r3, [r2, #0]
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e776:	4613      	mov	r3, r2
 800e778:	009b      	lsls	r3, r3, #2
 800e77a:	4413      	add	r3, r2
 800e77c:	009b      	lsls	r3, r3, #2
 800e77e:	4a13      	ldr	r2, [pc, #76]	@ (800e7cc <xTaskRemoveFromEventList+0xb8>)
 800e780:	441a      	add	r2, r3
 800e782:	693b      	ldr	r3, [r7, #16]
 800e784:	3304      	adds	r3, #4
 800e786:	4619      	mov	r1, r3
 800e788:	4610      	mov	r0, r2
 800e78a:	f7fd ffe0 	bl	800c74e <vListInsertEnd>
 800e78e:	e005      	b.n	800e79c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	3318      	adds	r3, #24
 800e794:	4619      	mov	r1, r3
 800e796:	480e      	ldr	r0, [pc, #56]	@ (800e7d0 <xTaskRemoveFromEventList+0xbc>)
 800e798:	f7fd ffd9 	bl	800c74e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7a0:	4b0c      	ldr	r3, [pc, #48]	@ (800e7d4 <xTaskRemoveFromEventList+0xc0>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d905      	bls.n	800e7b6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e7aa:	2301      	movs	r3, #1
 800e7ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e7ae:	4b0a      	ldr	r3, [pc, #40]	@ (800e7d8 <xTaskRemoveFromEventList+0xc4>)
 800e7b0:	2201      	movs	r2, #1
 800e7b2:	601a      	str	r2, [r3, #0]
 800e7b4:	e001      	b.n	800e7ba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e7ba:	697b      	ldr	r3, [r7, #20]
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3718      	adds	r7, #24
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}
 800e7c4:	200011f4 	.word	0x200011f4
 800e7c8:	200011d4 	.word	0x200011d4
 800e7cc:	20000cfc 	.word	0x20000cfc
 800e7d0:	2000118c 	.word	0x2000118c
 800e7d4:	20000cf8 	.word	0x20000cf8
 800e7d8:	200011e0 	.word	0x200011e0

0800e7dc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b086      	sub	sp, #24
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800e7e6:	4b2a      	ldr	r3, [pc, #168]	@ (800e890 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d10b      	bne.n	800e806 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800e7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7f2:	f383 8811 	msr	BASEPRI, r3
 800e7f6:	f3bf 8f6f 	isb	sy
 800e7fa:	f3bf 8f4f 	dsb	sy
 800e7fe:	613b      	str	r3, [r7, #16]
}
 800e800:	bf00      	nop
 800e802:	bf00      	nop
 800e804:	e7fd      	b.n	800e802 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	68db      	ldr	r3, [r3, #12]
 800e814:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d10b      	bne.n	800e834 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800e81c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e820:	f383 8811 	msr	BASEPRI, r3
 800e824:	f3bf 8f6f 	isb	sy
 800e828:	f3bf 8f4f 	dsb	sy
 800e82c:	60fb      	str	r3, [r7, #12]
}
 800e82e:	bf00      	nop
 800e830:	bf00      	nop
 800e832:	e7fd      	b.n	800e830 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f7fd ffe7 	bl	800c808 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	3304      	adds	r3, #4
 800e83e:	4618      	mov	r0, r3
 800e840:	f7fd ffe2 	bl	800c808 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e848:	4b12      	ldr	r3, [pc, #72]	@ (800e894 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	429a      	cmp	r2, r3
 800e84e:	d903      	bls.n	800e858 <vTaskRemoveFromUnorderedEventList+0x7c>
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e854:	4a0f      	ldr	r2, [pc, #60]	@ (800e894 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e856:	6013      	str	r3, [r2, #0]
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e85c:	4613      	mov	r3, r2
 800e85e:	009b      	lsls	r3, r3, #2
 800e860:	4413      	add	r3, r2
 800e862:	009b      	lsls	r3, r3, #2
 800e864:	4a0c      	ldr	r2, [pc, #48]	@ (800e898 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800e866:	441a      	add	r2, r3
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	3304      	adds	r3, #4
 800e86c:	4619      	mov	r1, r3
 800e86e:	4610      	mov	r0, r2
 800e870:	f7fd ff6d 	bl	800c74e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e878:	4b08      	ldr	r3, [pc, #32]	@ (800e89c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e87e:	429a      	cmp	r2, r3
 800e880:	d902      	bls.n	800e888 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800e882:	4b07      	ldr	r3, [pc, #28]	@ (800e8a0 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800e884:	2201      	movs	r2, #1
 800e886:	601a      	str	r2, [r3, #0]
	}
}
 800e888:	bf00      	nop
 800e88a:	3718      	adds	r7, #24
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}
 800e890:	200011f4 	.word	0x200011f4
 800e894:	200011d4 	.word	0x200011d4
 800e898:	20000cfc 	.word	0x20000cfc
 800e89c:	20000cf8 	.word	0x20000cf8
 800e8a0:	200011e0 	.word	0x200011e0

0800e8a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b083      	sub	sp, #12
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e8ac:	4b06      	ldr	r3, [pc, #24]	@ (800e8c8 <vTaskInternalSetTimeOutState+0x24>)
 800e8ae:	681a      	ldr	r2, [r3, #0]
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e8b4:	4b05      	ldr	r3, [pc, #20]	@ (800e8cc <vTaskInternalSetTimeOutState+0x28>)
 800e8b6:	681a      	ldr	r2, [r3, #0]
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	605a      	str	r2, [r3, #4]
}
 800e8bc:	bf00      	nop
 800e8be:	370c      	adds	r7, #12
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c6:	4770      	bx	lr
 800e8c8:	200011e4 	.word	0x200011e4
 800e8cc:	200011d0 	.word	0x200011d0

0800e8d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b088      	sub	sp, #32
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
 800e8d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d10b      	bne.n	800e8f8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e8e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8e4:	f383 8811 	msr	BASEPRI, r3
 800e8e8:	f3bf 8f6f 	isb	sy
 800e8ec:	f3bf 8f4f 	dsb	sy
 800e8f0:	613b      	str	r3, [r7, #16]
}
 800e8f2:	bf00      	nop
 800e8f4:	bf00      	nop
 800e8f6:	e7fd      	b.n	800e8f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d10b      	bne.n	800e916 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e902:	f383 8811 	msr	BASEPRI, r3
 800e906:	f3bf 8f6f 	isb	sy
 800e90a:	f3bf 8f4f 	dsb	sy
 800e90e:	60fb      	str	r3, [r7, #12]
}
 800e910:	bf00      	nop
 800e912:	bf00      	nop
 800e914:	e7fd      	b.n	800e912 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e916:	f001 fa37 	bl	800fd88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e91a:	4b1d      	ldr	r3, [pc, #116]	@ (800e990 <xTaskCheckForTimeOut+0xc0>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	685b      	ldr	r3, [r3, #4]
 800e924:	69ba      	ldr	r2, [r7, #24]
 800e926:	1ad3      	subs	r3, r2, r3
 800e928:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e932:	d102      	bne.n	800e93a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e934:	2300      	movs	r3, #0
 800e936:	61fb      	str	r3, [r7, #28]
 800e938:	e023      	b.n	800e982 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681a      	ldr	r2, [r3, #0]
 800e93e:	4b15      	ldr	r3, [pc, #84]	@ (800e994 <xTaskCheckForTimeOut+0xc4>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	429a      	cmp	r2, r3
 800e944:	d007      	beq.n	800e956 <xTaskCheckForTimeOut+0x86>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	685b      	ldr	r3, [r3, #4]
 800e94a:	69ba      	ldr	r2, [r7, #24]
 800e94c:	429a      	cmp	r2, r3
 800e94e:	d302      	bcc.n	800e956 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e950:	2301      	movs	r3, #1
 800e952:	61fb      	str	r3, [r7, #28]
 800e954:	e015      	b.n	800e982 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	697a      	ldr	r2, [r7, #20]
 800e95c:	429a      	cmp	r2, r3
 800e95e:	d20b      	bcs.n	800e978 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	681a      	ldr	r2, [r3, #0]
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	1ad2      	subs	r2, r2, r3
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f7ff ff99 	bl	800e8a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e972:	2300      	movs	r3, #0
 800e974:	61fb      	str	r3, [r7, #28]
 800e976:	e004      	b.n	800e982 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	2200      	movs	r2, #0
 800e97c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e97e:	2301      	movs	r3, #1
 800e980:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e982:	f001 fa33 	bl	800fdec <vPortExitCritical>

	return xReturn;
 800e986:	69fb      	ldr	r3, [r7, #28]
}
 800e988:	4618      	mov	r0, r3
 800e98a:	3720      	adds	r7, #32
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}
 800e990:	200011d0 	.word	0x200011d0
 800e994:	200011e4 	.word	0x200011e4

0800e998 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e998:	b480      	push	{r7}
 800e99a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e99c:	4b03      	ldr	r3, [pc, #12]	@ (800e9ac <vTaskMissedYield+0x14>)
 800e99e:	2201      	movs	r2, #1
 800e9a0:	601a      	str	r2, [r3, #0]
}
 800e9a2:	bf00      	nop
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9aa:	4770      	bx	lr
 800e9ac:	200011e0 	.word	0x200011e0

0800e9b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b082      	sub	sp, #8
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e9b8:	f000 f852 	bl	800ea60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e9bc:	4b06      	ldr	r3, [pc, #24]	@ (800e9d8 <prvIdleTask+0x28>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	2b01      	cmp	r3, #1
 800e9c2:	d9f9      	bls.n	800e9b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e9c4:	4b05      	ldr	r3, [pc, #20]	@ (800e9dc <prvIdleTask+0x2c>)
 800e9c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9ca:	601a      	str	r2, [r3, #0]
 800e9cc:	f3bf 8f4f 	dsb	sy
 800e9d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e9d4:	e7f0      	b.n	800e9b8 <prvIdleTask+0x8>
 800e9d6:	bf00      	nop
 800e9d8:	20000cfc 	.word	0x20000cfc
 800e9dc:	e000ed04 	.word	0xe000ed04

0800e9e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b082      	sub	sp, #8
 800e9e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	607b      	str	r3, [r7, #4]
 800e9ea:	e00c      	b.n	800ea06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e9ec:	687a      	ldr	r2, [r7, #4]
 800e9ee:	4613      	mov	r3, r2
 800e9f0:	009b      	lsls	r3, r3, #2
 800e9f2:	4413      	add	r3, r2
 800e9f4:	009b      	lsls	r3, r3, #2
 800e9f6:	4a12      	ldr	r2, [pc, #72]	@ (800ea40 <prvInitialiseTaskLists+0x60>)
 800e9f8:	4413      	add	r3, r2
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f7fd fe7a 	bl	800c6f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	3301      	adds	r3, #1
 800ea04:	607b      	str	r3, [r7, #4]
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2b37      	cmp	r3, #55	@ 0x37
 800ea0a:	d9ef      	bls.n	800e9ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ea0c:	480d      	ldr	r0, [pc, #52]	@ (800ea44 <prvInitialiseTaskLists+0x64>)
 800ea0e:	f7fd fe71 	bl	800c6f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ea12:	480d      	ldr	r0, [pc, #52]	@ (800ea48 <prvInitialiseTaskLists+0x68>)
 800ea14:	f7fd fe6e 	bl	800c6f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ea18:	480c      	ldr	r0, [pc, #48]	@ (800ea4c <prvInitialiseTaskLists+0x6c>)
 800ea1a:	f7fd fe6b 	bl	800c6f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ea1e:	480c      	ldr	r0, [pc, #48]	@ (800ea50 <prvInitialiseTaskLists+0x70>)
 800ea20:	f7fd fe68 	bl	800c6f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ea24:	480b      	ldr	r0, [pc, #44]	@ (800ea54 <prvInitialiseTaskLists+0x74>)
 800ea26:	f7fd fe65 	bl	800c6f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ea2a:	4b0b      	ldr	r3, [pc, #44]	@ (800ea58 <prvInitialiseTaskLists+0x78>)
 800ea2c:	4a05      	ldr	r2, [pc, #20]	@ (800ea44 <prvInitialiseTaskLists+0x64>)
 800ea2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ea30:	4b0a      	ldr	r3, [pc, #40]	@ (800ea5c <prvInitialiseTaskLists+0x7c>)
 800ea32:	4a05      	ldr	r2, [pc, #20]	@ (800ea48 <prvInitialiseTaskLists+0x68>)
 800ea34:	601a      	str	r2, [r3, #0]
}
 800ea36:	bf00      	nop
 800ea38:	3708      	adds	r7, #8
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
 800ea3e:	bf00      	nop
 800ea40:	20000cfc 	.word	0x20000cfc
 800ea44:	2000115c 	.word	0x2000115c
 800ea48:	20001170 	.word	0x20001170
 800ea4c:	2000118c 	.word	0x2000118c
 800ea50:	200011a0 	.word	0x200011a0
 800ea54:	200011b8 	.word	0x200011b8
 800ea58:	20001184 	.word	0x20001184
 800ea5c:	20001188 	.word	0x20001188

0800ea60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b082      	sub	sp, #8
 800ea64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea66:	e019      	b.n	800ea9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ea68:	f001 f98e 	bl	800fd88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea6c:	4b10      	ldr	r3, [pc, #64]	@ (800eab0 <prvCheckTasksWaitingTermination+0x50>)
 800ea6e:	68db      	ldr	r3, [r3, #12]
 800ea70:	68db      	ldr	r3, [r3, #12]
 800ea72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	3304      	adds	r3, #4
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7fd fec5 	bl	800c808 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ea7e:	4b0d      	ldr	r3, [pc, #52]	@ (800eab4 <prvCheckTasksWaitingTermination+0x54>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	3b01      	subs	r3, #1
 800ea84:	4a0b      	ldr	r2, [pc, #44]	@ (800eab4 <prvCheckTasksWaitingTermination+0x54>)
 800ea86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ea88:	4b0b      	ldr	r3, [pc, #44]	@ (800eab8 <prvCheckTasksWaitingTermination+0x58>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	3b01      	subs	r3, #1
 800ea8e:	4a0a      	ldr	r2, [pc, #40]	@ (800eab8 <prvCheckTasksWaitingTermination+0x58>)
 800ea90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ea92:	f001 f9ab 	bl	800fdec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ea96:	6878      	ldr	r0, [r7, #4]
 800ea98:	f000 f8ae 	bl	800ebf8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea9c:	4b06      	ldr	r3, [pc, #24]	@ (800eab8 <prvCheckTasksWaitingTermination+0x58>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d1e1      	bne.n	800ea68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eaa4:	bf00      	nop
 800eaa6:	bf00      	nop
 800eaa8:	3708      	adds	r7, #8
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}
 800eaae:	bf00      	nop
 800eab0:	200011a0 	.word	0x200011a0
 800eab4:	200011cc 	.word	0x200011cc
 800eab8:	200011b4 	.word	0x200011b4

0800eabc <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b086      	sub	sp, #24
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	60f8      	str	r0, [r7, #12]
 800eac4:	60b9      	str	r1, [r7, #8]
 800eac6:	607a      	str	r2, [r7, #4]
 800eac8:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d102      	bne.n	800ead6 <vTaskGetInfo+0x1a>
 800ead0:	4b2c      	ldr	r3, [pc, #176]	@ (800eb84 <vTaskGetInfo+0xc8>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	e000      	b.n	800ead8 <vTaskGetInfo+0x1c>
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	697a      	ldr	r2, [r7, #20]
 800eade:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800eb10:	78fb      	ldrb	r3, [r7, #3]
 800eb12:	2b05      	cmp	r3, #5
 800eb14:	d01a      	beq.n	800eb4c <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800eb16:	4b1b      	ldr	r3, [pc, #108]	@ (800eb84 <vTaskGetInfo+0xc8>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	697a      	ldr	r2, [r7, #20]
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	d103      	bne.n	800eb28 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	2200      	movs	r2, #0
 800eb24:	731a      	strb	r2, [r3, #12]
 800eb26:	e018      	b.n	800eb5a <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	78fa      	ldrb	r2, [r7, #3]
 800eb2c:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800eb2e:	78fb      	ldrb	r3, [r7, #3]
 800eb30:	2b03      	cmp	r3, #3
 800eb32:	d112      	bne.n	800eb5a <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800eb34:	f7ff faae 	bl	800e094 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d002      	beq.n	800eb46 <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	2202      	movs	r2, #2
 800eb44:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800eb46:	f7ff fab3 	bl	800e0b0 <xTaskResumeAll>
 800eb4a:	e006      	b.n	800eb5a <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800eb4c:	6978      	ldr	r0, [r7, #20]
 800eb4e:	f7ff f823 	bl	800db98 <eTaskGetState>
 800eb52:	4603      	mov	r3, r0
 800eb54:	461a      	mov	r2, r3
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d009      	beq.n	800eb74 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb64:	4618      	mov	r0, r3
 800eb66:	f000 f80f 	bl	800eb88 <prvTaskCheckFreeStackSpace>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	461a      	mov	r2, r3
 800eb6e:	68bb      	ldr	r3, [r7, #8]
 800eb70:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800eb72:	e002      	b.n	800eb7a <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	2200      	movs	r2, #0
 800eb78:	841a      	strh	r2, [r3, #32]
	}
 800eb7a:	bf00      	nop
 800eb7c:	3718      	adds	r7, #24
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	bf00      	nop
 800eb84:	20000cf8 	.word	0x20000cf8

0800eb88 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800eb88:	b480      	push	{r7}
 800eb8a:	b085      	sub	sp, #20
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800eb90:	2300      	movs	r3, #0
 800eb92:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800eb94:	e005      	b.n	800eba2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	3301      	adds	r3, #1
 800eb9a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	3301      	adds	r3, #1
 800eba0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	781b      	ldrb	r3, [r3, #0]
 800eba6:	2ba5      	cmp	r3, #165	@ 0xa5
 800eba8:	d0f5      	beq.n	800eb96 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	089b      	lsrs	r3, r3, #2
 800ebae:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	b29b      	uxth	r3, r3
	}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	3714      	adds	r7, #20
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbe:	4770      	bx	lr

0800ebc0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b086      	sub	sp, #24
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d102      	bne.n	800ebd4 <uxTaskGetStackHighWaterMark+0x14>
 800ebce:	4b09      	ldr	r3, [pc, #36]	@ (800ebf4 <uxTaskGetStackHighWaterMark+0x34>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	e000      	b.n	800ebd6 <uxTaskGetStackHighWaterMark+0x16>
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800ebd8:	697b      	ldr	r3, [r7, #20]
 800ebda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebdc:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800ebde:	6938      	ldr	r0, [r7, #16]
 800ebe0:	f7ff ffd2 	bl	800eb88 <prvTaskCheckFreeStackSpace>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
	}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3718      	adds	r7, #24
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	20000cf8 	.word	0x20000cf8

0800ebf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b084      	sub	sp, #16
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	3354      	adds	r3, #84	@ 0x54
 800ec04:	4618      	mov	r0, r3
 800ec06:	f002 f9ed 	bl	8010fe4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d108      	bne.n	800ec26 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f001 faa5 	bl	8010168 <vPortFree>
				vPortFree( pxTCB );
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f001 faa2 	bl	8010168 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ec24:	e019      	b.n	800ec5a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ec2c:	2b01      	cmp	r3, #1
 800ec2e:	d103      	bne.n	800ec38 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ec30:	6878      	ldr	r0, [r7, #4]
 800ec32:	f001 fa99 	bl	8010168 <vPortFree>
	}
 800ec36:	e010      	b.n	800ec5a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ec3e:	2b02      	cmp	r3, #2
 800ec40:	d00b      	beq.n	800ec5a <prvDeleteTCB+0x62>
	__asm volatile
 800ec42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec46:	f383 8811 	msr	BASEPRI, r3
 800ec4a:	f3bf 8f6f 	isb	sy
 800ec4e:	f3bf 8f4f 	dsb	sy
 800ec52:	60fb      	str	r3, [r7, #12]
}
 800ec54:	bf00      	nop
 800ec56:	bf00      	nop
 800ec58:	e7fd      	b.n	800ec56 <prvDeleteTCB+0x5e>
	}
 800ec5a:	bf00      	nop
 800ec5c:	3710      	adds	r7, #16
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
	...

0800ec64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ec64:	b480      	push	{r7}
 800ec66:	b083      	sub	sp, #12
 800ec68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec6a:	4b0c      	ldr	r3, [pc, #48]	@ (800ec9c <prvResetNextTaskUnblockTime+0x38>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d104      	bne.n	800ec7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ec74:	4b0a      	ldr	r3, [pc, #40]	@ (800eca0 <prvResetNextTaskUnblockTime+0x3c>)
 800ec76:	f04f 32ff 	mov.w	r2, #4294967295
 800ec7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ec7c:	e008      	b.n	800ec90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec7e:	4b07      	ldr	r3, [pc, #28]	@ (800ec9c <prvResetNextTaskUnblockTime+0x38>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	68db      	ldr	r3, [r3, #12]
 800ec84:	68db      	ldr	r3, [r3, #12]
 800ec86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	4a04      	ldr	r2, [pc, #16]	@ (800eca0 <prvResetNextTaskUnblockTime+0x3c>)
 800ec8e:	6013      	str	r3, [r2, #0]
}
 800ec90:	bf00      	nop
 800ec92:	370c      	adds	r7, #12
 800ec94:	46bd      	mov	sp, r7
 800ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9a:	4770      	bx	lr
 800ec9c:	20001184 	.word	0x20001184
 800eca0:	200011ec 	.word	0x200011ec

0800eca4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eca4:	b480      	push	{r7}
 800eca6:	b083      	sub	sp, #12
 800eca8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ecaa:	4b0b      	ldr	r3, [pc, #44]	@ (800ecd8 <xTaskGetSchedulerState+0x34>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d102      	bne.n	800ecb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	607b      	str	r3, [r7, #4]
 800ecb6:	e008      	b.n	800ecca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ecb8:	4b08      	ldr	r3, [pc, #32]	@ (800ecdc <xTaskGetSchedulerState+0x38>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d102      	bne.n	800ecc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ecc0:	2302      	movs	r3, #2
 800ecc2:	607b      	str	r3, [r7, #4]
 800ecc4:	e001      	b.n	800ecca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ecca:	687b      	ldr	r3, [r7, #4]
	}
 800eccc:	4618      	mov	r0, r3
 800ecce:	370c      	adds	r7, #12
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd6:	4770      	bx	lr
 800ecd8:	200011d8 	.word	0x200011d8
 800ecdc:	200011f4 	.word	0x200011f4

0800ece0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b084      	sub	sp, #16
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ecec:	2300      	movs	r3, #0
 800ecee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d051      	beq.n	800ed9a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecfa:	4b2a      	ldr	r3, [pc, #168]	@ (800eda4 <xTaskPriorityInherit+0xc4>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d241      	bcs.n	800ed88 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ed04:	68bb      	ldr	r3, [r7, #8]
 800ed06:	699b      	ldr	r3, [r3, #24]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	db06      	blt.n	800ed1a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed0c:	4b25      	ldr	r3, [pc, #148]	@ (800eda4 <xTaskPriorityInherit+0xc4>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed12:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ed1a:	68bb      	ldr	r3, [r7, #8]
 800ed1c:	6959      	ldr	r1, [r3, #20]
 800ed1e:	68bb      	ldr	r3, [r7, #8]
 800ed20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed22:	4613      	mov	r3, r2
 800ed24:	009b      	lsls	r3, r3, #2
 800ed26:	4413      	add	r3, r2
 800ed28:	009b      	lsls	r3, r3, #2
 800ed2a:	4a1f      	ldr	r2, [pc, #124]	@ (800eda8 <xTaskPriorityInherit+0xc8>)
 800ed2c:	4413      	add	r3, r2
 800ed2e:	4299      	cmp	r1, r3
 800ed30:	d122      	bne.n	800ed78 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	3304      	adds	r3, #4
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7fd fd66 	bl	800c808 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed3c:	4b19      	ldr	r3, [pc, #100]	@ (800eda4 <xTaskPriorityInherit+0xc4>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed4a:	4b18      	ldr	r3, [pc, #96]	@ (800edac <xTaskPriorityInherit+0xcc>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d903      	bls.n	800ed5a <xTaskPriorityInherit+0x7a>
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed56:	4a15      	ldr	r2, [pc, #84]	@ (800edac <xTaskPriorityInherit+0xcc>)
 800ed58:	6013      	str	r3, [r2, #0]
 800ed5a:	68bb      	ldr	r3, [r7, #8]
 800ed5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed5e:	4613      	mov	r3, r2
 800ed60:	009b      	lsls	r3, r3, #2
 800ed62:	4413      	add	r3, r2
 800ed64:	009b      	lsls	r3, r3, #2
 800ed66:	4a10      	ldr	r2, [pc, #64]	@ (800eda8 <xTaskPriorityInherit+0xc8>)
 800ed68:	441a      	add	r2, r3
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	3304      	adds	r3, #4
 800ed6e:	4619      	mov	r1, r3
 800ed70:	4610      	mov	r0, r2
 800ed72:	f7fd fcec 	bl	800c74e <vListInsertEnd>
 800ed76:	e004      	b.n	800ed82 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed78:	4b0a      	ldr	r3, [pc, #40]	@ (800eda4 <xTaskPriorityInherit+0xc4>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ed82:	2301      	movs	r3, #1
 800ed84:	60fb      	str	r3, [r7, #12]
 800ed86:	e008      	b.n	800ed9a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ed8c:	4b05      	ldr	r3, [pc, #20]	@ (800eda4 <xTaskPriorityInherit+0xc4>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed92:	429a      	cmp	r2, r3
 800ed94:	d201      	bcs.n	800ed9a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ed96:	2301      	movs	r3, #1
 800ed98:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
	}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3710      	adds	r7, #16
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}
 800eda4:	20000cf8 	.word	0x20000cf8
 800eda8:	20000cfc 	.word	0x20000cfc
 800edac:	200011d4 	.word	0x200011d4

0800edb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b086      	sub	sp, #24
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800edbc:	2300      	movs	r3, #0
 800edbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d058      	beq.n	800ee78 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800edc6:	4b2f      	ldr	r3, [pc, #188]	@ (800ee84 <xTaskPriorityDisinherit+0xd4>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	693a      	ldr	r2, [r7, #16]
 800edcc:	429a      	cmp	r2, r3
 800edce:	d00b      	beq.n	800ede8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800edd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edd4:	f383 8811 	msr	BASEPRI, r3
 800edd8:	f3bf 8f6f 	isb	sy
 800eddc:	f3bf 8f4f 	dsb	sy
 800ede0:	60fb      	str	r3, [r7, #12]
}
 800ede2:	bf00      	nop
 800ede4:	bf00      	nop
 800ede6:	e7fd      	b.n	800ede4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edec:	2b00      	cmp	r3, #0
 800edee:	d10b      	bne.n	800ee08 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800edf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edf4:	f383 8811 	msr	BASEPRI, r3
 800edf8:	f3bf 8f6f 	isb	sy
 800edfc:	f3bf 8f4f 	dsb	sy
 800ee00:	60bb      	str	r3, [r7, #8]
}
 800ee02:	bf00      	nop
 800ee04:	bf00      	nop
 800ee06:	e7fd      	b.n	800ee04 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ee08:	693b      	ldr	r3, [r7, #16]
 800ee0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee0c:	1e5a      	subs	r2, r3, #1
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee16:	693b      	ldr	r3, [r7, #16]
 800ee18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	d02c      	beq.n	800ee78 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d128      	bne.n	800ee78 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee26:	693b      	ldr	r3, [r7, #16]
 800ee28:	3304      	adds	r3, #4
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f7fd fcec 	bl	800c808 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ee30:	693b      	ldr	r3, [r7, #16]
 800ee32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ee34:	693b      	ldr	r3, [r7, #16]
 800ee36:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee38:	693b      	ldr	r3, [r7, #16]
 800ee3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ee44:	693b      	ldr	r3, [r7, #16]
 800ee46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee48:	4b0f      	ldr	r3, [pc, #60]	@ (800ee88 <xTaskPriorityDisinherit+0xd8>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	d903      	bls.n	800ee58 <xTaskPriorityDisinherit+0xa8>
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee54:	4a0c      	ldr	r2, [pc, #48]	@ (800ee88 <xTaskPriorityDisinherit+0xd8>)
 800ee56:	6013      	str	r3, [r2, #0]
 800ee58:	693b      	ldr	r3, [r7, #16]
 800ee5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee5c:	4613      	mov	r3, r2
 800ee5e:	009b      	lsls	r3, r3, #2
 800ee60:	4413      	add	r3, r2
 800ee62:	009b      	lsls	r3, r3, #2
 800ee64:	4a09      	ldr	r2, [pc, #36]	@ (800ee8c <xTaskPriorityDisinherit+0xdc>)
 800ee66:	441a      	add	r2, r3
 800ee68:	693b      	ldr	r3, [r7, #16]
 800ee6a:	3304      	adds	r3, #4
 800ee6c:	4619      	mov	r1, r3
 800ee6e:	4610      	mov	r0, r2
 800ee70:	f7fd fc6d 	bl	800c74e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ee74:	2301      	movs	r3, #1
 800ee76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee78:	697b      	ldr	r3, [r7, #20]
	}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3718      	adds	r7, #24
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}
 800ee82:	bf00      	nop
 800ee84:	20000cf8 	.word	0x20000cf8
 800ee88:	200011d4 	.word	0x200011d4
 800ee8c:	20000cfc 	.word	0x20000cfc

0800ee90 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b088      	sub	sp, #32
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
 800ee98:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ee9e:	2301      	movs	r3, #1
 800eea0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d06c      	beq.n	800ef82 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800eea8:	69bb      	ldr	r3, [r7, #24]
 800eeaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d10b      	bne.n	800eec8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800eeb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeb4:	f383 8811 	msr	BASEPRI, r3
 800eeb8:	f3bf 8f6f 	isb	sy
 800eebc:	f3bf 8f4f 	dsb	sy
 800eec0:	60fb      	str	r3, [r7, #12]
}
 800eec2:	bf00      	nop
 800eec4:	bf00      	nop
 800eec6:	e7fd      	b.n	800eec4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800eec8:	69bb      	ldr	r3, [r7, #24]
 800eeca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eecc:	683a      	ldr	r2, [r7, #0]
 800eece:	429a      	cmp	r2, r3
 800eed0:	d902      	bls.n	800eed8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	61fb      	str	r3, [r7, #28]
 800eed6:	e002      	b.n	800eede <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800eed8:	69bb      	ldr	r3, [r7, #24]
 800eeda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eedc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800eede:	69bb      	ldr	r3, [r7, #24]
 800eee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eee2:	69fa      	ldr	r2, [r7, #28]
 800eee4:	429a      	cmp	r2, r3
 800eee6:	d04c      	beq.n	800ef82 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800eee8:	69bb      	ldr	r3, [r7, #24]
 800eeea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eeec:	697a      	ldr	r2, [r7, #20]
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d147      	bne.n	800ef82 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800eef2:	4b26      	ldr	r3, [pc, #152]	@ (800ef8c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	69ba      	ldr	r2, [r7, #24]
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d10b      	bne.n	800ef14 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800eefc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef00:	f383 8811 	msr	BASEPRI, r3
 800ef04:	f3bf 8f6f 	isb	sy
 800ef08:	f3bf 8f4f 	dsb	sy
 800ef0c:	60bb      	str	r3, [r7, #8]
}
 800ef0e:	bf00      	nop
 800ef10:	bf00      	nop
 800ef12:	e7fd      	b.n	800ef10 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ef14:	69bb      	ldr	r3, [r7, #24]
 800ef16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef18:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ef1a:	69bb      	ldr	r3, [r7, #24]
 800ef1c:	69fa      	ldr	r2, [r7, #28]
 800ef1e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ef20:	69bb      	ldr	r3, [r7, #24]
 800ef22:	699b      	ldr	r3, [r3, #24]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	db04      	blt.n	800ef32 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef28:	69fb      	ldr	r3, [r7, #28]
 800ef2a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ef2e:	69bb      	ldr	r3, [r7, #24]
 800ef30:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ef32:	69bb      	ldr	r3, [r7, #24]
 800ef34:	6959      	ldr	r1, [r3, #20]
 800ef36:	693a      	ldr	r2, [r7, #16]
 800ef38:	4613      	mov	r3, r2
 800ef3a:	009b      	lsls	r3, r3, #2
 800ef3c:	4413      	add	r3, r2
 800ef3e:	009b      	lsls	r3, r3, #2
 800ef40:	4a13      	ldr	r2, [pc, #76]	@ (800ef90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ef42:	4413      	add	r3, r2
 800ef44:	4299      	cmp	r1, r3
 800ef46:	d11c      	bne.n	800ef82 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef48:	69bb      	ldr	r3, [r7, #24]
 800ef4a:	3304      	adds	r3, #4
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	f7fd fc5b 	bl	800c808 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ef52:	69bb      	ldr	r3, [r7, #24]
 800ef54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef56:	4b0f      	ldr	r3, [pc, #60]	@ (800ef94 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	d903      	bls.n	800ef66 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ef5e:	69bb      	ldr	r3, [r7, #24]
 800ef60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef62:	4a0c      	ldr	r2, [pc, #48]	@ (800ef94 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ef64:	6013      	str	r3, [r2, #0]
 800ef66:	69bb      	ldr	r3, [r7, #24]
 800ef68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef6a:	4613      	mov	r3, r2
 800ef6c:	009b      	lsls	r3, r3, #2
 800ef6e:	4413      	add	r3, r2
 800ef70:	009b      	lsls	r3, r3, #2
 800ef72:	4a07      	ldr	r2, [pc, #28]	@ (800ef90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ef74:	441a      	add	r2, r3
 800ef76:	69bb      	ldr	r3, [r7, #24]
 800ef78:	3304      	adds	r3, #4
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	4610      	mov	r0, r2
 800ef7e:	f7fd fbe6 	bl	800c74e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ef82:	bf00      	nop
 800ef84:	3720      	adds	r7, #32
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
 800ef8a:	bf00      	nop
 800ef8c:	20000cf8 	.word	0x20000cf8
 800ef90:	20000cfc 	.word	0x20000cfc
 800ef94:	200011d4 	.word	0x200011d4

0800ef98 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b083      	sub	sp, #12
 800ef9c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800ef9e:	4b09      	ldr	r3, [pc, #36]	@ (800efc4 <uxTaskResetEventItemValue+0x2c>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	699b      	ldr	r3, [r3, #24]
 800efa4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efa6:	4b07      	ldr	r3, [pc, #28]	@ (800efc4 <uxTaskResetEventItemValue+0x2c>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efac:	4b05      	ldr	r3, [pc, #20]	@ (800efc4 <uxTaskResetEventItemValue+0x2c>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800efb4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800efb6:	687b      	ldr	r3, [r7, #4]
}
 800efb8:	4618      	mov	r0, r3
 800efba:	370c      	adds	r7, #12
 800efbc:	46bd      	mov	sp, r7
 800efbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc2:	4770      	bx	lr
 800efc4:	20000cf8 	.word	0x20000cf8

0800efc8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800efc8:	b480      	push	{r7}
 800efca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800efcc:	4b07      	ldr	r3, [pc, #28]	@ (800efec <pvTaskIncrementMutexHeldCount+0x24>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d004      	beq.n	800efde <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800efd4:	4b05      	ldr	r3, [pc, #20]	@ (800efec <pvTaskIncrementMutexHeldCount+0x24>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800efda:	3201      	adds	r2, #1
 800efdc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800efde:	4b03      	ldr	r3, [pc, #12]	@ (800efec <pvTaskIncrementMutexHeldCount+0x24>)
 800efe0:	681b      	ldr	r3, [r3, #0]
	}
 800efe2:	4618      	mov	r0, r3
 800efe4:	46bd      	mov	sp, r7
 800efe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efea:	4770      	bx	lr
 800efec:	20000cf8 	.word	0x20000cf8

0800eff0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b084      	sub	sp, #16
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
 800eff8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800effa:	f000 fec5 	bl	800fd88 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800effe:	4b20      	ldr	r3, [pc, #128]	@ (800f080 <ulTaskNotifyTake+0x90>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f006:	2b00      	cmp	r3, #0
 800f008:	d113      	bne.n	800f032 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f00a:	4b1d      	ldr	r3, [pc, #116]	@ (800f080 <ulTaskNotifyTake+0x90>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	2201      	movs	r2, #1
 800f010:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d00b      	beq.n	800f032 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f01a:	2101      	movs	r1, #1
 800f01c:	6838      	ldr	r0, [r7, #0]
 800f01e:	f000 f955 	bl	800f2cc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f022:	4b18      	ldr	r3, [pc, #96]	@ (800f084 <ulTaskNotifyTake+0x94>)
 800f024:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f028:	601a      	str	r2, [r3, #0]
 800f02a:	f3bf 8f4f 	dsb	sy
 800f02e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f032:	f000 fedb 	bl	800fdec <vPortExitCritical>

		taskENTER_CRITICAL();
 800f036:	f000 fea7 	bl	800fd88 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800f03a:	4b11      	ldr	r3, [pc, #68]	@ (800f080 <ulTaskNotifyTake+0x90>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f042:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d00e      	beq.n	800f068 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d005      	beq.n	800f05c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800f050:	4b0b      	ldr	r3, [pc, #44]	@ (800f080 <ulTaskNotifyTake+0x90>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	2200      	movs	r2, #0
 800f056:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800f05a:	e005      	b.n	800f068 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800f05c:	4b08      	ldr	r3, [pc, #32]	@ (800f080 <ulTaskNotifyTake+0x90>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	68fa      	ldr	r2, [r7, #12]
 800f062:	3a01      	subs	r2, #1
 800f064:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f068:	4b05      	ldr	r3, [pc, #20]	@ (800f080 <ulTaskNotifyTake+0x90>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	2200      	movs	r2, #0
 800f06e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800f072:	f000 febb 	bl	800fdec <vPortExitCritical>

		return ulReturn;
 800f076:	68fb      	ldr	r3, [r7, #12]
	}
 800f078:	4618      	mov	r0, r3
 800f07a:	3710      	adds	r7, #16
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}
 800f080:	20000cf8 	.word	0x20000cf8
 800f084:	e000ed04 	.word	0xe000ed04

0800f088 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b086      	sub	sp, #24
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	60f8      	str	r0, [r7, #12]
 800f090:	60b9      	str	r1, [r7, #8]
 800f092:	607a      	str	r2, [r7, #4]
 800f094:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800f096:	f000 fe77 	bl	800fd88 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f09a:	4b29      	ldr	r3, [pc, #164]	@ (800f140 <xTaskNotifyWait+0xb8>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f0a2:	b2db      	uxtb	r3, r3
 800f0a4:	2b02      	cmp	r3, #2
 800f0a6:	d01c      	beq.n	800f0e2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800f0a8:	4b25      	ldr	r3, [pc, #148]	@ (800f140 <xTaskNotifyWait+0xb8>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800f0b0:	68fa      	ldr	r2, [r7, #12]
 800f0b2:	43d2      	mvns	r2, r2
 800f0b4:	400a      	ands	r2, r1
 800f0b6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f0ba:	4b21      	ldr	r3, [pc, #132]	@ (800f140 <xTaskNotifyWait+0xb8>)
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	2201      	movs	r2, #1
 800f0c0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d00b      	beq.n	800f0e2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f0ca:	2101      	movs	r1, #1
 800f0cc:	6838      	ldr	r0, [r7, #0]
 800f0ce:	f000 f8fd 	bl	800f2cc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f0d2:	4b1c      	ldr	r3, [pc, #112]	@ (800f144 <xTaskNotifyWait+0xbc>)
 800f0d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f0d8:	601a      	str	r2, [r3, #0]
 800f0da:	f3bf 8f4f 	dsb	sy
 800f0de:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f0e2:	f000 fe83 	bl	800fdec <vPortExitCritical>

		taskENTER_CRITICAL();
 800f0e6:	f000 fe4f 	bl	800fd88 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d005      	beq.n	800f0fc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800f0f0:	4b13      	ldr	r3, [pc, #76]	@ (800f140 <xTaskNotifyWait+0xb8>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f0fc:	4b10      	ldr	r3, [pc, #64]	@ (800f140 <xTaskNotifyWait+0xb8>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f104:	b2db      	uxtb	r3, r3
 800f106:	2b02      	cmp	r3, #2
 800f108:	d002      	beq.n	800f110 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800f10a:	2300      	movs	r3, #0
 800f10c:	617b      	str	r3, [r7, #20]
 800f10e:	e00a      	b.n	800f126 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800f110:	4b0b      	ldr	r3, [pc, #44]	@ (800f140 <xTaskNotifyWait+0xb8>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800f118:	68ba      	ldr	r2, [r7, #8]
 800f11a:	43d2      	mvns	r2, r2
 800f11c:	400a      	ands	r2, r1
 800f11e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800f122:	2301      	movs	r3, #1
 800f124:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f126:	4b06      	ldr	r3, [pc, #24]	@ (800f140 <xTaskNotifyWait+0xb8>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	2200      	movs	r2, #0
 800f12c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800f130:	f000 fe5c 	bl	800fdec <vPortExitCritical>

		return xReturn;
 800f134:	697b      	ldr	r3, [r7, #20]
	}
 800f136:	4618      	mov	r0, r3
 800f138:	3718      	adds	r7, #24
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
 800f13e:	bf00      	nop
 800f140:	20000cf8 	.word	0x20000cf8
 800f144:	e000ed04 	.word	0xe000ed04

0800f148 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b08a      	sub	sp, #40	@ 0x28
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	60f8      	str	r0, [r7, #12]
 800f150:	60b9      	str	r1, [r7, #8]
 800f152:	603b      	str	r3, [r7, #0]
 800f154:	4613      	mov	r3, r2
 800f156:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800f158:	2301      	movs	r3, #1
 800f15a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d10b      	bne.n	800f17a <xTaskGenericNotify+0x32>
	__asm volatile
 800f162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f166:	f383 8811 	msr	BASEPRI, r3
 800f16a:	f3bf 8f6f 	isb	sy
 800f16e:	f3bf 8f4f 	dsb	sy
 800f172:	61bb      	str	r3, [r7, #24]
}
 800f174:	bf00      	nop
 800f176:	bf00      	nop
 800f178:	e7fd      	b.n	800f176 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800f17e:	f000 fe03 	bl	800fd88 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d004      	beq.n	800f192 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f188:	6a3b      	ldr	r3, [r7, #32]
 800f18a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f192:	6a3b      	ldr	r3, [r7, #32]
 800f194:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f198:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f19a:	6a3b      	ldr	r3, [r7, #32]
 800f19c:	2202      	movs	r2, #2
 800f19e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800f1a2:	79fb      	ldrb	r3, [r7, #7]
 800f1a4:	2b04      	cmp	r3, #4
 800f1a6:	d82e      	bhi.n	800f206 <xTaskGenericNotify+0xbe>
 800f1a8:	a201      	add	r2, pc, #4	@ (adr r2, 800f1b0 <xTaskGenericNotify+0x68>)
 800f1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ae:	bf00      	nop
 800f1b0:	0800f22b 	.word	0x0800f22b
 800f1b4:	0800f1c5 	.word	0x0800f1c5
 800f1b8:	0800f1d7 	.word	0x0800f1d7
 800f1bc:	0800f1e7 	.word	0x0800f1e7
 800f1c0:	0800f1f1 	.word	0x0800f1f1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f1c4:	6a3b      	ldr	r3, [r7, #32]
 800f1c6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f1ca:	68bb      	ldr	r3, [r7, #8]
 800f1cc:	431a      	orrs	r2, r3
 800f1ce:	6a3b      	ldr	r3, [r7, #32]
 800f1d0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f1d4:	e02c      	b.n	800f230 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f1d6:	6a3b      	ldr	r3, [r7, #32]
 800f1d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f1dc:	1c5a      	adds	r2, r3, #1
 800f1de:	6a3b      	ldr	r3, [r7, #32]
 800f1e0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f1e4:	e024      	b.n	800f230 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f1e6:	6a3b      	ldr	r3, [r7, #32]
 800f1e8:	68ba      	ldr	r2, [r7, #8]
 800f1ea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f1ee:	e01f      	b.n	800f230 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f1f0:	7ffb      	ldrb	r3, [r7, #31]
 800f1f2:	2b02      	cmp	r3, #2
 800f1f4:	d004      	beq.n	800f200 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f1f6:	6a3b      	ldr	r3, [r7, #32]
 800f1f8:	68ba      	ldr	r2, [r7, #8]
 800f1fa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f1fe:	e017      	b.n	800f230 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800f200:	2300      	movs	r3, #0
 800f202:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800f204:	e014      	b.n	800f230 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f206:	6a3b      	ldr	r3, [r7, #32]
 800f208:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f20c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f210:	d00d      	beq.n	800f22e <xTaskGenericNotify+0xe6>
	__asm volatile
 800f212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f216:	f383 8811 	msr	BASEPRI, r3
 800f21a:	f3bf 8f6f 	isb	sy
 800f21e:	f3bf 8f4f 	dsb	sy
 800f222:	617b      	str	r3, [r7, #20]
}
 800f224:	bf00      	nop
 800f226:	bf00      	nop
 800f228:	e7fd      	b.n	800f226 <xTaskGenericNotify+0xde>
					break;
 800f22a:	bf00      	nop
 800f22c:	e000      	b.n	800f230 <xTaskGenericNotify+0xe8>

					break;
 800f22e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f230:	7ffb      	ldrb	r3, [r7, #31]
 800f232:	2b01      	cmp	r3, #1
 800f234:	d13b      	bne.n	800f2ae <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f236:	6a3b      	ldr	r3, [r7, #32]
 800f238:	3304      	adds	r3, #4
 800f23a:	4618      	mov	r0, r3
 800f23c:	f7fd fae4 	bl	800c808 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f240:	6a3b      	ldr	r3, [r7, #32]
 800f242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f244:	4b1d      	ldr	r3, [pc, #116]	@ (800f2bc <xTaskGenericNotify+0x174>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	429a      	cmp	r2, r3
 800f24a:	d903      	bls.n	800f254 <xTaskGenericNotify+0x10c>
 800f24c:	6a3b      	ldr	r3, [r7, #32]
 800f24e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f250:	4a1a      	ldr	r2, [pc, #104]	@ (800f2bc <xTaskGenericNotify+0x174>)
 800f252:	6013      	str	r3, [r2, #0]
 800f254:	6a3b      	ldr	r3, [r7, #32]
 800f256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f258:	4613      	mov	r3, r2
 800f25a:	009b      	lsls	r3, r3, #2
 800f25c:	4413      	add	r3, r2
 800f25e:	009b      	lsls	r3, r3, #2
 800f260:	4a17      	ldr	r2, [pc, #92]	@ (800f2c0 <xTaskGenericNotify+0x178>)
 800f262:	441a      	add	r2, r3
 800f264:	6a3b      	ldr	r3, [r7, #32]
 800f266:	3304      	adds	r3, #4
 800f268:	4619      	mov	r1, r3
 800f26a:	4610      	mov	r0, r2
 800f26c:	f7fd fa6f 	bl	800c74e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f270:	6a3b      	ldr	r3, [r7, #32]
 800f272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f274:	2b00      	cmp	r3, #0
 800f276:	d00b      	beq.n	800f290 <xTaskGenericNotify+0x148>
	__asm volatile
 800f278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f27c:	f383 8811 	msr	BASEPRI, r3
 800f280:	f3bf 8f6f 	isb	sy
 800f284:	f3bf 8f4f 	dsb	sy
 800f288:	613b      	str	r3, [r7, #16]
}
 800f28a:	bf00      	nop
 800f28c:	bf00      	nop
 800f28e:	e7fd      	b.n	800f28c <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f290:	6a3b      	ldr	r3, [r7, #32]
 800f292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f294:	4b0b      	ldr	r3, [pc, #44]	@ (800f2c4 <xTaskGenericNotify+0x17c>)
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d907      	bls.n	800f2ae <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800f29e:	4b0a      	ldr	r3, [pc, #40]	@ (800f2c8 <xTaskGenericNotify+0x180>)
 800f2a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f2a4:	601a      	str	r2, [r3, #0]
 800f2a6:	f3bf 8f4f 	dsb	sy
 800f2aa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f2ae:	f000 fd9d 	bl	800fdec <vPortExitCritical>

		return xReturn;
 800f2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3728      	adds	r7, #40	@ 0x28
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}
 800f2bc:	200011d4 	.word	0x200011d4
 800f2c0:	20000cfc 	.word	0x20000cfc
 800f2c4:	20000cf8 	.word	0x20000cf8
 800f2c8:	e000ed04 	.word	0xe000ed04

0800f2cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b084      	sub	sp, #16
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
 800f2d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f2d6:	4b21      	ldr	r3, [pc, #132]	@ (800f35c <prvAddCurrentTaskToDelayedList+0x90>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f2dc:	4b20      	ldr	r3, [pc, #128]	@ (800f360 <prvAddCurrentTaskToDelayedList+0x94>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	3304      	adds	r3, #4
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7fd fa90 	bl	800c808 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ee:	d10a      	bne.n	800f306 <prvAddCurrentTaskToDelayedList+0x3a>
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d007      	beq.n	800f306 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f2f6:	4b1a      	ldr	r3, [pc, #104]	@ (800f360 <prvAddCurrentTaskToDelayedList+0x94>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	3304      	adds	r3, #4
 800f2fc:	4619      	mov	r1, r3
 800f2fe:	4819      	ldr	r0, [pc, #100]	@ (800f364 <prvAddCurrentTaskToDelayedList+0x98>)
 800f300:	f7fd fa25 	bl	800c74e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f304:	e026      	b.n	800f354 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f306:	68fa      	ldr	r2, [r7, #12]
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	4413      	add	r3, r2
 800f30c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f30e:	4b14      	ldr	r3, [pc, #80]	@ (800f360 <prvAddCurrentTaskToDelayedList+0x94>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	68ba      	ldr	r2, [r7, #8]
 800f314:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f316:	68ba      	ldr	r2, [r7, #8]
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	429a      	cmp	r2, r3
 800f31c:	d209      	bcs.n	800f332 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f31e:	4b12      	ldr	r3, [pc, #72]	@ (800f368 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f320:	681a      	ldr	r2, [r3, #0]
 800f322:	4b0f      	ldr	r3, [pc, #60]	@ (800f360 <prvAddCurrentTaskToDelayedList+0x94>)
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	3304      	adds	r3, #4
 800f328:	4619      	mov	r1, r3
 800f32a:	4610      	mov	r0, r2
 800f32c:	f7fd fa33 	bl	800c796 <vListInsert>
}
 800f330:	e010      	b.n	800f354 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f332:	4b0e      	ldr	r3, [pc, #56]	@ (800f36c <prvAddCurrentTaskToDelayedList+0xa0>)
 800f334:	681a      	ldr	r2, [r3, #0]
 800f336:	4b0a      	ldr	r3, [pc, #40]	@ (800f360 <prvAddCurrentTaskToDelayedList+0x94>)
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	3304      	adds	r3, #4
 800f33c:	4619      	mov	r1, r3
 800f33e:	4610      	mov	r0, r2
 800f340:	f7fd fa29 	bl	800c796 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f344:	4b0a      	ldr	r3, [pc, #40]	@ (800f370 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	68ba      	ldr	r2, [r7, #8]
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d202      	bcs.n	800f354 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f34e:	4a08      	ldr	r2, [pc, #32]	@ (800f370 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	6013      	str	r3, [r2, #0]
}
 800f354:	bf00      	nop
 800f356:	3710      	adds	r7, #16
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}
 800f35c:	200011d0 	.word	0x200011d0
 800f360:	20000cf8 	.word	0x20000cf8
 800f364:	200011b8 	.word	0x200011b8
 800f368:	20001188 	.word	0x20001188
 800f36c:	20001184 	.word	0x20001184
 800f370:	200011ec 	.word	0x200011ec

0800f374 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b08a      	sub	sp, #40	@ 0x28
 800f378:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f37a:	2300      	movs	r3, #0
 800f37c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f37e:	f000 fb71 	bl	800fa64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f382:	4b1d      	ldr	r3, [pc, #116]	@ (800f3f8 <xTimerCreateTimerTask+0x84>)
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d021      	beq.n	800f3ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f38a:	2300      	movs	r3, #0
 800f38c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f38e:	2300      	movs	r3, #0
 800f390:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f392:	1d3a      	adds	r2, r7, #4
 800f394:	f107 0108 	add.w	r1, r7, #8
 800f398:	f107 030c 	add.w	r3, r7, #12
 800f39c:	4618      	mov	r0, r3
 800f39e:	f7fc ffd3 	bl	800c348 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f3a2:	6879      	ldr	r1, [r7, #4]
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	68fa      	ldr	r2, [r7, #12]
 800f3a8:	9202      	str	r2, [sp, #8]
 800f3aa:	9301      	str	r3, [sp, #4]
 800f3ac:	2302      	movs	r3, #2
 800f3ae:	9300      	str	r3, [sp, #0]
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	460a      	mov	r2, r1
 800f3b4:	4911      	ldr	r1, [pc, #68]	@ (800f3fc <xTimerCreateTimerTask+0x88>)
 800f3b6:	4812      	ldr	r0, [pc, #72]	@ (800f400 <xTimerCreateTimerTask+0x8c>)
 800f3b8:	f7fe f986 	bl	800d6c8 <xTaskCreateStatic>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	4a11      	ldr	r2, [pc, #68]	@ (800f404 <xTimerCreateTimerTask+0x90>)
 800f3c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f3c2:	4b10      	ldr	r3, [pc, #64]	@ (800f404 <xTimerCreateTimerTask+0x90>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d001      	beq.n	800f3ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f3ca:	2301      	movs	r3, #1
 800f3cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f3ce:	697b      	ldr	r3, [r7, #20]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d10b      	bne.n	800f3ec <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f3d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3d8:	f383 8811 	msr	BASEPRI, r3
 800f3dc:	f3bf 8f6f 	isb	sy
 800f3e0:	f3bf 8f4f 	dsb	sy
 800f3e4:	613b      	str	r3, [r7, #16]
}
 800f3e6:	bf00      	nop
 800f3e8:	bf00      	nop
 800f3ea:	e7fd      	b.n	800f3e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f3ec:	697b      	ldr	r3, [r7, #20]
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	3718      	adds	r7, #24
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	20001228 	.word	0x20001228
 800f3fc:	0801296c 	.word	0x0801296c
 800f400:	0800f5fd 	.word	0x0800f5fd
 800f404:	2000122c 	.word	0x2000122c

0800f408 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b088      	sub	sp, #32
 800f40c:	af02      	add	r7, sp, #8
 800f40e:	60f8      	str	r0, [r7, #12]
 800f410:	60b9      	str	r1, [r7, #8]
 800f412:	607a      	str	r2, [r7, #4]
 800f414:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800f416:	202c      	movs	r0, #44	@ 0x2c
 800f418:	f000 fdd8 	bl	800ffcc <pvPortMalloc>
 800f41c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d00d      	beq.n	800f440 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	2200      	movs	r2, #0
 800f428:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	9301      	str	r3, [sp, #4]
 800f430:	6a3b      	ldr	r3, [r7, #32]
 800f432:	9300      	str	r3, [sp, #0]
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	687a      	ldr	r2, [r7, #4]
 800f438:	68b9      	ldr	r1, [r7, #8]
 800f43a:	68f8      	ldr	r0, [r7, #12]
 800f43c:	f000 f805 	bl	800f44a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f440:	697b      	ldr	r3, [r7, #20]
	}
 800f442:	4618      	mov	r0, r3
 800f444:	3718      	adds	r7, #24
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}

0800f44a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800f44a:	b580      	push	{r7, lr}
 800f44c:	b086      	sub	sp, #24
 800f44e:	af00      	add	r7, sp, #0
 800f450:	60f8      	str	r0, [r7, #12]
 800f452:	60b9      	str	r1, [r7, #8]
 800f454:	607a      	str	r2, [r7, #4]
 800f456:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d10b      	bne.n	800f476 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800f45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f462:	f383 8811 	msr	BASEPRI, r3
 800f466:	f3bf 8f6f 	isb	sy
 800f46a:	f3bf 8f4f 	dsb	sy
 800f46e:	617b      	str	r3, [r7, #20]
}
 800f470:	bf00      	nop
 800f472:	bf00      	nop
 800f474:	e7fd      	b.n	800f472 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d01e      	beq.n	800f4ba <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800f47c:	f000 faf2 	bl	800fa64 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800f480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f482:	68fa      	ldr	r2, [r7, #12]
 800f484:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f488:	68ba      	ldr	r2, [r7, #8]
 800f48a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800f48c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f48e:	683a      	ldr	r2, [r7, #0]
 800f490:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f494:	6a3a      	ldr	r2, [r7, #32]
 800f496:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f49a:	3304      	adds	r3, #4
 800f49c:	4618      	mov	r0, r3
 800f49e:	f7fd f949 	bl	800c734 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d008      	beq.n	800f4ba <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800f4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f4ae:	f043 0304 	orr.w	r3, r3, #4
 800f4b2:	b2da      	uxtb	r2, r3
 800f4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f4ba:	bf00      	nop
 800f4bc:	3718      	adds	r7, #24
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}
	...

0800f4c4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b08a      	sub	sp, #40	@ 0x28
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	60f8      	str	r0, [r7, #12]
 800f4cc:	60b9      	str	r1, [r7, #8]
 800f4ce:	607a      	str	r2, [r7, #4]
 800f4d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d10b      	bne.n	800f4f4 <xTimerGenericCommand+0x30>
	__asm volatile
 800f4dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4e0:	f383 8811 	msr	BASEPRI, r3
 800f4e4:	f3bf 8f6f 	isb	sy
 800f4e8:	f3bf 8f4f 	dsb	sy
 800f4ec:	623b      	str	r3, [r7, #32]
}
 800f4ee:	bf00      	nop
 800f4f0:	bf00      	nop
 800f4f2:	e7fd      	b.n	800f4f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f4f4:	4b19      	ldr	r3, [pc, #100]	@ (800f55c <xTimerGenericCommand+0x98>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d02a      	beq.n	800f552 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	2b05      	cmp	r3, #5
 800f50c:	dc18      	bgt.n	800f540 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f50e:	f7ff fbc9 	bl	800eca4 <xTaskGetSchedulerState>
 800f512:	4603      	mov	r3, r0
 800f514:	2b02      	cmp	r3, #2
 800f516:	d109      	bne.n	800f52c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f518:	4b10      	ldr	r3, [pc, #64]	@ (800f55c <xTimerGenericCommand+0x98>)
 800f51a:	6818      	ldr	r0, [r3, #0]
 800f51c:	f107 0110 	add.w	r1, r7, #16
 800f520:	2300      	movs	r3, #0
 800f522:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f524:	f7fd fb12 	bl	800cb4c <xQueueGenericSend>
 800f528:	6278      	str	r0, [r7, #36]	@ 0x24
 800f52a:	e012      	b.n	800f552 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f52c:	4b0b      	ldr	r3, [pc, #44]	@ (800f55c <xTimerGenericCommand+0x98>)
 800f52e:	6818      	ldr	r0, [r3, #0]
 800f530:	f107 0110 	add.w	r1, r7, #16
 800f534:	2300      	movs	r3, #0
 800f536:	2200      	movs	r2, #0
 800f538:	f7fd fb08 	bl	800cb4c <xQueueGenericSend>
 800f53c:	6278      	str	r0, [r7, #36]	@ 0x24
 800f53e:	e008      	b.n	800f552 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f540:	4b06      	ldr	r3, [pc, #24]	@ (800f55c <xTimerGenericCommand+0x98>)
 800f542:	6818      	ldr	r0, [r3, #0]
 800f544:	f107 0110 	add.w	r1, r7, #16
 800f548:	2300      	movs	r3, #0
 800f54a:	683a      	ldr	r2, [r7, #0]
 800f54c:	f7fd fc00 	bl	800cd50 <xQueueGenericSendFromISR>
 800f550:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f554:	4618      	mov	r0, r3
 800f556:	3728      	adds	r7, #40	@ 0x28
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}
 800f55c:	20001228 	.word	0x20001228

0800f560 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b088      	sub	sp, #32
 800f564:	af02      	add	r7, sp, #8
 800f566:	6078      	str	r0, [r7, #4]
 800f568:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f56a:	4b23      	ldr	r3, [pc, #140]	@ (800f5f8 <prvProcessExpiredTimer+0x98>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	68db      	ldr	r3, [r3, #12]
 800f570:	68db      	ldr	r3, [r3, #12]
 800f572:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	3304      	adds	r3, #4
 800f578:	4618      	mov	r0, r3
 800f57a:	f7fd f945 	bl	800c808 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f57e:	697b      	ldr	r3, [r7, #20]
 800f580:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f584:	f003 0304 	and.w	r3, r3, #4
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d023      	beq.n	800f5d4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	699a      	ldr	r2, [r3, #24]
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	18d1      	adds	r1, r2, r3
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	683a      	ldr	r2, [r7, #0]
 800f598:	6978      	ldr	r0, [r7, #20]
 800f59a:	f000 f8d5 	bl	800f748 <prvInsertTimerInActiveList>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d020      	beq.n	800f5e6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	9300      	str	r3, [sp, #0]
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	687a      	ldr	r2, [r7, #4]
 800f5ac:	2100      	movs	r1, #0
 800f5ae:	6978      	ldr	r0, [r7, #20]
 800f5b0:	f7ff ff88 	bl	800f4c4 <xTimerGenericCommand>
 800f5b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f5b6:	693b      	ldr	r3, [r7, #16]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d114      	bne.n	800f5e6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f5bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5c0:	f383 8811 	msr	BASEPRI, r3
 800f5c4:	f3bf 8f6f 	isb	sy
 800f5c8:	f3bf 8f4f 	dsb	sy
 800f5cc:	60fb      	str	r3, [r7, #12]
}
 800f5ce:	bf00      	nop
 800f5d0:	bf00      	nop
 800f5d2:	e7fd      	b.n	800f5d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f5da:	f023 0301 	bic.w	r3, r3, #1
 800f5de:	b2da      	uxtb	r2, r3
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f5e6:	697b      	ldr	r3, [r7, #20]
 800f5e8:	6a1b      	ldr	r3, [r3, #32]
 800f5ea:	6978      	ldr	r0, [r7, #20]
 800f5ec:	4798      	blx	r3
}
 800f5ee:	bf00      	nop
 800f5f0:	3718      	adds	r7, #24
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}
 800f5f6:	bf00      	nop
 800f5f8:	20001220 	.word	0x20001220

0800f5fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b084      	sub	sp, #16
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f604:	f107 0308 	add.w	r3, r7, #8
 800f608:	4618      	mov	r0, r3
 800f60a:	f000 f859 	bl	800f6c0 <prvGetNextExpireTime>
 800f60e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	4619      	mov	r1, r3
 800f614:	68f8      	ldr	r0, [r7, #12]
 800f616:	f000 f805 	bl	800f624 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f61a:	f000 f8d7 	bl	800f7cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f61e:	bf00      	nop
 800f620:	e7f0      	b.n	800f604 <prvTimerTask+0x8>
	...

0800f624 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b084      	sub	sp, #16
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
 800f62c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f62e:	f7fe fd31 	bl	800e094 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f632:	f107 0308 	add.w	r3, r7, #8
 800f636:	4618      	mov	r0, r3
 800f638:	f000 f866 	bl	800f708 <prvSampleTimeNow>
 800f63c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d130      	bne.n	800f6a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d10a      	bne.n	800f660 <prvProcessTimerOrBlockTask+0x3c>
 800f64a:	687a      	ldr	r2, [r7, #4]
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	429a      	cmp	r2, r3
 800f650:	d806      	bhi.n	800f660 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f652:	f7fe fd2d 	bl	800e0b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f656:	68f9      	ldr	r1, [r7, #12]
 800f658:	6878      	ldr	r0, [r7, #4]
 800f65a:	f7ff ff81 	bl	800f560 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f65e:	e024      	b.n	800f6aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d008      	beq.n	800f678 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f666:	4b13      	ldr	r3, [pc, #76]	@ (800f6b4 <prvProcessTimerOrBlockTask+0x90>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d101      	bne.n	800f674 <prvProcessTimerOrBlockTask+0x50>
 800f670:	2301      	movs	r3, #1
 800f672:	e000      	b.n	800f676 <prvProcessTimerOrBlockTask+0x52>
 800f674:	2300      	movs	r3, #0
 800f676:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f678:	4b0f      	ldr	r3, [pc, #60]	@ (800f6b8 <prvProcessTimerOrBlockTask+0x94>)
 800f67a:	6818      	ldr	r0, [r3, #0]
 800f67c:	687a      	ldr	r2, [r7, #4]
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	1ad3      	subs	r3, r2, r3
 800f682:	683a      	ldr	r2, [r7, #0]
 800f684:	4619      	mov	r1, r3
 800f686:	f7fd ffeb 	bl	800d660 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f68a:	f7fe fd11 	bl	800e0b0 <xTaskResumeAll>
 800f68e:	4603      	mov	r3, r0
 800f690:	2b00      	cmp	r3, #0
 800f692:	d10a      	bne.n	800f6aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f694:	4b09      	ldr	r3, [pc, #36]	@ (800f6bc <prvProcessTimerOrBlockTask+0x98>)
 800f696:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f69a:	601a      	str	r2, [r3, #0]
 800f69c:	f3bf 8f4f 	dsb	sy
 800f6a0:	f3bf 8f6f 	isb	sy
}
 800f6a4:	e001      	b.n	800f6aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f6a6:	f7fe fd03 	bl	800e0b0 <xTaskResumeAll>
}
 800f6aa:	bf00      	nop
 800f6ac:	3710      	adds	r7, #16
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}
 800f6b2:	bf00      	nop
 800f6b4:	20001224 	.word	0x20001224
 800f6b8:	20001228 	.word	0x20001228
 800f6bc:	e000ed04 	.word	0xe000ed04

0800f6c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f6c0:	b480      	push	{r7}
 800f6c2:	b085      	sub	sp, #20
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f6c8:	4b0e      	ldr	r3, [pc, #56]	@ (800f704 <prvGetNextExpireTime+0x44>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d101      	bne.n	800f6d6 <prvGetNextExpireTime+0x16>
 800f6d2:	2201      	movs	r2, #1
 800f6d4:	e000      	b.n	800f6d8 <prvGetNextExpireTime+0x18>
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d105      	bne.n	800f6f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f6e4:	4b07      	ldr	r3, [pc, #28]	@ (800f704 <prvGetNextExpireTime+0x44>)
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	68db      	ldr	r3, [r3, #12]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	60fb      	str	r3, [r7, #12]
 800f6ee:	e001      	b.n	800f6f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3714      	adds	r7, #20
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f700:	4770      	bx	lr
 800f702:	bf00      	nop
 800f704:	20001220 	.word	0x20001220

0800f708 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b084      	sub	sp, #16
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f710:	f7fe fd6c 	bl	800e1ec <xTaskGetTickCount>
 800f714:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f716:	4b0b      	ldr	r3, [pc, #44]	@ (800f744 <prvSampleTimeNow+0x3c>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	68fa      	ldr	r2, [r7, #12]
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d205      	bcs.n	800f72c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f720:	f000 f93a 	bl	800f998 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2201      	movs	r2, #1
 800f728:	601a      	str	r2, [r3, #0]
 800f72a:	e002      	b.n	800f732 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2200      	movs	r2, #0
 800f730:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f732:	4a04      	ldr	r2, [pc, #16]	@ (800f744 <prvSampleTimeNow+0x3c>)
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f738:	68fb      	ldr	r3, [r7, #12]
}
 800f73a:	4618      	mov	r0, r3
 800f73c:	3710      	adds	r7, #16
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}
 800f742:	bf00      	nop
 800f744:	20001230 	.word	0x20001230

0800f748 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b086      	sub	sp, #24
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	60f8      	str	r0, [r7, #12]
 800f750:	60b9      	str	r1, [r7, #8]
 800f752:	607a      	str	r2, [r7, #4]
 800f754:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f756:	2300      	movs	r3, #0
 800f758:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	68ba      	ldr	r2, [r7, #8]
 800f75e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	68fa      	ldr	r2, [r7, #12]
 800f764:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f766:	68ba      	ldr	r2, [r7, #8]
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	429a      	cmp	r2, r3
 800f76c:	d812      	bhi.n	800f794 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f76e:	687a      	ldr	r2, [r7, #4]
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	1ad2      	subs	r2, r2, r3
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	699b      	ldr	r3, [r3, #24]
 800f778:	429a      	cmp	r2, r3
 800f77a:	d302      	bcc.n	800f782 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f77c:	2301      	movs	r3, #1
 800f77e:	617b      	str	r3, [r7, #20]
 800f780:	e01b      	b.n	800f7ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f782:	4b10      	ldr	r3, [pc, #64]	@ (800f7c4 <prvInsertTimerInActiveList+0x7c>)
 800f784:	681a      	ldr	r2, [r3, #0]
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	3304      	adds	r3, #4
 800f78a:	4619      	mov	r1, r3
 800f78c:	4610      	mov	r0, r2
 800f78e:	f7fd f802 	bl	800c796 <vListInsert>
 800f792:	e012      	b.n	800f7ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f794:	687a      	ldr	r2, [r7, #4]
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	429a      	cmp	r2, r3
 800f79a:	d206      	bcs.n	800f7aa <prvInsertTimerInActiveList+0x62>
 800f79c:	68ba      	ldr	r2, [r7, #8]
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	429a      	cmp	r2, r3
 800f7a2:	d302      	bcc.n	800f7aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f7a4:	2301      	movs	r3, #1
 800f7a6:	617b      	str	r3, [r7, #20]
 800f7a8:	e007      	b.n	800f7ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f7aa:	4b07      	ldr	r3, [pc, #28]	@ (800f7c8 <prvInsertTimerInActiveList+0x80>)
 800f7ac:	681a      	ldr	r2, [r3, #0]
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	3304      	adds	r3, #4
 800f7b2:	4619      	mov	r1, r3
 800f7b4:	4610      	mov	r0, r2
 800f7b6:	f7fc ffee 	bl	800c796 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f7ba:	697b      	ldr	r3, [r7, #20]
}
 800f7bc:	4618      	mov	r0, r3
 800f7be:	3718      	adds	r7, #24
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}
 800f7c4:	20001224 	.word	0x20001224
 800f7c8:	20001220 	.word	0x20001220

0800f7cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b08e      	sub	sp, #56	@ 0x38
 800f7d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f7d2:	e0ce      	b.n	800f972 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	da19      	bge.n	800f80e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f7da:	1d3b      	adds	r3, r7, #4
 800f7dc:	3304      	adds	r3, #4
 800f7de:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d10b      	bne.n	800f7fe <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7ea:	f383 8811 	msr	BASEPRI, r3
 800f7ee:	f3bf 8f6f 	isb	sy
 800f7f2:	f3bf 8f4f 	dsb	sy
 800f7f6:	61fb      	str	r3, [r7, #28]
}
 800f7f8:	bf00      	nop
 800f7fa:	bf00      	nop
 800f7fc:	e7fd      	b.n	800f7fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f7fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f804:	6850      	ldr	r0, [r2, #4]
 800f806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f808:	6892      	ldr	r2, [r2, #8]
 800f80a:	4611      	mov	r1, r2
 800f80c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2b00      	cmp	r3, #0
 800f812:	f2c0 80ae 	blt.w	800f972 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f81a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f81c:	695b      	ldr	r3, [r3, #20]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d004      	beq.n	800f82c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f824:	3304      	adds	r3, #4
 800f826:	4618      	mov	r0, r3
 800f828:	f7fc ffee 	bl	800c808 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f82c:	463b      	mov	r3, r7
 800f82e:	4618      	mov	r0, r3
 800f830:	f7ff ff6a 	bl	800f708 <prvSampleTimeNow>
 800f834:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2b09      	cmp	r3, #9
 800f83a:	f200 8097 	bhi.w	800f96c <prvProcessReceivedCommands+0x1a0>
 800f83e:	a201      	add	r2, pc, #4	@ (adr r2, 800f844 <prvProcessReceivedCommands+0x78>)
 800f840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f844:	0800f86d 	.word	0x0800f86d
 800f848:	0800f86d 	.word	0x0800f86d
 800f84c:	0800f86d 	.word	0x0800f86d
 800f850:	0800f8e3 	.word	0x0800f8e3
 800f854:	0800f8f7 	.word	0x0800f8f7
 800f858:	0800f943 	.word	0x0800f943
 800f85c:	0800f86d 	.word	0x0800f86d
 800f860:	0800f86d 	.word	0x0800f86d
 800f864:	0800f8e3 	.word	0x0800f8e3
 800f868:	0800f8f7 	.word	0x0800f8f7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f86e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f872:	f043 0301 	orr.w	r3, r3, #1
 800f876:	b2da      	uxtb	r2, r3
 800f878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f87a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f87e:	68ba      	ldr	r2, [r7, #8]
 800f880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f882:	699b      	ldr	r3, [r3, #24]
 800f884:	18d1      	adds	r1, r2, r3
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f88a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f88c:	f7ff ff5c 	bl	800f748 <prvInsertTimerInActiveList>
 800f890:	4603      	mov	r3, r0
 800f892:	2b00      	cmp	r3, #0
 800f894:	d06c      	beq.n	800f970 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f898:	6a1b      	ldr	r3, [r3, #32]
 800f89a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f89c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f89e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f8a4:	f003 0304 	and.w	r3, r3, #4
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d061      	beq.n	800f970 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f8ac:	68ba      	ldr	r2, [r7, #8]
 800f8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8b0:	699b      	ldr	r3, [r3, #24]
 800f8b2:	441a      	add	r2, r3
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	9300      	str	r3, [sp, #0]
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	2100      	movs	r1, #0
 800f8bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8be:	f7ff fe01 	bl	800f4c4 <xTimerGenericCommand>
 800f8c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f8c4:	6a3b      	ldr	r3, [r7, #32]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d152      	bne.n	800f970 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f8ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8ce:	f383 8811 	msr	BASEPRI, r3
 800f8d2:	f3bf 8f6f 	isb	sy
 800f8d6:	f3bf 8f4f 	dsb	sy
 800f8da:	61bb      	str	r3, [r7, #24]
}
 800f8dc:	bf00      	nop
 800f8de:	bf00      	nop
 800f8e0:	e7fd      	b.n	800f8de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f8e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f8e8:	f023 0301 	bic.w	r3, r3, #1
 800f8ec:	b2da      	uxtb	r2, r3
 800f8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f8f4:	e03d      	b.n	800f972 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f8f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f8fc:	f043 0301 	orr.w	r3, r3, #1
 800f900:	b2da      	uxtb	r2, r3
 800f902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f904:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f908:	68ba      	ldr	r2, [r7, #8]
 800f90a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f90c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f90e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f910:	699b      	ldr	r3, [r3, #24]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d10b      	bne.n	800f92e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f91a:	f383 8811 	msr	BASEPRI, r3
 800f91e:	f3bf 8f6f 	isb	sy
 800f922:	f3bf 8f4f 	dsb	sy
 800f926:	617b      	str	r3, [r7, #20]
}
 800f928:	bf00      	nop
 800f92a:	bf00      	nop
 800f92c:	e7fd      	b.n	800f92a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f92e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f930:	699a      	ldr	r2, [r3, #24]
 800f932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f934:	18d1      	adds	r1, r2, r3
 800f936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f938:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f93a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f93c:	f7ff ff04 	bl	800f748 <prvInsertTimerInActiveList>
					break;
 800f940:	e017      	b.n	800f972 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f944:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f948:	f003 0302 	and.w	r3, r3, #2
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d103      	bne.n	800f958 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f950:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f952:	f000 fc09 	bl	8010168 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f956:	e00c      	b.n	800f972 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f95a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f95e:	f023 0301 	bic.w	r3, r3, #1
 800f962:	b2da      	uxtb	r2, r3
 800f964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f966:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f96a:	e002      	b.n	800f972 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f96c:	bf00      	nop
 800f96e:	e000      	b.n	800f972 <prvProcessReceivedCommands+0x1a6>
					break;
 800f970:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f972:	4b08      	ldr	r3, [pc, #32]	@ (800f994 <prvProcessReceivedCommands+0x1c8>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	1d39      	adds	r1, r7, #4
 800f978:	2200      	movs	r2, #0
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7fd fa86 	bl	800ce8c <xQueueReceive>
 800f980:	4603      	mov	r3, r0
 800f982:	2b00      	cmp	r3, #0
 800f984:	f47f af26 	bne.w	800f7d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f988:	bf00      	nop
 800f98a:	bf00      	nop
 800f98c:	3730      	adds	r7, #48	@ 0x30
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}
 800f992:	bf00      	nop
 800f994:	20001228 	.word	0x20001228

0800f998 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b088      	sub	sp, #32
 800f99c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f99e:	e049      	b.n	800fa34 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f9a0:	4b2e      	ldr	r3, [pc, #184]	@ (800fa5c <prvSwitchTimerLists+0xc4>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	68db      	ldr	r3, [r3, #12]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9aa:	4b2c      	ldr	r3, [pc, #176]	@ (800fa5c <prvSwitchTimerLists+0xc4>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	68db      	ldr	r3, [r3, #12]
 800f9b0:	68db      	ldr	r3, [r3, #12]
 800f9b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	3304      	adds	r3, #4
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7fc ff25 	bl	800c808 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	6a1b      	ldr	r3, [r3, #32]
 800f9c2:	68f8      	ldr	r0, [r7, #12]
 800f9c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f9cc:	f003 0304 	and.w	r3, r3, #4
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d02f      	beq.n	800fa34 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	699b      	ldr	r3, [r3, #24]
 800f9d8:	693a      	ldr	r2, [r7, #16]
 800f9da:	4413      	add	r3, r2
 800f9dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f9de:	68ba      	ldr	r2, [r7, #8]
 800f9e0:	693b      	ldr	r3, [r7, #16]
 800f9e2:	429a      	cmp	r2, r3
 800f9e4:	d90e      	bls.n	800fa04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	68ba      	ldr	r2, [r7, #8]
 800f9ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	68fa      	ldr	r2, [r7, #12]
 800f9f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f9f2:	4b1a      	ldr	r3, [pc, #104]	@ (800fa5c <prvSwitchTimerLists+0xc4>)
 800f9f4:	681a      	ldr	r2, [r3, #0]
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	3304      	adds	r3, #4
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	4610      	mov	r0, r2
 800f9fe:	f7fc feca 	bl	800c796 <vListInsert>
 800fa02:	e017      	b.n	800fa34 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fa04:	2300      	movs	r3, #0
 800fa06:	9300      	str	r3, [sp, #0]
 800fa08:	2300      	movs	r3, #0
 800fa0a:	693a      	ldr	r2, [r7, #16]
 800fa0c:	2100      	movs	r1, #0
 800fa0e:	68f8      	ldr	r0, [r7, #12]
 800fa10:	f7ff fd58 	bl	800f4c4 <xTimerGenericCommand>
 800fa14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d10b      	bne.n	800fa34 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800fa1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa20:	f383 8811 	msr	BASEPRI, r3
 800fa24:	f3bf 8f6f 	isb	sy
 800fa28:	f3bf 8f4f 	dsb	sy
 800fa2c:	603b      	str	r3, [r7, #0]
}
 800fa2e:	bf00      	nop
 800fa30:	bf00      	nop
 800fa32:	e7fd      	b.n	800fa30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fa34:	4b09      	ldr	r3, [pc, #36]	@ (800fa5c <prvSwitchTimerLists+0xc4>)
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d1b0      	bne.n	800f9a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fa3e:	4b07      	ldr	r3, [pc, #28]	@ (800fa5c <prvSwitchTimerLists+0xc4>)
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fa44:	4b06      	ldr	r3, [pc, #24]	@ (800fa60 <prvSwitchTimerLists+0xc8>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	4a04      	ldr	r2, [pc, #16]	@ (800fa5c <prvSwitchTimerLists+0xc4>)
 800fa4a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fa4c:	4a04      	ldr	r2, [pc, #16]	@ (800fa60 <prvSwitchTimerLists+0xc8>)
 800fa4e:	697b      	ldr	r3, [r7, #20]
 800fa50:	6013      	str	r3, [r2, #0]
}
 800fa52:	bf00      	nop
 800fa54:	3718      	adds	r7, #24
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}
 800fa5a:	bf00      	nop
 800fa5c:	20001220 	.word	0x20001220
 800fa60:	20001224 	.word	0x20001224

0800fa64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b082      	sub	sp, #8
 800fa68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fa6a:	f000 f98d 	bl	800fd88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fa6e:	4b15      	ldr	r3, [pc, #84]	@ (800fac4 <prvCheckForValidListAndQueue+0x60>)
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d120      	bne.n	800fab8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fa76:	4814      	ldr	r0, [pc, #80]	@ (800fac8 <prvCheckForValidListAndQueue+0x64>)
 800fa78:	f7fc fe3c 	bl	800c6f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fa7c:	4813      	ldr	r0, [pc, #76]	@ (800facc <prvCheckForValidListAndQueue+0x68>)
 800fa7e:	f7fc fe39 	bl	800c6f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fa82:	4b13      	ldr	r3, [pc, #76]	@ (800fad0 <prvCheckForValidListAndQueue+0x6c>)
 800fa84:	4a10      	ldr	r2, [pc, #64]	@ (800fac8 <prvCheckForValidListAndQueue+0x64>)
 800fa86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fa88:	4b12      	ldr	r3, [pc, #72]	@ (800fad4 <prvCheckForValidListAndQueue+0x70>)
 800fa8a:	4a10      	ldr	r2, [pc, #64]	@ (800facc <prvCheckForValidListAndQueue+0x68>)
 800fa8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fa8e:	2300      	movs	r3, #0
 800fa90:	9300      	str	r3, [sp, #0]
 800fa92:	4b11      	ldr	r3, [pc, #68]	@ (800fad8 <prvCheckForValidListAndQueue+0x74>)
 800fa94:	4a11      	ldr	r2, [pc, #68]	@ (800fadc <prvCheckForValidListAndQueue+0x78>)
 800fa96:	2110      	movs	r1, #16
 800fa98:	200a      	movs	r0, #10
 800fa9a:	f7fc ff49 	bl	800c930 <xQueueGenericCreateStatic>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	4a08      	ldr	r2, [pc, #32]	@ (800fac4 <prvCheckForValidListAndQueue+0x60>)
 800faa2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800faa4:	4b07      	ldr	r3, [pc, #28]	@ (800fac4 <prvCheckForValidListAndQueue+0x60>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d005      	beq.n	800fab8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800faac:	4b05      	ldr	r3, [pc, #20]	@ (800fac4 <prvCheckForValidListAndQueue+0x60>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	490b      	ldr	r1, [pc, #44]	@ (800fae0 <prvCheckForValidListAndQueue+0x7c>)
 800fab2:	4618      	mov	r0, r3
 800fab4:	f7fd fdaa 	bl	800d60c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fab8:	f000 f998 	bl	800fdec <vPortExitCritical>
}
 800fabc:	bf00      	nop
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}
 800fac2:	bf00      	nop
 800fac4:	20001228 	.word	0x20001228
 800fac8:	200011f8 	.word	0x200011f8
 800facc:	2000120c 	.word	0x2000120c
 800fad0:	20001220 	.word	0x20001220
 800fad4:	20001224 	.word	0x20001224
 800fad8:	200012d4 	.word	0x200012d4
 800fadc:	20001234 	.word	0x20001234
 800fae0:	08012974 	.word	0x08012974

0800fae4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b08a      	sub	sp, #40	@ 0x28
 800fae8:	af00      	add	r7, sp, #0
 800faea:	60f8      	str	r0, [r7, #12]
 800faec:	60b9      	str	r1, [r7, #8]
 800faee:	607a      	str	r2, [r7, #4]
 800faf0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800faf2:	f06f 0301 	mvn.w	r3, #1
 800faf6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800fafc:	68bb      	ldr	r3, [r7, #8]
 800fafe:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fb04:	4b06      	ldr	r3, [pc, #24]	@ (800fb20 <xTimerPendFunctionCallFromISR+0x3c>)
 800fb06:	6818      	ldr	r0, [r3, #0]
 800fb08:	f107 0114 	add.w	r1, r7, #20
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	683a      	ldr	r2, [r7, #0]
 800fb10:	f7fd f91e 	bl	800cd50 <xQueueGenericSendFromISR>
 800fb14:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800fb16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3728      	adds	r7, #40	@ 0x28
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}
 800fb20:	20001228 	.word	0x20001228

0800fb24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fb24:	b480      	push	{r7}
 800fb26:	b085      	sub	sp, #20
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	60f8      	str	r0, [r7, #12]
 800fb2c:	60b9      	str	r1, [r7, #8]
 800fb2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	3b04      	subs	r3, #4
 800fb34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fb3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	3b04      	subs	r3, #4
 800fb42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fb44:	68bb      	ldr	r3, [r7, #8]
 800fb46:	f023 0201 	bic.w	r2, r3, #1
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	3b04      	subs	r3, #4
 800fb52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fb54:	4a0c      	ldr	r2, [pc, #48]	@ (800fb88 <pxPortInitialiseStack+0x64>)
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	3b14      	subs	r3, #20
 800fb5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fb60:	687a      	ldr	r2, [r7, #4]
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	3b04      	subs	r3, #4
 800fb6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	f06f 0202 	mvn.w	r2, #2
 800fb72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	3b20      	subs	r3, #32
 800fb78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3714      	adds	r7, #20
 800fb80:	46bd      	mov	sp, r7
 800fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb86:	4770      	bx	lr
 800fb88:	0800fb8d 	.word	0x0800fb8d

0800fb8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fb8c:	b480      	push	{r7}
 800fb8e:	b085      	sub	sp, #20
 800fb90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fb92:	2300      	movs	r3, #0
 800fb94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fb96:	4b13      	ldr	r3, [pc, #76]	@ (800fbe4 <prvTaskExitError+0x58>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb9e:	d00b      	beq.n	800fbb8 <prvTaskExitError+0x2c>
	__asm volatile
 800fba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fba4:	f383 8811 	msr	BASEPRI, r3
 800fba8:	f3bf 8f6f 	isb	sy
 800fbac:	f3bf 8f4f 	dsb	sy
 800fbb0:	60fb      	str	r3, [r7, #12]
}
 800fbb2:	bf00      	nop
 800fbb4:	bf00      	nop
 800fbb6:	e7fd      	b.n	800fbb4 <prvTaskExitError+0x28>
	__asm volatile
 800fbb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbbc:	f383 8811 	msr	BASEPRI, r3
 800fbc0:	f3bf 8f6f 	isb	sy
 800fbc4:	f3bf 8f4f 	dsb	sy
 800fbc8:	60bb      	str	r3, [r7, #8]
}
 800fbca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fbcc:	bf00      	nop
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d0fc      	beq.n	800fbce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fbd4:	bf00      	nop
 800fbd6:	bf00      	nop
 800fbd8:	3714      	adds	r7, #20
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe0:	4770      	bx	lr
 800fbe2:	bf00      	nop
 800fbe4:	20000288 	.word	0x20000288
	...

0800fbf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fbf0:	4b07      	ldr	r3, [pc, #28]	@ (800fc10 <pxCurrentTCBConst2>)
 800fbf2:	6819      	ldr	r1, [r3, #0]
 800fbf4:	6808      	ldr	r0, [r1, #0]
 800fbf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbfa:	f380 8809 	msr	PSP, r0
 800fbfe:	f3bf 8f6f 	isb	sy
 800fc02:	f04f 0000 	mov.w	r0, #0
 800fc06:	f380 8811 	msr	BASEPRI, r0
 800fc0a:	4770      	bx	lr
 800fc0c:	f3af 8000 	nop.w

0800fc10 <pxCurrentTCBConst2>:
 800fc10:	20000cf8 	.word	0x20000cf8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fc14:	bf00      	nop
 800fc16:	bf00      	nop

0800fc18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fc18:	4808      	ldr	r0, [pc, #32]	@ (800fc3c <prvPortStartFirstTask+0x24>)
 800fc1a:	6800      	ldr	r0, [r0, #0]
 800fc1c:	6800      	ldr	r0, [r0, #0]
 800fc1e:	f380 8808 	msr	MSP, r0
 800fc22:	f04f 0000 	mov.w	r0, #0
 800fc26:	f380 8814 	msr	CONTROL, r0
 800fc2a:	b662      	cpsie	i
 800fc2c:	b661      	cpsie	f
 800fc2e:	f3bf 8f4f 	dsb	sy
 800fc32:	f3bf 8f6f 	isb	sy
 800fc36:	df00      	svc	0
 800fc38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fc3a:	bf00      	nop
 800fc3c:	e000ed08 	.word	0xe000ed08

0800fc40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b086      	sub	sp, #24
 800fc44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fc46:	4b47      	ldr	r3, [pc, #284]	@ (800fd64 <xPortStartScheduler+0x124>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	4a47      	ldr	r2, [pc, #284]	@ (800fd68 <xPortStartScheduler+0x128>)
 800fc4c:	4293      	cmp	r3, r2
 800fc4e:	d10b      	bne.n	800fc68 <xPortStartScheduler+0x28>
	__asm volatile
 800fc50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc54:	f383 8811 	msr	BASEPRI, r3
 800fc58:	f3bf 8f6f 	isb	sy
 800fc5c:	f3bf 8f4f 	dsb	sy
 800fc60:	60fb      	str	r3, [r7, #12]
}
 800fc62:	bf00      	nop
 800fc64:	bf00      	nop
 800fc66:	e7fd      	b.n	800fc64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fc68:	4b3e      	ldr	r3, [pc, #248]	@ (800fd64 <xPortStartScheduler+0x124>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	4a3f      	ldr	r2, [pc, #252]	@ (800fd6c <xPortStartScheduler+0x12c>)
 800fc6e:	4293      	cmp	r3, r2
 800fc70:	d10b      	bne.n	800fc8a <xPortStartScheduler+0x4a>
	__asm volatile
 800fc72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc76:	f383 8811 	msr	BASEPRI, r3
 800fc7a:	f3bf 8f6f 	isb	sy
 800fc7e:	f3bf 8f4f 	dsb	sy
 800fc82:	613b      	str	r3, [r7, #16]
}
 800fc84:	bf00      	nop
 800fc86:	bf00      	nop
 800fc88:	e7fd      	b.n	800fc86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fc8a:	4b39      	ldr	r3, [pc, #228]	@ (800fd70 <xPortStartScheduler+0x130>)
 800fc8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	781b      	ldrb	r3, [r3, #0]
 800fc92:	b2db      	uxtb	r3, r3
 800fc94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	22ff      	movs	r2, #255	@ 0xff
 800fc9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	b2db      	uxtb	r3, r3
 800fca2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fca4:	78fb      	ldrb	r3, [r7, #3]
 800fca6:	b2db      	uxtb	r3, r3
 800fca8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fcac:	b2da      	uxtb	r2, r3
 800fcae:	4b31      	ldr	r3, [pc, #196]	@ (800fd74 <xPortStartScheduler+0x134>)
 800fcb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fcb2:	4b31      	ldr	r3, [pc, #196]	@ (800fd78 <xPortStartScheduler+0x138>)
 800fcb4:	2207      	movs	r2, #7
 800fcb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fcb8:	e009      	b.n	800fcce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fcba:	4b2f      	ldr	r3, [pc, #188]	@ (800fd78 <xPortStartScheduler+0x138>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	3b01      	subs	r3, #1
 800fcc0:	4a2d      	ldr	r2, [pc, #180]	@ (800fd78 <xPortStartScheduler+0x138>)
 800fcc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fcc4:	78fb      	ldrb	r3, [r7, #3]
 800fcc6:	b2db      	uxtb	r3, r3
 800fcc8:	005b      	lsls	r3, r3, #1
 800fcca:	b2db      	uxtb	r3, r3
 800fccc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fcce:	78fb      	ldrb	r3, [r7, #3]
 800fcd0:	b2db      	uxtb	r3, r3
 800fcd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fcd6:	2b80      	cmp	r3, #128	@ 0x80
 800fcd8:	d0ef      	beq.n	800fcba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fcda:	4b27      	ldr	r3, [pc, #156]	@ (800fd78 <xPortStartScheduler+0x138>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	f1c3 0307 	rsb	r3, r3, #7
 800fce2:	2b04      	cmp	r3, #4
 800fce4:	d00b      	beq.n	800fcfe <xPortStartScheduler+0xbe>
	__asm volatile
 800fce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcea:	f383 8811 	msr	BASEPRI, r3
 800fcee:	f3bf 8f6f 	isb	sy
 800fcf2:	f3bf 8f4f 	dsb	sy
 800fcf6:	60bb      	str	r3, [r7, #8]
}
 800fcf8:	bf00      	nop
 800fcfa:	bf00      	nop
 800fcfc:	e7fd      	b.n	800fcfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fcfe:	4b1e      	ldr	r3, [pc, #120]	@ (800fd78 <xPortStartScheduler+0x138>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	021b      	lsls	r3, r3, #8
 800fd04:	4a1c      	ldr	r2, [pc, #112]	@ (800fd78 <xPortStartScheduler+0x138>)
 800fd06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fd08:	4b1b      	ldr	r3, [pc, #108]	@ (800fd78 <xPortStartScheduler+0x138>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fd10:	4a19      	ldr	r2, [pc, #100]	@ (800fd78 <xPortStartScheduler+0x138>)
 800fd12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	b2da      	uxtb	r2, r3
 800fd18:	697b      	ldr	r3, [r7, #20]
 800fd1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fd1c:	4b17      	ldr	r3, [pc, #92]	@ (800fd7c <xPortStartScheduler+0x13c>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	4a16      	ldr	r2, [pc, #88]	@ (800fd7c <xPortStartScheduler+0x13c>)
 800fd22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fd26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fd28:	4b14      	ldr	r3, [pc, #80]	@ (800fd7c <xPortStartScheduler+0x13c>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	4a13      	ldr	r2, [pc, #76]	@ (800fd7c <xPortStartScheduler+0x13c>)
 800fd2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fd32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fd34:	f000 f8da 	bl	800feec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fd38:	4b11      	ldr	r3, [pc, #68]	@ (800fd80 <xPortStartScheduler+0x140>)
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fd3e:	f000 f8f9 	bl	800ff34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fd42:	4b10      	ldr	r3, [pc, #64]	@ (800fd84 <xPortStartScheduler+0x144>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	4a0f      	ldr	r2, [pc, #60]	@ (800fd84 <xPortStartScheduler+0x144>)
 800fd48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fd4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fd4e:	f7ff ff63 	bl	800fc18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fd52:	f7fe fbe9 	bl	800e528 <vTaskSwitchContext>
	prvTaskExitError();
 800fd56:	f7ff ff19 	bl	800fb8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fd5a:	2300      	movs	r3, #0
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	3718      	adds	r7, #24
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}
 800fd64:	e000ed00 	.word	0xe000ed00
 800fd68:	410fc271 	.word	0x410fc271
 800fd6c:	410fc270 	.word	0x410fc270
 800fd70:	e000e400 	.word	0xe000e400
 800fd74:	20001324 	.word	0x20001324
 800fd78:	20001328 	.word	0x20001328
 800fd7c:	e000ed20 	.word	0xe000ed20
 800fd80:	20000288 	.word	0x20000288
 800fd84:	e000ef34 	.word	0xe000ef34

0800fd88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fd88:	b480      	push	{r7}
 800fd8a:	b083      	sub	sp, #12
 800fd8c:	af00      	add	r7, sp, #0
	__asm volatile
 800fd8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd92:	f383 8811 	msr	BASEPRI, r3
 800fd96:	f3bf 8f6f 	isb	sy
 800fd9a:	f3bf 8f4f 	dsb	sy
 800fd9e:	607b      	str	r3, [r7, #4]
}
 800fda0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fda2:	4b10      	ldr	r3, [pc, #64]	@ (800fde4 <vPortEnterCritical+0x5c>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	3301      	adds	r3, #1
 800fda8:	4a0e      	ldr	r2, [pc, #56]	@ (800fde4 <vPortEnterCritical+0x5c>)
 800fdaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fdac:	4b0d      	ldr	r3, [pc, #52]	@ (800fde4 <vPortEnterCritical+0x5c>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	2b01      	cmp	r3, #1
 800fdb2:	d110      	bne.n	800fdd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fdb4:	4b0c      	ldr	r3, [pc, #48]	@ (800fde8 <vPortEnterCritical+0x60>)
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	b2db      	uxtb	r3, r3
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d00b      	beq.n	800fdd6 <vPortEnterCritical+0x4e>
	__asm volatile
 800fdbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdc2:	f383 8811 	msr	BASEPRI, r3
 800fdc6:	f3bf 8f6f 	isb	sy
 800fdca:	f3bf 8f4f 	dsb	sy
 800fdce:	603b      	str	r3, [r7, #0]
}
 800fdd0:	bf00      	nop
 800fdd2:	bf00      	nop
 800fdd4:	e7fd      	b.n	800fdd2 <vPortEnterCritical+0x4a>
	}
}
 800fdd6:	bf00      	nop
 800fdd8:	370c      	adds	r7, #12
 800fdda:	46bd      	mov	sp, r7
 800fddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde0:	4770      	bx	lr
 800fde2:	bf00      	nop
 800fde4:	20000288 	.word	0x20000288
 800fde8:	e000ed04 	.word	0xe000ed04

0800fdec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fdec:	b480      	push	{r7}
 800fdee:	b083      	sub	sp, #12
 800fdf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fdf2:	4b12      	ldr	r3, [pc, #72]	@ (800fe3c <vPortExitCritical+0x50>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d10b      	bne.n	800fe12 <vPortExitCritical+0x26>
	__asm volatile
 800fdfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdfe:	f383 8811 	msr	BASEPRI, r3
 800fe02:	f3bf 8f6f 	isb	sy
 800fe06:	f3bf 8f4f 	dsb	sy
 800fe0a:	607b      	str	r3, [r7, #4]
}
 800fe0c:	bf00      	nop
 800fe0e:	bf00      	nop
 800fe10:	e7fd      	b.n	800fe0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fe12:	4b0a      	ldr	r3, [pc, #40]	@ (800fe3c <vPortExitCritical+0x50>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	3b01      	subs	r3, #1
 800fe18:	4a08      	ldr	r2, [pc, #32]	@ (800fe3c <vPortExitCritical+0x50>)
 800fe1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fe1c:	4b07      	ldr	r3, [pc, #28]	@ (800fe3c <vPortExitCritical+0x50>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d105      	bne.n	800fe30 <vPortExitCritical+0x44>
 800fe24:	2300      	movs	r3, #0
 800fe26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	f383 8811 	msr	BASEPRI, r3
}
 800fe2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fe30:	bf00      	nop
 800fe32:	370c      	adds	r7, #12
 800fe34:	46bd      	mov	sp, r7
 800fe36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3a:	4770      	bx	lr
 800fe3c:	20000288 	.word	0x20000288

0800fe40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fe40:	f3ef 8009 	mrs	r0, PSP
 800fe44:	f3bf 8f6f 	isb	sy
 800fe48:	4b15      	ldr	r3, [pc, #84]	@ (800fea0 <pxCurrentTCBConst>)
 800fe4a:	681a      	ldr	r2, [r3, #0]
 800fe4c:	f01e 0f10 	tst.w	lr, #16
 800fe50:	bf08      	it	eq
 800fe52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fe56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe5a:	6010      	str	r0, [r2, #0]
 800fe5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fe60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fe64:	f380 8811 	msr	BASEPRI, r0
 800fe68:	f3bf 8f4f 	dsb	sy
 800fe6c:	f3bf 8f6f 	isb	sy
 800fe70:	f7fe fb5a 	bl	800e528 <vTaskSwitchContext>
 800fe74:	f04f 0000 	mov.w	r0, #0
 800fe78:	f380 8811 	msr	BASEPRI, r0
 800fe7c:	bc09      	pop	{r0, r3}
 800fe7e:	6819      	ldr	r1, [r3, #0]
 800fe80:	6808      	ldr	r0, [r1, #0]
 800fe82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe86:	f01e 0f10 	tst.w	lr, #16
 800fe8a:	bf08      	it	eq
 800fe8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fe90:	f380 8809 	msr	PSP, r0
 800fe94:	f3bf 8f6f 	isb	sy
 800fe98:	4770      	bx	lr
 800fe9a:	bf00      	nop
 800fe9c:	f3af 8000 	nop.w

0800fea0 <pxCurrentTCBConst>:
 800fea0:	20000cf8 	.word	0x20000cf8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fea4:	bf00      	nop
 800fea6:	bf00      	nop

0800fea8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b082      	sub	sp, #8
 800feac:	af00      	add	r7, sp, #0
	__asm volatile
 800feae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feb2:	f383 8811 	msr	BASEPRI, r3
 800feb6:	f3bf 8f6f 	isb	sy
 800feba:	f3bf 8f4f 	dsb	sy
 800febe:	607b      	str	r3, [r7, #4]
}
 800fec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fec2:	f7fe fa77 	bl	800e3b4 <xTaskIncrementTick>
 800fec6:	4603      	mov	r3, r0
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d003      	beq.n	800fed4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fecc:	4b06      	ldr	r3, [pc, #24]	@ (800fee8 <xPortSysTickHandler+0x40>)
 800fece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fed2:	601a      	str	r2, [r3, #0]
 800fed4:	2300      	movs	r3, #0
 800fed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	f383 8811 	msr	BASEPRI, r3
}
 800fede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fee0:	bf00      	nop
 800fee2:	3708      	adds	r7, #8
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd80      	pop	{r7, pc}
 800fee8:	e000ed04 	.word	0xe000ed04

0800feec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800feec:	b480      	push	{r7}
 800feee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fef0:	4b0b      	ldr	r3, [pc, #44]	@ (800ff20 <vPortSetupTimerInterrupt+0x34>)
 800fef2:	2200      	movs	r2, #0
 800fef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fef6:	4b0b      	ldr	r3, [pc, #44]	@ (800ff24 <vPortSetupTimerInterrupt+0x38>)
 800fef8:	2200      	movs	r2, #0
 800fefa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fefc:	4b0a      	ldr	r3, [pc, #40]	@ (800ff28 <vPortSetupTimerInterrupt+0x3c>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	4a0a      	ldr	r2, [pc, #40]	@ (800ff2c <vPortSetupTimerInterrupt+0x40>)
 800ff02:	fba2 2303 	umull	r2, r3, r2, r3
 800ff06:	099b      	lsrs	r3, r3, #6
 800ff08:	4a09      	ldr	r2, [pc, #36]	@ (800ff30 <vPortSetupTimerInterrupt+0x44>)
 800ff0a:	3b01      	subs	r3, #1
 800ff0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ff0e:	4b04      	ldr	r3, [pc, #16]	@ (800ff20 <vPortSetupTimerInterrupt+0x34>)
 800ff10:	2207      	movs	r2, #7
 800ff12:	601a      	str	r2, [r3, #0]
}
 800ff14:	bf00      	nop
 800ff16:	46bd      	mov	sp, r7
 800ff18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1c:	4770      	bx	lr
 800ff1e:	bf00      	nop
 800ff20:	e000e010 	.word	0xe000e010
 800ff24:	e000e018 	.word	0xe000e018
 800ff28:	2000025c 	.word	0x2000025c
 800ff2c:	10624dd3 	.word	0x10624dd3
 800ff30:	e000e014 	.word	0xe000e014

0800ff34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ff34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ff44 <vPortEnableVFP+0x10>
 800ff38:	6801      	ldr	r1, [r0, #0]
 800ff3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ff3e:	6001      	str	r1, [r0, #0]
 800ff40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ff42:	bf00      	nop
 800ff44:	e000ed88 	.word	0xe000ed88

0800ff48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ff48:	b480      	push	{r7}
 800ff4a:	b085      	sub	sp, #20
 800ff4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ff4e:	f3ef 8305 	mrs	r3, IPSR
 800ff52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	2b0f      	cmp	r3, #15
 800ff58:	d915      	bls.n	800ff86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ff5a:	4a18      	ldr	r2, [pc, #96]	@ (800ffbc <vPortValidateInterruptPriority+0x74>)
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	4413      	add	r3, r2
 800ff60:	781b      	ldrb	r3, [r3, #0]
 800ff62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ff64:	4b16      	ldr	r3, [pc, #88]	@ (800ffc0 <vPortValidateInterruptPriority+0x78>)
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	7afa      	ldrb	r2, [r7, #11]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d20b      	bcs.n	800ff86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ff6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff72:	f383 8811 	msr	BASEPRI, r3
 800ff76:	f3bf 8f6f 	isb	sy
 800ff7a:	f3bf 8f4f 	dsb	sy
 800ff7e:	607b      	str	r3, [r7, #4]
}
 800ff80:	bf00      	nop
 800ff82:	bf00      	nop
 800ff84:	e7fd      	b.n	800ff82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ff86:	4b0f      	ldr	r3, [pc, #60]	@ (800ffc4 <vPortValidateInterruptPriority+0x7c>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ff8e:	4b0e      	ldr	r3, [pc, #56]	@ (800ffc8 <vPortValidateInterruptPriority+0x80>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	429a      	cmp	r2, r3
 800ff94:	d90b      	bls.n	800ffae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ff96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff9a:	f383 8811 	msr	BASEPRI, r3
 800ff9e:	f3bf 8f6f 	isb	sy
 800ffa2:	f3bf 8f4f 	dsb	sy
 800ffa6:	603b      	str	r3, [r7, #0]
}
 800ffa8:	bf00      	nop
 800ffaa:	bf00      	nop
 800ffac:	e7fd      	b.n	800ffaa <vPortValidateInterruptPriority+0x62>
	}
 800ffae:	bf00      	nop
 800ffb0:	3714      	adds	r7, #20
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb8:	4770      	bx	lr
 800ffba:	bf00      	nop
 800ffbc:	e000e3f0 	.word	0xe000e3f0
 800ffc0:	20001324 	.word	0x20001324
 800ffc4:	e000ed0c 	.word	0xe000ed0c
 800ffc8:	20001328 	.word	0x20001328

0800ffcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b08a      	sub	sp, #40	@ 0x28
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ffd8:	f7fe f85c 	bl	800e094 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ffdc:	4b5c      	ldr	r3, [pc, #368]	@ (8010150 <pvPortMalloc+0x184>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d101      	bne.n	800ffe8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ffe4:	f000 f924 	bl	8010230 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ffe8:	4b5a      	ldr	r3, [pc, #360]	@ (8010154 <pvPortMalloc+0x188>)
 800ffea:	681a      	ldr	r2, [r3, #0]
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	4013      	ands	r3, r2
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	f040 8095 	bne.w	8010120 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d01e      	beq.n	801003a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fffc:	2208      	movs	r2, #8
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	4413      	add	r3, r2
 8010002:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f003 0307 	and.w	r3, r3, #7
 801000a:	2b00      	cmp	r3, #0
 801000c:	d015      	beq.n	801003a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	f023 0307 	bic.w	r3, r3, #7
 8010014:	3308      	adds	r3, #8
 8010016:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f003 0307 	and.w	r3, r3, #7
 801001e:	2b00      	cmp	r3, #0
 8010020:	d00b      	beq.n	801003a <pvPortMalloc+0x6e>
	__asm volatile
 8010022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010026:	f383 8811 	msr	BASEPRI, r3
 801002a:	f3bf 8f6f 	isb	sy
 801002e:	f3bf 8f4f 	dsb	sy
 8010032:	617b      	str	r3, [r7, #20]
}
 8010034:	bf00      	nop
 8010036:	bf00      	nop
 8010038:	e7fd      	b.n	8010036 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d06f      	beq.n	8010120 <pvPortMalloc+0x154>
 8010040:	4b45      	ldr	r3, [pc, #276]	@ (8010158 <pvPortMalloc+0x18c>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	687a      	ldr	r2, [r7, #4]
 8010046:	429a      	cmp	r2, r3
 8010048:	d86a      	bhi.n	8010120 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801004a:	4b44      	ldr	r3, [pc, #272]	@ (801015c <pvPortMalloc+0x190>)
 801004c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801004e:	4b43      	ldr	r3, [pc, #268]	@ (801015c <pvPortMalloc+0x190>)
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010054:	e004      	b.n	8010060 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010058:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801005a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010062:	685b      	ldr	r3, [r3, #4]
 8010064:	687a      	ldr	r2, [r7, #4]
 8010066:	429a      	cmp	r2, r3
 8010068:	d903      	bls.n	8010072 <pvPortMalloc+0xa6>
 801006a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d1f1      	bne.n	8010056 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010072:	4b37      	ldr	r3, [pc, #220]	@ (8010150 <pvPortMalloc+0x184>)
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010078:	429a      	cmp	r2, r3
 801007a:	d051      	beq.n	8010120 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801007c:	6a3b      	ldr	r3, [r7, #32]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	2208      	movs	r2, #8
 8010082:	4413      	add	r3, r2
 8010084:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010088:	681a      	ldr	r2, [r3, #0]
 801008a:	6a3b      	ldr	r3, [r7, #32]
 801008c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801008e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010090:	685a      	ldr	r2, [r3, #4]
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	1ad2      	subs	r2, r2, r3
 8010096:	2308      	movs	r3, #8
 8010098:	005b      	lsls	r3, r3, #1
 801009a:	429a      	cmp	r2, r3
 801009c:	d920      	bls.n	80100e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801009e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	4413      	add	r3, r2
 80100a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80100a6:	69bb      	ldr	r3, [r7, #24]
 80100a8:	f003 0307 	and.w	r3, r3, #7
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d00b      	beq.n	80100c8 <pvPortMalloc+0xfc>
	__asm volatile
 80100b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100b4:	f383 8811 	msr	BASEPRI, r3
 80100b8:	f3bf 8f6f 	isb	sy
 80100bc:	f3bf 8f4f 	dsb	sy
 80100c0:	613b      	str	r3, [r7, #16]
}
 80100c2:	bf00      	nop
 80100c4:	bf00      	nop
 80100c6:	e7fd      	b.n	80100c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80100c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100ca:	685a      	ldr	r2, [r3, #4]
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	1ad2      	subs	r2, r2, r3
 80100d0:	69bb      	ldr	r3, [r7, #24]
 80100d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80100d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100d6:	687a      	ldr	r2, [r7, #4]
 80100d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80100da:	69b8      	ldr	r0, [r7, #24]
 80100dc:	f000 f90a 	bl	80102f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80100e0:	4b1d      	ldr	r3, [pc, #116]	@ (8010158 <pvPortMalloc+0x18c>)
 80100e2:	681a      	ldr	r2, [r3, #0]
 80100e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100e6:	685b      	ldr	r3, [r3, #4]
 80100e8:	1ad3      	subs	r3, r2, r3
 80100ea:	4a1b      	ldr	r2, [pc, #108]	@ (8010158 <pvPortMalloc+0x18c>)
 80100ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80100ee:	4b1a      	ldr	r3, [pc, #104]	@ (8010158 <pvPortMalloc+0x18c>)
 80100f0:	681a      	ldr	r2, [r3, #0]
 80100f2:	4b1b      	ldr	r3, [pc, #108]	@ (8010160 <pvPortMalloc+0x194>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d203      	bcs.n	8010102 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80100fa:	4b17      	ldr	r3, [pc, #92]	@ (8010158 <pvPortMalloc+0x18c>)
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	4a18      	ldr	r2, [pc, #96]	@ (8010160 <pvPortMalloc+0x194>)
 8010100:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010104:	685a      	ldr	r2, [r3, #4]
 8010106:	4b13      	ldr	r3, [pc, #76]	@ (8010154 <pvPortMalloc+0x188>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	431a      	orrs	r2, r3
 801010c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801010e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010112:	2200      	movs	r2, #0
 8010114:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010116:	4b13      	ldr	r3, [pc, #76]	@ (8010164 <pvPortMalloc+0x198>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	3301      	adds	r3, #1
 801011c:	4a11      	ldr	r2, [pc, #68]	@ (8010164 <pvPortMalloc+0x198>)
 801011e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010120:	f7fd ffc6 	bl	800e0b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010124:	69fb      	ldr	r3, [r7, #28]
 8010126:	f003 0307 	and.w	r3, r3, #7
 801012a:	2b00      	cmp	r3, #0
 801012c:	d00b      	beq.n	8010146 <pvPortMalloc+0x17a>
	__asm volatile
 801012e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010132:	f383 8811 	msr	BASEPRI, r3
 8010136:	f3bf 8f6f 	isb	sy
 801013a:	f3bf 8f4f 	dsb	sy
 801013e:	60fb      	str	r3, [r7, #12]
}
 8010140:	bf00      	nop
 8010142:	bf00      	nop
 8010144:	e7fd      	b.n	8010142 <pvPortMalloc+0x176>
	return pvReturn;
 8010146:	69fb      	ldr	r3, [r7, #28]
}
 8010148:	4618      	mov	r0, r3
 801014a:	3728      	adds	r7, #40	@ 0x28
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}
 8010150:	20010d34 	.word	0x20010d34
 8010154:	20010d48 	.word	0x20010d48
 8010158:	20010d38 	.word	0x20010d38
 801015c:	20010d2c 	.word	0x20010d2c
 8010160:	20010d3c 	.word	0x20010d3c
 8010164:	20010d40 	.word	0x20010d40

08010168 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b086      	sub	sp, #24
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d04f      	beq.n	801021a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801017a:	2308      	movs	r3, #8
 801017c:	425b      	negs	r3, r3
 801017e:	697a      	ldr	r2, [r7, #20]
 8010180:	4413      	add	r3, r2
 8010182:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010184:	697b      	ldr	r3, [r7, #20]
 8010186:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010188:	693b      	ldr	r3, [r7, #16]
 801018a:	685a      	ldr	r2, [r3, #4]
 801018c:	4b25      	ldr	r3, [pc, #148]	@ (8010224 <vPortFree+0xbc>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	4013      	ands	r3, r2
 8010192:	2b00      	cmp	r3, #0
 8010194:	d10b      	bne.n	80101ae <vPortFree+0x46>
	__asm volatile
 8010196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801019a:	f383 8811 	msr	BASEPRI, r3
 801019e:	f3bf 8f6f 	isb	sy
 80101a2:	f3bf 8f4f 	dsb	sy
 80101a6:	60fb      	str	r3, [r7, #12]
}
 80101a8:	bf00      	nop
 80101aa:	bf00      	nop
 80101ac:	e7fd      	b.n	80101aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80101ae:	693b      	ldr	r3, [r7, #16]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d00b      	beq.n	80101ce <vPortFree+0x66>
	__asm volatile
 80101b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101ba:	f383 8811 	msr	BASEPRI, r3
 80101be:	f3bf 8f6f 	isb	sy
 80101c2:	f3bf 8f4f 	dsb	sy
 80101c6:	60bb      	str	r3, [r7, #8]
}
 80101c8:	bf00      	nop
 80101ca:	bf00      	nop
 80101cc:	e7fd      	b.n	80101ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80101ce:	693b      	ldr	r3, [r7, #16]
 80101d0:	685a      	ldr	r2, [r3, #4]
 80101d2:	4b14      	ldr	r3, [pc, #80]	@ (8010224 <vPortFree+0xbc>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	4013      	ands	r3, r2
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d01e      	beq.n	801021a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80101dc:	693b      	ldr	r3, [r7, #16]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d11a      	bne.n	801021a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80101e4:	693b      	ldr	r3, [r7, #16]
 80101e6:	685a      	ldr	r2, [r3, #4]
 80101e8:	4b0e      	ldr	r3, [pc, #56]	@ (8010224 <vPortFree+0xbc>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	43db      	mvns	r3, r3
 80101ee:	401a      	ands	r2, r3
 80101f0:	693b      	ldr	r3, [r7, #16]
 80101f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80101f4:	f7fd ff4e 	bl	800e094 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80101f8:	693b      	ldr	r3, [r7, #16]
 80101fa:	685a      	ldr	r2, [r3, #4]
 80101fc:	4b0a      	ldr	r3, [pc, #40]	@ (8010228 <vPortFree+0xc0>)
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	4413      	add	r3, r2
 8010202:	4a09      	ldr	r2, [pc, #36]	@ (8010228 <vPortFree+0xc0>)
 8010204:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010206:	6938      	ldr	r0, [r7, #16]
 8010208:	f000 f874 	bl	80102f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801020c:	4b07      	ldr	r3, [pc, #28]	@ (801022c <vPortFree+0xc4>)
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	3301      	adds	r3, #1
 8010212:	4a06      	ldr	r2, [pc, #24]	@ (801022c <vPortFree+0xc4>)
 8010214:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010216:	f7fd ff4b 	bl	800e0b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801021a:	bf00      	nop
 801021c:	3718      	adds	r7, #24
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}
 8010222:	bf00      	nop
 8010224:	20010d48 	.word	0x20010d48
 8010228:	20010d38 	.word	0x20010d38
 801022c:	20010d44 	.word	0x20010d44

08010230 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010230:	b480      	push	{r7}
 8010232:	b085      	sub	sp, #20
 8010234:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010236:	f44f 437a 	mov.w	r3, #64000	@ 0xfa00
 801023a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801023c:	4b27      	ldr	r3, [pc, #156]	@ (80102dc <prvHeapInit+0xac>)
 801023e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	f003 0307 	and.w	r3, r3, #7
 8010246:	2b00      	cmp	r3, #0
 8010248:	d00c      	beq.n	8010264 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	3307      	adds	r3, #7
 801024e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	f023 0307 	bic.w	r3, r3, #7
 8010256:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010258:	68ba      	ldr	r2, [r7, #8]
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	1ad3      	subs	r3, r2, r3
 801025e:	4a1f      	ldr	r2, [pc, #124]	@ (80102dc <prvHeapInit+0xac>)
 8010260:	4413      	add	r3, r2
 8010262:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010268:	4a1d      	ldr	r2, [pc, #116]	@ (80102e0 <prvHeapInit+0xb0>)
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801026e:	4b1c      	ldr	r3, [pc, #112]	@ (80102e0 <prvHeapInit+0xb0>)
 8010270:	2200      	movs	r2, #0
 8010272:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	68ba      	ldr	r2, [r7, #8]
 8010278:	4413      	add	r3, r2
 801027a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801027c:	2208      	movs	r2, #8
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	1a9b      	subs	r3, r3, r2
 8010282:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	f023 0307 	bic.w	r3, r3, #7
 801028a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	4a15      	ldr	r2, [pc, #84]	@ (80102e4 <prvHeapInit+0xb4>)
 8010290:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010292:	4b14      	ldr	r3, [pc, #80]	@ (80102e4 <prvHeapInit+0xb4>)
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	2200      	movs	r2, #0
 8010298:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801029a:	4b12      	ldr	r3, [pc, #72]	@ (80102e4 <prvHeapInit+0xb4>)
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	2200      	movs	r2, #0
 80102a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	68fa      	ldr	r2, [r7, #12]
 80102aa:	1ad2      	subs	r2, r2, r3
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80102b0:	4b0c      	ldr	r3, [pc, #48]	@ (80102e4 <prvHeapInit+0xb4>)
 80102b2:	681a      	ldr	r2, [r3, #0]
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	685b      	ldr	r3, [r3, #4]
 80102bc:	4a0a      	ldr	r2, [pc, #40]	@ (80102e8 <prvHeapInit+0xb8>)
 80102be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	685b      	ldr	r3, [r3, #4]
 80102c4:	4a09      	ldr	r2, [pc, #36]	@ (80102ec <prvHeapInit+0xbc>)
 80102c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80102c8:	4b09      	ldr	r3, [pc, #36]	@ (80102f0 <prvHeapInit+0xc0>)
 80102ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80102ce:	601a      	str	r2, [r3, #0]
}
 80102d0:	bf00      	nop
 80102d2:	3714      	adds	r7, #20
 80102d4:	46bd      	mov	sp, r7
 80102d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102da:	4770      	bx	lr
 80102dc:	2000132c 	.word	0x2000132c
 80102e0:	20010d2c 	.word	0x20010d2c
 80102e4:	20010d34 	.word	0x20010d34
 80102e8:	20010d3c 	.word	0x20010d3c
 80102ec:	20010d38 	.word	0x20010d38
 80102f0:	20010d48 	.word	0x20010d48

080102f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80102f4:	b480      	push	{r7}
 80102f6:	b085      	sub	sp, #20
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80102fc:	4b28      	ldr	r3, [pc, #160]	@ (80103a0 <prvInsertBlockIntoFreeList+0xac>)
 80102fe:	60fb      	str	r3, [r7, #12]
 8010300:	e002      	b.n	8010308 <prvInsertBlockIntoFreeList+0x14>
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	60fb      	str	r3, [r7, #12]
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	687a      	ldr	r2, [r7, #4]
 801030e:	429a      	cmp	r2, r3
 8010310:	d8f7      	bhi.n	8010302 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	685b      	ldr	r3, [r3, #4]
 801031a:	68ba      	ldr	r2, [r7, #8]
 801031c:	4413      	add	r3, r2
 801031e:	687a      	ldr	r2, [r7, #4]
 8010320:	429a      	cmp	r2, r3
 8010322:	d108      	bne.n	8010336 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	685a      	ldr	r2, [r3, #4]
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	685b      	ldr	r3, [r3, #4]
 801032c:	441a      	add	r2, r3
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	685b      	ldr	r3, [r3, #4]
 801033e:	68ba      	ldr	r2, [r7, #8]
 8010340:	441a      	add	r2, r3
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	429a      	cmp	r2, r3
 8010348:	d118      	bne.n	801037c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	681a      	ldr	r2, [r3, #0]
 801034e:	4b15      	ldr	r3, [pc, #84]	@ (80103a4 <prvInsertBlockIntoFreeList+0xb0>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	429a      	cmp	r2, r3
 8010354:	d00d      	beq.n	8010372 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	685a      	ldr	r2, [r3, #4]
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	685b      	ldr	r3, [r3, #4]
 8010360:	441a      	add	r2, r3
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	681a      	ldr	r2, [r3, #0]
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	601a      	str	r2, [r3, #0]
 8010370:	e008      	b.n	8010384 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010372:	4b0c      	ldr	r3, [pc, #48]	@ (80103a4 <prvInsertBlockIntoFreeList+0xb0>)
 8010374:	681a      	ldr	r2, [r3, #0]
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	601a      	str	r2, [r3, #0]
 801037a:	e003      	b.n	8010384 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	681a      	ldr	r2, [r3, #0]
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010384:	68fa      	ldr	r2, [r7, #12]
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	429a      	cmp	r2, r3
 801038a:	d002      	beq.n	8010392 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	687a      	ldr	r2, [r7, #4]
 8010390:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010392:	bf00      	nop
 8010394:	3714      	adds	r7, #20
 8010396:	46bd      	mov	sp, r7
 8010398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039c:	4770      	bx	lr
 801039e:	bf00      	nop
 80103a0:	20010d2c 	.word	0x20010d2c
 80103a4:	20010d34 	.word	0x20010d34

080103a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80103ac:	2201      	movs	r2, #1
 80103ae:	490e      	ldr	r1, [pc, #56]	@ (80103e8 <MX_USB_HOST_Init+0x40>)
 80103b0:	480e      	ldr	r0, [pc, #56]	@ (80103ec <MX_USB_HOST_Init+0x44>)
 80103b2:	f7f9 feb7 	bl	800a124 <USBH_Init>
 80103b6:	4603      	mov	r3, r0
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d001      	beq.n	80103c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80103bc:	f7f2 f93e 	bl	800263c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80103c0:	490b      	ldr	r1, [pc, #44]	@ (80103f0 <MX_USB_HOST_Init+0x48>)
 80103c2:	480a      	ldr	r0, [pc, #40]	@ (80103ec <MX_USB_HOST_Init+0x44>)
 80103c4:	f7f9 ff7b 	bl	800a2be <USBH_RegisterClass>
 80103c8:	4603      	mov	r3, r0
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d001      	beq.n	80103d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80103ce:	f7f2 f935 	bl	800263c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80103d2:	4806      	ldr	r0, [pc, #24]	@ (80103ec <MX_USB_HOST_Init+0x44>)
 80103d4:	f7f9 ffff 	bl	800a3d6 <USBH_Start>
 80103d8:	4603      	mov	r3, r0
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d001      	beq.n	80103e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80103de:	f7f2 f92d 	bl	800263c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80103e2:	bf00      	nop
 80103e4:	bd80      	pop	{r7, pc}
 80103e6:	bf00      	nop
 80103e8:	080103f5 	.word	0x080103f5
 80103ec:	20010d4c 	.word	0x20010d4c
 80103f0:	20000268 	.word	0x20000268

080103f4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80103f4:	b480      	push	{r7}
 80103f6:	b083      	sub	sp, #12
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
 80103fc:	460b      	mov	r3, r1
 80103fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010400:	78fb      	ldrb	r3, [r7, #3]
 8010402:	3b01      	subs	r3, #1
 8010404:	2b04      	cmp	r3, #4
 8010406:	d819      	bhi.n	801043c <USBH_UserProcess+0x48>
 8010408:	a201      	add	r2, pc, #4	@ (adr r2, 8010410 <USBH_UserProcess+0x1c>)
 801040a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801040e:	bf00      	nop
 8010410:	0801043d 	.word	0x0801043d
 8010414:	0801042d 	.word	0x0801042d
 8010418:	0801043d 	.word	0x0801043d
 801041c:	08010435 	.word	0x08010435
 8010420:	08010425 	.word	0x08010425
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010424:	4b09      	ldr	r3, [pc, #36]	@ (801044c <USBH_UserProcess+0x58>)
 8010426:	2203      	movs	r2, #3
 8010428:	701a      	strb	r2, [r3, #0]
  break;
 801042a:	e008      	b.n	801043e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801042c:	4b07      	ldr	r3, [pc, #28]	@ (801044c <USBH_UserProcess+0x58>)
 801042e:	2202      	movs	r2, #2
 8010430:	701a      	strb	r2, [r3, #0]
  break;
 8010432:	e004      	b.n	801043e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010434:	4b05      	ldr	r3, [pc, #20]	@ (801044c <USBH_UserProcess+0x58>)
 8010436:	2201      	movs	r2, #1
 8010438:	701a      	strb	r2, [r3, #0]
  break;
 801043a:	e000      	b.n	801043e <USBH_UserProcess+0x4a>

  default:
  break;
 801043c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801043e:	bf00      	nop
 8010440:	370c      	adds	r7, #12
 8010442:	46bd      	mov	sp, r7
 8010444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010448:	4770      	bx	lr
 801044a:	bf00      	nop
 801044c:	20011130 	.word	0x20011130

08010450 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b08a      	sub	sp, #40	@ 0x28
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010458:	f107 0314 	add.w	r3, r7, #20
 801045c:	2200      	movs	r2, #0
 801045e:	601a      	str	r2, [r3, #0]
 8010460:	605a      	str	r2, [r3, #4]
 8010462:	609a      	str	r2, [r3, #8]
 8010464:	60da      	str	r2, [r3, #12]
 8010466:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010470:	d147      	bne.n	8010502 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010472:	2300      	movs	r3, #0
 8010474:	613b      	str	r3, [r7, #16]
 8010476:	4b25      	ldr	r3, [pc, #148]	@ (801050c <HAL_HCD_MspInit+0xbc>)
 8010478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801047a:	4a24      	ldr	r2, [pc, #144]	@ (801050c <HAL_HCD_MspInit+0xbc>)
 801047c:	f043 0301 	orr.w	r3, r3, #1
 8010480:	6313      	str	r3, [r2, #48]	@ 0x30
 8010482:	4b22      	ldr	r3, [pc, #136]	@ (801050c <HAL_HCD_MspInit+0xbc>)
 8010484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010486:	f003 0301 	and.w	r3, r3, #1
 801048a:	613b      	str	r3, [r7, #16]
 801048c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 801048e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010494:	2300      	movs	r3, #0
 8010496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010498:	2300      	movs	r3, #0
 801049a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 801049c:	f107 0314 	add.w	r3, r7, #20
 80104a0:	4619      	mov	r1, r3
 80104a2:	481b      	ldr	r0, [pc, #108]	@ (8010510 <HAL_HCD_MspInit+0xc0>)
 80104a4:	f7f2 fe5c 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80104a8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80104ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80104ae:	2302      	movs	r3, #2
 80104b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80104b2:	2300      	movs	r3, #0
 80104b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80104b6:	2300      	movs	r3, #0
 80104b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80104ba:	230a      	movs	r3, #10
 80104bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80104be:	f107 0314 	add.w	r3, r7, #20
 80104c2:	4619      	mov	r1, r3
 80104c4:	4812      	ldr	r0, [pc, #72]	@ (8010510 <HAL_HCD_MspInit+0xc0>)
 80104c6:	f7f2 fe4b 	bl	8003160 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80104ca:	4b10      	ldr	r3, [pc, #64]	@ (801050c <HAL_HCD_MspInit+0xbc>)
 80104cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80104ce:	4a0f      	ldr	r2, [pc, #60]	@ (801050c <HAL_HCD_MspInit+0xbc>)
 80104d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80104d4:	6353      	str	r3, [r2, #52]	@ 0x34
 80104d6:	2300      	movs	r3, #0
 80104d8:	60fb      	str	r3, [r7, #12]
 80104da:	4b0c      	ldr	r3, [pc, #48]	@ (801050c <HAL_HCD_MspInit+0xbc>)
 80104dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104de:	4a0b      	ldr	r2, [pc, #44]	@ (801050c <HAL_HCD_MspInit+0xbc>)
 80104e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80104e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80104e6:	4b09      	ldr	r3, [pc, #36]	@ (801050c <HAL_HCD_MspInit+0xbc>)
 80104e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80104ee:	60fb      	str	r3, [r7, #12]
 80104f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80104f2:	2200      	movs	r2, #0
 80104f4:	2105      	movs	r1, #5
 80104f6:	2043      	movs	r0, #67	@ 0x43
 80104f8:	f7f2 fd76 	bl	8002fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80104fc:	2043      	movs	r0, #67	@ 0x43
 80104fe:	f7f2 fd8f 	bl	8003020 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010502:	bf00      	nop
 8010504:	3728      	adds	r7, #40	@ 0x28
 8010506:	46bd      	mov	sp, r7
 8010508:	bd80      	pop	{r7, pc}
 801050a:	bf00      	nop
 801050c:	40023800 	.word	0x40023800
 8010510:	40020000 	.word	0x40020000

08010514 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b082      	sub	sp, #8
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010522:	4618      	mov	r0, r3
 8010524:	f7fa fb8f 	bl	800ac46 <USBH_LL_IncTimer>
}
 8010528:	bf00      	nop
 801052a:	3708      	adds	r7, #8
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}

08010530 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b082      	sub	sp, #8
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801053e:	4618      	mov	r0, r3
 8010540:	f7fa fbcf 	bl	800ace2 <USBH_LL_Connect>
}
 8010544:	bf00      	nop
 8010546:	3708      	adds	r7, #8
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}

0801054c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b082      	sub	sp, #8
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801055a:	4618      	mov	r0, r3
 801055c:	f7fa fbdc 	bl	800ad18 <USBH_LL_Disconnect>
}
 8010560:	bf00      	nop
 8010562:	3708      	adds	r7, #8
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}

08010568 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b082      	sub	sp, #8
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	460b      	mov	r3, r1
 8010572:	70fb      	strb	r3, [r7, #3]
 8010574:	4613      	mov	r3, r2
 8010576:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801057e:	4618      	mov	r0, r3
 8010580:	f7fa fc2f 	bl	800ade2 <USBH_LL_NotifyURBChange>
#endif
}
 8010584:	bf00      	nop
 8010586:	3708      	adds	r7, #8
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}

0801058c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b082      	sub	sp, #8
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801059a:	4618      	mov	r0, r3
 801059c:	f7fa fb7d 	bl	800ac9a <USBH_LL_PortEnabled>
}
 80105a0:	bf00      	nop
 80105a2:	3708      	adds	r7, #8
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}

080105a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b082      	sub	sp, #8
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7fa fb81 	bl	800acbe <USBH_LL_PortDisabled>
}
 80105bc:	bf00      	nop
 80105be:	3708      	adds	r7, #8
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}

080105c4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b082      	sub	sp, #8
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80105d2:	2b01      	cmp	r3, #1
 80105d4:	d12a      	bne.n	801062c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80105d6:	4a18      	ldr	r2, [pc, #96]	@ (8010638 <USBH_LL_Init+0x74>)
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	4a15      	ldr	r2, [pc, #84]	@ (8010638 <USBH_LL_Init+0x74>)
 80105e2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80105e6:	4b14      	ldr	r3, [pc, #80]	@ (8010638 <USBH_LL_Init+0x74>)
 80105e8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80105ec:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80105ee:	4b12      	ldr	r3, [pc, #72]	@ (8010638 <USBH_LL_Init+0x74>)
 80105f0:	2208      	movs	r2, #8
 80105f2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80105f4:	4b10      	ldr	r3, [pc, #64]	@ (8010638 <USBH_LL_Init+0x74>)
 80105f6:	2201      	movs	r2, #1
 80105f8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80105fa:	4b0f      	ldr	r3, [pc, #60]	@ (8010638 <USBH_LL_Init+0x74>)
 80105fc:	2200      	movs	r2, #0
 80105fe:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010600:	4b0d      	ldr	r3, [pc, #52]	@ (8010638 <USBH_LL_Init+0x74>)
 8010602:	2202      	movs	r2, #2
 8010604:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010606:	4b0c      	ldr	r3, [pc, #48]	@ (8010638 <USBH_LL_Init+0x74>)
 8010608:	2200      	movs	r2, #0
 801060a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801060c:	480a      	ldr	r0, [pc, #40]	@ (8010638 <USBH_LL_Init+0x74>)
 801060e:	f7f2 ffb2 	bl	8003576 <HAL_HCD_Init>
 8010612:	4603      	mov	r3, r0
 8010614:	2b00      	cmp	r3, #0
 8010616:	d001      	beq.n	801061c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010618:	f7f2 f810 	bl	800263c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801061c:	4806      	ldr	r0, [pc, #24]	@ (8010638 <USBH_LL_Init+0x74>)
 801061e:	f7f3 fc13 	bl	8003e48 <HAL_HCD_GetCurrentFrame>
 8010622:	4603      	mov	r3, r0
 8010624:	4619      	mov	r1, r3
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	f7fa fafe 	bl	800ac28 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801062c:	2300      	movs	r3, #0
}
 801062e:	4618      	mov	r0, r3
 8010630:	3708      	adds	r7, #8
 8010632:	46bd      	mov	sp, r7
 8010634:	bd80      	pop	{r7, pc}
 8010636:	bf00      	nop
 8010638:	20011134 	.word	0x20011134

0801063c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b084      	sub	sp, #16
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010644:	2300      	movs	r3, #0
 8010646:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010648:	2300      	movs	r3, #0
 801064a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010652:	4618      	mov	r0, r3
 8010654:	f7f3 fb80 	bl	8003d58 <HAL_HCD_Start>
 8010658:	4603      	mov	r3, r0
 801065a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801065c:	7bfb      	ldrb	r3, [r7, #15]
 801065e:	4618      	mov	r0, r3
 8010660:	f000 f95e 	bl	8010920 <USBH_Get_USB_Status>
 8010664:	4603      	mov	r3, r0
 8010666:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010668:	7bbb      	ldrb	r3, [r7, #14]
}
 801066a:	4618      	mov	r0, r3
 801066c:	3710      	adds	r7, #16
 801066e:	46bd      	mov	sp, r7
 8010670:	bd80      	pop	{r7, pc}

08010672 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010672:	b580      	push	{r7, lr}
 8010674:	b084      	sub	sp, #16
 8010676:	af00      	add	r7, sp, #0
 8010678:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801067a:	2300      	movs	r3, #0
 801067c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801067e:	2300      	movs	r3, #0
 8010680:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010688:	4618      	mov	r0, r3
 801068a:	f7f3 fb88 	bl	8003d9e <HAL_HCD_Stop>
 801068e:	4603      	mov	r3, r0
 8010690:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010692:	7bfb      	ldrb	r3, [r7, #15]
 8010694:	4618      	mov	r0, r3
 8010696:	f000 f943 	bl	8010920 <USBH_Get_USB_Status>
 801069a:	4603      	mov	r3, r0
 801069c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801069e:	7bbb      	ldrb	r3, [r7, #14]
}
 80106a0:	4618      	mov	r0, r3
 80106a2:	3710      	adds	r7, #16
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd80      	pop	{r7, pc}

080106a8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b084      	sub	sp, #16
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80106b0:	2301      	movs	r3, #1
 80106b2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80106ba:	4618      	mov	r0, r3
 80106bc:	f7f3 fbd2 	bl	8003e64 <HAL_HCD_GetCurrentSpeed>
 80106c0:	4603      	mov	r3, r0
 80106c2:	2b02      	cmp	r3, #2
 80106c4:	d00c      	beq.n	80106e0 <USBH_LL_GetSpeed+0x38>
 80106c6:	2b02      	cmp	r3, #2
 80106c8:	d80d      	bhi.n	80106e6 <USBH_LL_GetSpeed+0x3e>
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d002      	beq.n	80106d4 <USBH_LL_GetSpeed+0x2c>
 80106ce:	2b01      	cmp	r3, #1
 80106d0:	d003      	beq.n	80106da <USBH_LL_GetSpeed+0x32>
 80106d2:	e008      	b.n	80106e6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80106d4:	2300      	movs	r3, #0
 80106d6:	73fb      	strb	r3, [r7, #15]
    break;
 80106d8:	e008      	b.n	80106ec <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80106da:	2301      	movs	r3, #1
 80106dc:	73fb      	strb	r3, [r7, #15]
    break;
 80106de:	e005      	b.n	80106ec <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80106e0:	2302      	movs	r3, #2
 80106e2:	73fb      	strb	r3, [r7, #15]
    break;
 80106e4:	e002      	b.n	80106ec <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80106e6:	2301      	movs	r3, #1
 80106e8:	73fb      	strb	r3, [r7, #15]
    break;
 80106ea:	bf00      	nop
  }
  return  speed;
 80106ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	3710      	adds	r7, #16
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}

080106f6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80106f6:	b580      	push	{r7, lr}
 80106f8:	b084      	sub	sp, #16
 80106fa:	af00      	add	r7, sp, #0
 80106fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106fe:	2300      	movs	r3, #0
 8010700:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010702:	2300      	movs	r3, #0
 8010704:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801070c:	4618      	mov	r0, r3
 801070e:	f7f3 fb63 	bl	8003dd8 <HAL_HCD_ResetPort>
 8010712:	4603      	mov	r3, r0
 8010714:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010716:	7bfb      	ldrb	r3, [r7, #15]
 8010718:	4618      	mov	r0, r3
 801071a:	f000 f901 	bl	8010920 <USBH_Get_USB_Status>
 801071e:	4603      	mov	r3, r0
 8010720:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010722:	7bbb      	ldrb	r3, [r7, #14]
}
 8010724:	4618      	mov	r0, r3
 8010726:	3710      	adds	r7, #16
 8010728:	46bd      	mov	sp, r7
 801072a:	bd80      	pop	{r7, pc}

0801072c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b082      	sub	sp, #8
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
 8010734:	460b      	mov	r3, r1
 8010736:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801073e:	78fa      	ldrb	r2, [r7, #3]
 8010740:	4611      	mov	r1, r2
 8010742:	4618      	mov	r0, r3
 8010744:	f7f3 fb6b 	bl	8003e1e <HAL_HCD_HC_GetXferCount>
 8010748:	4603      	mov	r3, r0
}
 801074a:	4618      	mov	r0, r3
 801074c:	3708      	adds	r7, #8
 801074e:	46bd      	mov	sp, r7
 8010750:	bd80      	pop	{r7, pc}

08010752 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010752:	b590      	push	{r4, r7, lr}
 8010754:	b089      	sub	sp, #36	@ 0x24
 8010756:	af04      	add	r7, sp, #16
 8010758:	6078      	str	r0, [r7, #4]
 801075a:	4608      	mov	r0, r1
 801075c:	4611      	mov	r1, r2
 801075e:	461a      	mov	r2, r3
 8010760:	4603      	mov	r3, r0
 8010762:	70fb      	strb	r3, [r7, #3]
 8010764:	460b      	mov	r3, r1
 8010766:	70bb      	strb	r3, [r7, #2]
 8010768:	4613      	mov	r3, r2
 801076a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801076c:	2300      	movs	r3, #0
 801076e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010770:	2300      	movs	r3, #0
 8010772:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801077a:	787c      	ldrb	r4, [r7, #1]
 801077c:	78ba      	ldrb	r2, [r7, #2]
 801077e:	78f9      	ldrb	r1, [r7, #3]
 8010780:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010782:	9302      	str	r3, [sp, #8]
 8010784:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010788:	9301      	str	r3, [sp, #4]
 801078a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801078e:	9300      	str	r3, [sp, #0]
 8010790:	4623      	mov	r3, r4
 8010792:	f7f2 ff57 	bl	8003644 <HAL_HCD_HC_Init>
 8010796:	4603      	mov	r3, r0
 8010798:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801079a:	7bfb      	ldrb	r3, [r7, #15]
 801079c:	4618      	mov	r0, r3
 801079e:	f000 f8bf 	bl	8010920 <USBH_Get_USB_Status>
 80107a2:	4603      	mov	r3, r0
 80107a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80107a8:	4618      	mov	r0, r3
 80107aa:	3714      	adds	r7, #20
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd90      	pop	{r4, r7, pc}

080107b0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b084      	sub	sp, #16
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
 80107b8:	460b      	mov	r3, r1
 80107ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107bc:	2300      	movs	r3, #0
 80107be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80107c0:	2300      	movs	r3, #0
 80107c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80107ca:	78fa      	ldrb	r2, [r7, #3]
 80107cc:	4611      	mov	r1, r2
 80107ce:	4618      	mov	r0, r3
 80107d0:	f7f2 fff0 	bl	80037b4 <HAL_HCD_HC_Halt>
 80107d4:	4603      	mov	r3, r0
 80107d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80107d8:	7bfb      	ldrb	r3, [r7, #15]
 80107da:	4618      	mov	r0, r3
 80107dc:	f000 f8a0 	bl	8010920 <USBH_Get_USB_Status>
 80107e0:	4603      	mov	r3, r0
 80107e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	3710      	adds	r7, #16
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}

080107ee <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80107ee:	b590      	push	{r4, r7, lr}
 80107f0:	b089      	sub	sp, #36	@ 0x24
 80107f2:	af04      	add	r7, sp, #16
 80107f4:	6078      	str	r0, [r7, #4]
 80107f6:	4608      	mov	r0, r1
 80107f8:	4611      	mov	r1, r2
 80107fa:	461a      	mov	r2, r3
 80107fc:	4603      	mov	r3, r0
 80107fe:	70fb      	strb	r3, [r7, #3]
 8010800:	460b      	mov	r3, r1
 8010802:	70bb      	strb	r3, [r7, #2]
 8010804:	4613      	mov	r3, r2
 8010806:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010808:	2300      	movs	r3, #0
 801080a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801080c:	2300      	movs	r3, #0
 801080e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8010816:	787c      	ldrb	r4, [r7, #1]
 8010818:	78ba      	ldrb	r2, [r7, #2]
 801081a:	78f9      	ldrb	r1, [r7, #3]
 801081c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010820:	9303      	str	r3, [sp, #12]
 8010822:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010824:	9302      	str	r3, [sp, #8]
 8010826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010828:	9301      	str	r3, [sp, #4]
 801082a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801082e:	9300      	str	r3, [sp, #0]
 8010830:	4623      	mov	r3, r4
 8010832:	f7f2 ffe3 	bl	80037fc <HAL_HCD_HC_SubmitRequest>
 8010836:	4603      	mov	r3, r0
 8010838:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801083a:	7bfb      	ldrb	r3, [r7, #15]
 801083c:	4618      	mov	r0, r3
 801083e:	f000 f86f 	bl	8010920 <USBH_Get_USB_Status>
 8010842:	4603      	mov	r3, r0
 8010844:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010846:	7bbb      	ldrb	r3, [r7, #14]
}
 8010848:	4618      	mov	r0, r3
 801084a:	3714      	adds	r7, #20
 801084c:	46bd      	mov	sp, r7
 801084e:	bd90      	pop	{r4, r7, pc}

08010850 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b082      	sub	sp, #8
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
 8010858:	460b      	mov	r3, r1
 801085a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010862:	78fa      	ldrb	r2, [r7, #3]
 8010864:	4611      	mov	r1, r2
 8010866:	4618      	mov	r0, r3
 8010868:	f7f3 fac4 	bl	8003df4 <HAL_HCD_HC_GetURBState>
 801086c:	4603      	mov	r3, r0
}
 801086e:	4618      	mov	r0, r3
 8010870:	3708      	adds	r7, #8
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}

08010876 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010876:	b580      	push	{r7, lr}
 8010878:	b082      	sub	sp, #8
 801087a:	af00      	add	r7, sp, #0
 801087c:	6078      	str	r0, [r7, #4]
 801087e:	460b      	mov	r3, r1
 8010880:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8010888:	2b01      	cmp	r3, #1
 801088a:	d103      	bne.n	8010894 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801088c:	78fb      	ldrb	r3, [r7, #3]
 801088e:	4618      	mov	r0, r3
 8010890:	f000 f872 	bl	8010978 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010894:	20c8      	movs	r0, #200	@ 0xc8
 8010896:	f7f2 facb 	bl	8002e30 <HAL_Delay>
  return USBH_OK;
 801089a:	2300      	movs	r3, #0
}
 801089c:	4618      	mov	r0, r3
 801089e:	3708      	adds	r7, #8
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}

080108a4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80108a4:	b480      	push	{r7}
 80108a6:	b085      	sub	sp, #20
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	460b      	mov	r3, r1
 80108ae:	70fb      	strb	r3, [r7, #3]
 80108b0:	4613      	mov	r3, r2
 80108b2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80108ba:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80108bc:	78fa      	ldrb	r2, [r7, #3]
 80108be:	68f9      	ldr	r1, [r7, #12]
 80108c0:	4613      	mov	r3, r2
 80108c2:	011b      	lsls	r3, r3, #4
 80108c4:	1a9b      	subs	r3, r3, r2
 80108c6:	009b      	lsls	r3, r3, #2
 80108c8:	440b      	add	r3, r1
 80108ca:	3317      	adds	r3, #23
 80108cc:	781b      	ldrb	r3, [r3, #0]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d00a      	beq.n	80108e8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80108d2:	78fa      	ldrb	r2, [r7, #3]
 80108d4:	68f9      	ldr	r1, [r7, #12]
 80108d6:	4613      	mov	r3, r2
 80108d8:	011b      	lsls	r3, r3, #4
 80108da:	1a9b      	subs	r3, r3, r2
 80108dc:	009b      	lsls	r3, r3, #2
 80108de:	440b      	add	r3, r1
 80108e0:	333c      	adds	r3, #60	@ 0x3c
 80108e2:	78ba      	ldrb	r2, [r7, #2]
 80108e4:	701a      	strb	r2, [r3, #0]
 80108e6:	e009      	b.n	80108fc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80108e8:	78fa      	ldrb	r2, [r7, #3]
 80108ea:	68f9      	ldr	r1, [r7, #12]
 80108ec:	4613      	mov	r3, r2
 80108ee:	011b      	lsls	r3, r3, #4
 80108f0:	1a9b      	subs	r3, r3, r2
 80108f2:	009b      	lsls	r3, r3, #2
 80108f4:	440b      	add	r3, r1
 80108f6:	333d      	adds	r3, #61	@ 0x3d
 80108f8:	78ba      	ldrb	r2, [r7, #2]
 80108fa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80108fc:	2300      	movs	r3, #0
}
 80108fe:	4618      	mov	r0, r3
 8010900:	3714      	adds	r7, #20
 8010902:	46bd      	mov	sp, r7
 8010904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010908:	4770      	bx	lr

0801090a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801090a:	b580      	push	{r7, lr}
 801090c:	b082      	sub	sp, #8
 801090e:	af00      	add	r7, sp, #0
 8010910:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f7f2 fa8c 	bl	8002e30 <HAL_Delay>
}
 8010918:	bf00      	nop
 801091a:	3708      	adds	r7, #8
 801091c:	46bd      	mov	sp, r7
 801091e:	bd80      	pop	{r7, pc}

08010920 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010920:	b480      	push	{r7}
 8010922:	b085      	sub	sp, #20
 8010924:	af00      	add	r7, sp, #0
 8010926:	4603      	mov	r3, r0
 8010928:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801092a:	2300      	movs	r3, #0
 801092c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801092e:	79fb      	ldrb	r3, [r7, #7]
 8010930:	2b03      	cmp	r3, #3
 8010932:	d817      	bhi.n	8010964 <USBH_Get_USB_Status+0x44>
 8010934:	a201      	add	r2, pc, #4	@ (adr r2, 801093c <USBH_Get_USB_Status+0x1c>)
 8010936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801093a:	bf00      	nop
 801093c:	0801094d 	.word	0x0801094d
 8010940:	08010953 	.word	0x08010953
 8010944:	08010959 	.word	0x08010959
 8010948:	0801095f 	.word	0x0801095f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801094c:	2300      	movs	r3, #0
 801094e:	73fb      	strb	r3, [r7, #15]
    break;
 8010950:	e00b      	b.n	801096a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010952:	2302      	movs	r3, #2
 8010954:	73fb      	strb	r3, [r7, #15]
    break;
 8010956:	e008      	b.n	801096a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010958:	2301      	movs	r3, #1
 801095a:	73fb      	strb	r3, [r7, #15]
    break;
 801095c:	e005      	b.n	801096a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801095e:	2302      	movs	r3, #2
 8010960:	73fb      	strb	r3, [r7, #15]
    break;
 8010962:	e002      	b.n	801096a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010964:	2302      	movs	r3, #2
 8010966:	73fb      	strb	r3, [r7, #15]
    break;
 8010968:	bf00      	nop
  }
  return usb_status;
 801096a:	7bfb      	ldrb	r3, [r7, #15]
}
 801096c:	4618      	mov	r0, r3
 801096e:	3714      	adds	r7, #20
 8010970:	46bd      	mov	sp, r7
 8010972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010976:	4770      	bx	lr

08010978 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b084      	sub	sp, #16
 801097c:	af00      	add	r7, sp, #0
 801097e:	4603      	mov	r3, r0
 8010980:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010982:	79fb      	ldrb	r3, [r7, #7]
 8010984:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010986:	79fb      	ldrb	r3, [r7, #7]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d102      	bne.n	8010992 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 801098c:	2301      	movs	r3, #1
 801098e:	73fb      	strb	r3, [r7, #15]
 8010990:	e001      	b.n	8010996 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8010992:	2300      	movs	r3, #0
 8010994:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8010996:	7bfb      	ldrb	r3, [r7, #15]
 8010998:	461a      	mov	r2, r3
 801099a:	2101      	movs	r1, #1
 801099c:	4803      	ldr	r0, [pc, #12]	@ (80109ac <MX_DriverVbusFS+0x34>)
 801099e:	f7f2 fd93 	bl	80034c8 <HAL_GPIO_WritePin>
}
 80109a2:	bf00      	nop
 80109a4:	3710      	adds	r7, #16
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd80      	pop	{r7, pc}
 80109aa:	bf00      	nop
 80109ac:	40020800 	.word	0x40020800

080109b0 <atoi>:
 80109b0:	220a      	movs	r2, #10
 80109b2:	2100      	movs	r1, #0
 80109b4:	f000 b938 	b.w	8010c28 <strtol>

080109b8 <malloc>:
 80109b8:	4b02      	ldr	r3, [pc, #8]	@ (80109c4 <malloc+0xc>)
 80109ba:	4601      	mov	r1, r0
 80109bc:	6818      	ldr	r0, [r3, #0]
 80109be:	f000 b82d 	b.w	8010a1c <_malloc_r>
 80109c2:	bf00      	nop
 80109c4:	20000298 	.word	0x20000298

080109c8 <free>:
 80109c8:	4b02      	ldr	r3, [pc, #8]	@ (80109d4 <free+0xc>)
 80109ca:	4601      	mov	r1, r0
 80109cc:	6818      	ldr	r0, [r3, #0]
 80109ce:	f000 bc0f 	b.w	80111f0 <_free_r>
 80109d2:	bf00      	nop
 80109d4:	20000298 	.word	0x20000298

080109d8 <sbrk_aligned>:
 80109d8:	b570      	push	{r4, r5, r6, lr}
 80109da:	4e0f      	ldr	r6, [pc, #60]	@ (8010a18 <sbrk_aligned+0x40>)
 80109dc:	460c      	mov	r4, r1
 80109de:	6831      	ldr	r1, [r6, #0]
 80109e0:	4605      	mov	r5, r0
 80109e2:	b911      	cbnz	r1, 80109ea <sbrk_aligned+0x12>
 80109e4:	f000 fb80 	bl	80110e8 <_sbrk_r>
 80109e8:	6030      	str	r0, [r6, #0]
 80109ea:	4621      	mov	r1, r4
 80109ec:	4628      	mov	r0, r5
 80109ee:	f000 fb7b 	bl	80110e8 <_sbrk_r>
 80109f2:	1c43      	adds	r3, r0, #1
 80109f4:	d103      	bne.n	80109fe <sbrk_aligned+0x26>
 80109f6:	f04f 34ff 	mov.w	r4, #4294967295
 80109fa:	4620      	mov	r0, r4
 80109fc:	bd70      	pop	{r4, r5, r6, pc}
 80109fe:	1cc4      	adds	r4, r0, #3
 8010a00:	f024 0403 	bic.w	r4, r4, #3
 8010a04:	42a0      	cmp	r0, r4
 8010a06:	d0f8      	beq.n	80109fa <sbrk_aligned+0x22>
 8010a08:	1a21      	subs	r1, r4, r0
 8010a0a:	4628      	mov	r0, r5
 8010a0c:	f000 fb6c 	bl	80110e8 <_sbrk_r>
 8010a10:	3001      	adds	r0, #1
 8010a12:	d1f2      	bne.n	80109fa <sbrk_aligned+0x22>
 8010a14:	e7ef      	b.n	80109f6 <sbrk_aligned+0x1e>
 8010a16:	bf00      	nop
 8010a18:	20011514 	.word	0x20011514

08010a1c <_malloc_r>:
 8010a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a20:	1ccd      	adds	r5, r1, #3
 8010a22:	f025 0503 	bic.w	r5, r5, #3
 8010a26:	3508      	adds	r5, #8
 8010a28:	2d0c      	cmp	r5, #12
 8010a2a:	bf38      	it	cc
 8010a2c:	250c      	movcc	r5, #12
 8010a2e:	2d00      	cmp	r5, #0
 8010a30:	4606      	mov	r6, r0
 8010a32:	db01      	blt.n	8010a38 <_malloc_r+0x1c>
 8010a34:	42a9      	cmp	r1, r5
 8010a36:	d904      	bls.n	8010a42 <_malloc_r+0x26>
 8010a38:	230c      	movs	r3, #12
 8010a3a:	6033      	str	r3, [r6, #0]
 8010a3c:	2000      	movs	r0, #0
 8010a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010b18 <_malloc_r+0xfc>
 8010a46:	f000 f869 	bl	8010b1c <__malloc_lock>
 8010a4a:	f8d8 3000 	ldr.w	r3, [r8]
 8010a4e:	461c      	mov	r4, r3
 8010a50:	bb44      	cbnz	r4, 8010aa4 <_malloc_r+0x88>
 8010a52:	4629      	mov	r1, r5
 8010a54:	4630      	mov	r0, r6
 8010a56:	f7ff ffbf 	bl	80109d8 <sbrk_aligned>
 8010a5a:	1c43      	adds	r3, r0, #1
 8010a5c:	4604      	mov	r4, r0
 8010a5e:	d158      	bne.n	8010b12 <_malloc_r+0xf6>
 8010a60:	f8d8 4000 	ldr.w	r4, [r8]
 8010a64:	4627      	mov	r7, r4
 8010a66:	2f00      	cmp	r7, #0
 8010a68:	d143      	bne.n	8010af2 <_malloc_r+0xd6>
 8010a6a:	2c00      	cmp	r4, #0
 8010a6c:	d04b      	beq.n	8010b06 <_malloc_r+0xea>
 8010a6e:	6823      	ldr	r3, [r4, #0]
 8010a70:	4639      	mov	r1, r7
 8010a72:	4630      	mov	r0, r6
 8010a74:	eb04 0903 	add.w	r9, r4, r3
 8010a78:	f000 fb36 	bl	80110e8 <_sbrk_r>
 8010a7c:	4581      	cmp	r9, r0
 8010a7e:	d142      	bne.n	8010b06 <_malloc_r+0xea>
 8010a80:	6821      	ldr	r1, [r4, #0]
 8010a82:	1a6d      	subs	r5, r5, r1
 8010a84:	4629      	mov	r1, r5
 8010a86:	4630      	mov	r0, r6
 8010a88:	f7ff ffa6 	bl	80109d8 <sbrk_aligned>
 8010a8c:	3001      	adds	r0, #1
 8010a8e:	d03a      	beq.n	8010b06 <_malloc_r+0xea>
 8010a90:	6823      	ldr	r3, [r4, #0]
 8010a92:	442b      	add	r3, r5
 8010a94:	6023      	str	r3, [r4, #0]
 8010a96:	f8d8 3000 	ldr.w	r3, [r8]
 8010a9a:	685a      	ldr	r2, [r3, #4]
 8010a9c:	bb62      	cbnz	r2, 8010af8 <_malloc_r+0xdc>
 8010a9e:	f8c8 7000 	str.w	r7, [r8]
 8010aa2:	e00f      	b.n	8010ac4 <_malloc_r+0xa8>
 8010aa4:	6822      	ldr	r2, [r4, #0]
 8010aa6:	1b52      	subs	r2, r2, r5
 8010aa8:	d420      	bmi.n	8010aec <_malloc_r+0xd0>
 8010aaa:	2a0b      	cmp	r2, #11
 8010aac:	d917      	bls.n	8010ade <_malloc_r+0xc2>
 8010aae:	1961      	adds	r1, r4, r5
 8010ab0:	42a3      	cmp	r3, r4
 8010ab2:	6025      	str	r5, [r4, #0]
 8010ab4:	bf18      	it	ne
 8010ab6:	6059      	strne	r1, [r3, #4]
 8010ab8:	6863      	ldr	r3, [r4, #4]
 8010aba:	bf08      	it	eq
 8010abc:	f8c8 1000 	streq.w	r1, [r8]
 8010ac0:	5162      	str	r2, [r4, r5]
 8010ac2:	604b      	str	r3, [r1, #4]
 8010ac4:	4630      	mov	r0, r6
 8010ac6:	f000 f82f 	bl	8010b28 <__malloc_unlock>
 8010aca:	f104 000b 	add.w	r0, r4, #11
 8010ace:	1d23      	adds	r3, r4, #4
 8010ad0:	f020 0007 	bic.w	r0, r0, #7
 8010ad4:	1ac2      	subs	r2, r0, r3
 8010ad6:	bf1c      	itt	ne
 8010ad8:	1a1b      	subne	r3, r3, r0
 8010ada:	50a3      	strne	r3, [r4, r2]
 8010adc:	e7af      	b.n	8010a3e <_malloc_r+0x22>
 8010ade:	6862      	ldr	r2, [r4, #4]
 8010ae0:	42a3      	cmp	r3, r4
 8010ae2:	bf0c      	ite	eq
 8010ae4:	f8c8 2000 	streq.w	r2, [r8]
 8010ae8:	605a      	strne	r2, [r3, #4]
 8010aea:	e7eb      	b.n	8010ac4 <_malloc_r+0xa8>
 8010aec:	4623      	mov	r3, r4
 8010aee:	6864      	ldr	r4, [r4, #4]
 8010af0:	e7ae      	b.n	8010a50 <_malloc_r+0x34>
 8010af2:	463c      	mov	r4, r7
 8010af4:	687f      	ldr	r7, [r7, #4]
 8010af6:	e7b6      	b.n	8010a66 <_malloc_r+0x4a>
 8010af8:	461a      	mov	r2, r3
 8010afa:	685b      	ldr	r3, [r3, #4]
 8010afc:	42a3      	cmp	r3, r4
 8010afe:	d1fb      	bne.n	8010af8 <_malloc_r+0xdc>
 8010b00:	2300      	movs	r3, #0
 8010b02:	6053      	str	r3, [r2, #4]
 8010b04:	e7de      	b.n	8010ac4 <_malloc_r+0xa8>
 8010b06:	230c      	movs	r3, #12
 8010b08:	6033      	str	r3, [r6, #0]
 8010b0a:	4630      	mov	r0, r6
 8010b0c:	f000 f80c 	bl	8010b28 <__malloc_unlock>
 8010b10:	e794      	b.n	8010a3c <_malloc_r+0x20>
 8010b12:	6005      	str	r5, [r0, #0]
 8010b14:	e7d6      	b.n	8010ac4 <_malloc_r+0xa8>
 8010b16:	bf00      	nop
 8010b18:	20011518 	.word	0x20011518

08010b1c <__malloc_lock>:
 8010b1c:	4801      	ldr	r0, [pc, #4]	@ (8010b24 <__malloc_lock+0x8>)
 8010b1e:	f000 bb30 	b.w	8011182 <__retarget_lock_acquire_recursive>
 8010b22:	bf00      	nop
 8010b24:	2001165c 	.word	0x2001165c

08010b28 <__malloc_unlock>:
 8010b28:	4801      	ldr	r0, [pc, #4]	@ (8010b30 <__malloc_unlock+0x8>)
 8010b2a:	f000 bb2b 	b.w	8011184 <__retarget_lock_release_recursive>
 8010b2e:	bf00      	nop
 8010b30:	2001165c 	.word	0x2001165c

08010b34 <_strtol_l.isra.0>:
 8010b34:	2b24      	cmp	r3, #36	@ 0x24
 8010b36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b3a:	4686      	mov	lr, r0
 8010b3c:	4690      	mov	r8, r2
 8010b3e:	d801      	bhi.n	8010b44 <_strtol_l.isra.0+0x10>
 8010b40:	2b01      	cmp	r3, #1
 8010b42:	d106      	bne.n	8010b52 <_strtol_l.isra.0+0x1e>
 8010b44:	f000 faf2 	bl	801112c <__errno>
 8010b48:	2316      	movs	r3, #22
 8010b4a:	6003      	str	r3, [r0, #0]
 8010b4c:	2000      	movs	r0, #0
 8010b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b52:	4834      	ldr	r0, [pc, #208]	@ (8010c24 <_strtol_l.isra.0+0xf0>)
 8010b54:	460d      	mov	r5, r1
 8010b56:	462a      	mov	r2, r5
 8010b58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b5c:	5d06      	ldrb	r6, [r0, r4]
 8010b5e:	f016 0608 	ands.w	r6, r6, #8
 8010b62:	d1f8      	bne.n	8010b56 <_strtol_l.isra.0+0x22>
 8010b64:	2c2d      	cmp	r4, #45	@ 0x2d
 8010b66:	d110      	bne.n	8010b8a <_strtol_l.isra.0+0x56>
 8010b68:	782c      	ldrb	r4, [r5, #0]
 8010b6a:	2601      	movs	r6, #1
 8010b6c:	1c95      	adds	r5, r2, #2
 8010b6e:	f033 0210 	bics.w	r2, r3, #16
 8010b72:	d115      	bne.n	8010ba0 <_strtol_l.isra.0+0x6c>
 8010b74:	2c30      	cmp	r4, #48	@ 0x30
 8010b76:	d10d      	bne.n	8010b94 <_strtol_l.isra.0+0x60>
 8010b78:	782a      	ldrb	r2, [r5, #0]
 8010b7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010b7e:	2a58      	cmp	r2, #88	@ 0x58
 8010b80:	d108      	bne.n	8010b94 <_strtol_l.isra.0+0x60>
 8010b82:	786c      	ldrb	r4, [r5, #1]
 8010b84:	3502      	adds	r5, #2
 8010b86:	2310      	movs	r3, #16
 8010b88:	e00a      	b.n	8010ba0 <_strtol_l.isra.0+0x6c>
 8010b8a:	2c2b      	cmp	r4, #43	@ 0x2b
 8010b8c:	bf04      	itt	eq
 8010b8e:	782c      	ldrbeq	r4, [r5, #0]
 8010b90:	1c95      	addeq	r5, r2, #2
 8010b92:	e7ec      	b.n	8010b6e <_strtol_l.isra.0+0x3a>
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d1f6      	bne.n	8010b86 <_strtol_l.isra.0+0x52>
 8010b98:	2c30      	cmp	r4, #48	@ 0x30
 8010b9a:	bf14      	ite	ne
 8010b9c:	230a      	movne	r3, #10
 8010b9e:	2308      	moveq	r3, #8
 8010ba0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010ba4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010ba8:	2200      	movs	r2, #0
 8010baa:	fbbc f9f3 	udiv	r9, ip, r3
 8010bae:	4610      	mov	r0, r2
 8010bb0:	fb03 ca19 	mls	sl, r3, r9, ip
 8010bb4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010bb8:	2f09      	cmp	r7, #9
 8010bba:	d80f      	bhi.n	8010bdc <_strtol_l.isra.0+0xa8>
 8010bbc:	463c      	mov	r4, r7
 8010bbe:	42a3      	cmp	r3, r4
 8010bc0:	dd1b      	ble.n	8010bfa <_strtol_l.isra.0+0xc6>
 8010bc2:	1c57      	adds	r7, r2, #1
 8010bc4:	d007      	beq.n	8010bd6 <_strtol_l.isra.0+0xa2>
 8010bc6:	4581      	cmp	r9, r0
 8010bc8:	d314      	bcc.n	8010bf4 <_strtol_l.isra.0+0xc0>
 8010bca:	d101      	bne.n	8010bd0 <_strtol_l.isra.0+0x9c>
 8010bcc:	45a2      	cmp	sl, r4
 8010bce:	db11      	blt.n	8010bf4 <_strtol_l.isra.0+0xc0>
 8010bd0:	fb00 4003 	mla	r0, r0, r3, r4
 8010bd4:	2201      	movs	r2, #1
 8010bd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010bda:	e7eb      	b.n	8010bb4 <_strtol_l.isra.0+0x80>
 8010bdc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010be0:	2f19      	cmp	r7, #25
 8010be2:	d801      	bhi.n	8010be8 <_strtol_l.isra.0+0xb4>
 8010be4:	3c37      	subs	r4, #55	@ 0x37
 8010be6:	e7ea      	b.n	8010bbe <_strtol_l.isra.0+0x8a>
 8010be8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010bec:	2f19      	cmp	r7, #25
 8010bee:	d804      	bhi.n	8010bfa <_strtol_l.isra.0+0xc6>
 8010bf0:	3c57      	subs	r4, #87	@ 0x57
 8010bf2:	e7e4      	b.n	8010bbe <_strtol_l.isra.0+0x8a>
 8010bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8010bf8:	e7ed      	b.n	8010bd6 <_strtol_l.isra.0+0xa2>
 8010bfa:	1c53      	adds	r3, r2, #1
 8010bfc:	d108      	bne.n	8010c10 <_strtol_l.isra.0+0xdc>
 8010bfe:	2322      	movs	r3, #34	@ 0x22
 8010c00:	f8ce 3000 	str.w	r3, [lr]
 8010c04:	4660      	mov	r0, ip
 8010c06:	f1b8 0f00 	cmp.w	r8, #0
 8010c0a:	d0a0      	beq.n	8010b4e <_strtol_l.isra.0+0x1a>
 8010c0c:	1e69      	subs	r1, r5, #1
 8010c0e:	e006      	b.n	8010c1e <_strtol_l.isra.0+0xea>
 8010c10:	b106      	cbz	r6, 8010c14 <_strtol_l.isra.0+0xe0>
 8010c12:	4240      	negs	r0, r0
 8010c14:	f1b8 0f00 	cmp.w	r8, #0
 8010c18:	d099      	beq.n	8010b4e <_strtol_l.isra.0+0x1a>
 8010c1a:	2a00      	cmp	r2, #0
 8010c1c:	d1f6      	bne.n	8010c0c <_strtol_l.isra.0+0xd8>
 8010c1e:	f8c8 1000 	str.w	r1, [r8]
 8010c22:	e794      	b.n	8010b4e <_strtol_l.isra.0+0x1a>
 8010c24:	08012a3d 	.word	0x08012a3d

08010c28 <strtol>:
 8010c28:	4613      	mov	r3, r2
 8010c2a:	460a      	mov	r2, r1
 8010c2c:	4601      	mov	r1, r0
 8010c2e:	4802      	ldr	r0, [pc, #8]	@ (8010c38 <strtol+0x10>)
 8010c30:	6800      	ldr	r0, [r0, #0]
 8010c32:	f7ff bf7f 	b.w	8010b34 <_strtol_l.isra.0>
 8010c36:	bf00      	nop
 8010c38:	20000298 	.word	0x20000298

08010c3c <std>:
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	b510      	push	{r4, lr}
 8010c40:	4604      	mov	r4, r0
 8010c42:	e9c0 3300 	strd	r3, r3, [r0]
 8010c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010c4a:	6083      	str	r3, [r0, #8]
 8010c4c:	8181      	strh	r1, [r0, #12]
 8010c4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8010c50:	81c2      	strh	r2, [r0, #14]
 8010c52:	6183      	str	r3, [r0, #24]
 8010c54:	4619      	mov	r1, r3
 8010c56:	2208      	movs	r2, #8
 8010c58:	305c      	adds	r0, #92	@ 0x5c
 8010c5a:	f000 f930 	bl	8010ebe <memset>
 8010c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8010c94 <std+0x58>)
 8010c60:	6263      	str	r3, [r4, #36]	@ 0x24
 8010c62:	4b0d      	ldr	r3, [pc, #52]	@ (8010c98 <std+0x5c>)
 8010c64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010c66:	4b0d      	ldr	r3, [pc, #52]	@ (8010c9c <std+0x60>)
 8010c68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8010ca0 <std+0x64>)
 8010c6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8010c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8010ca4 <std+0x68>)
 8010c70:	6224      	str	r4, [r4, #32]
 8010c72:	429c      	cmp	r4, r3
 8010c74:	d006      	beq.n	8010c84 <std+0x48>
 8010c76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010c7a:	4294      	cmp	r4, r2
 8010c7c:	d002      	beq.n	8010c84 <std+0x48>
 8010c7e:	33d0      	adds	r3, #208	@ 0xd0
 8010c80:	429c      	cmp	r4, r3
 8010c82:	d105      	bne.n	8010c90 <std+0x54>
 8010c84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c8c:	f000 ba78 	b.w	8011180 <__retarget_lock_init_recursive>
 8010c90:	bd10      	pop	{r4, pc}
 8010c92:	bf00      	nop
 8010c94:	08010e05 	.word	0x08010e05
 8010c98:	08010e27 	.word	0x08010e27
 8010c9c:	08010e5f 	.word	0x08010e5f
 8010ca0:	08010e83 	.word	0x08010e83
 8010ca4:	2001151c 	.word	0x2001151c

08010ca8 <stdio_exit_handler>:
 8010ca8:	4a02      	ldr	r2, [pc, #8]	@ (8010cb4 <stdio_exit_handler+0xc>)
 8010caa:	4903      	ldr	r1, [pc, #12]	@ (8010cb8 <stdio_exit_handler+0x10>)
 8010cac:	4803      	ldr	r0, [pc, #12]	@ (8010cbc <stdio_exit_handler+0x14>)
 8010cae:	f000 b869 	b.w	8010d84 <_fwalk_sglue>
 8010cb2:	bf00      	nop
 8010cb4:	2000028c 	.word	0x2000028c
 8010cb8:	08011955 	.word	0x08011955
 8010cbc:	2000029c 	.word	0x2000029c

08010cc0 <cleanup_stdio>:
 8010cc0:	6841      	ldr	r1, [r0, #4]
 8010cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8010cf4 <cleanup_stdio+0x34>)
 8010cc4:	4299      	cmp	r1, r3
 8010cc6:	b510      	push	{r4, lr}
 8010cc8:	4604      	mov	r4, r0
 8010cca:	d001      	beq.n	8010cd0 <cleanup_stdio+0x10>
 8010ccc:	f000 fe42 	bl	8011954 <_fflush_r>
 8010cd0:	68a1      	ldr	r1, [r4, #8]
 8010cd2:	4b09      	ldr	r3, [pc, #36]	@ (8010cf8 <cleanup_stdio+0x38>)
 8010cd4:	4299      	cmp	r1, r3
 8010cd6:	d002      	beq.n	8010cde <cleanup_stdio+0x1e>
 8010cd8:	4620      	mov	r0, r4
 8010cda:	f000 fe3b 	bl	8011954 <_fflush_r>
 8010cde:	68e1      	ldr	r1, [r4, #12]
 8010ce0:	4b06      	ldr	r3, [pc, #24]	@ (8010cfc <cleanup_stdio+0x3c>)
 8010ce2:	4299      	cmp	r1, r3
 8010ce4:	d004      	beq.n	8010cf0 <cleanup_stdio+0x30>
 8010ce6:	4620      	mov	r0, r4
 8010ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cec:	f000 be32 	b.w	8011954 <_fflush_r>
 8010cf0:	bd10      	pop	{r4, pc}
 8010cf2:	bf00      	nop
 8010cf4:	2001151c 	.word	0x2001151c
 8010cf8:	20011584 	.word	0x20011584
 8010cfc:	200115ec 	.word	0x200115ec

08010d00 <global_stdio_init.part.0>:
 8010d00:	b510      	push	{r4, lr}
 8010d02:	4b0b      	ldr	r3, [pc, #44]	@ (8010d30 <global_stdio_init.part.0+0x30>)
 8010d04:	4c0b      	ldr	r4, [pc, #44]	@ (8010d34 <global_stdio_init.part.0+0x34>)
 8010d06:	4a0c      	ldr	r2, [pc, #48]	@ (8010d38 <global_stdio_init.part.0+0x38>)
 8010d08:	601a      	str	r2, [r3, #0]
 8010d0a:	4620      	mov	r0, r4
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	2104      	movs	r1, #4
 8010d10:	f7ff ff94 	bl	8010c3c <std>
 8010d14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010d18:	2201      	movs	r2, #1
 8010d1a:	2109      	movs	r1, #9
 8010d1c:	f7ff ff8e 	bl	8010c3c <std>
 8010d20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010d24:	2202      	movs	r2, #2
 8010d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d2a:	2112      	movs	r1, #18
 8010d2c:	f7ff bf86 	b.w	8010c3c <std>
 8010d30:	20011654 	.word	0x20011654
 8010d34:	2001151c 	.word	0x2001151c
 8010d38:	08010ca9 	.word	0x08010ca9

08010d3c <__sfp_lock_acquire>:
 8010d3c:	4801      	ldr	r0, [pc, #4]	@ (8010d44 <__sfp_lock_acquire+0x8>)
 8010d3e:	f000 ba20 	b.w	8011182 <__retarget_lock_acquire_recursive>
 8010d42:	bf00      	nop
 8010d44:	2001165d 	.word	0x2001165d

08010d48 <__sfp_lock_release>:
 8010d48:	4801      	ldr	r0, [pc, #4]	@ (8010d50 <__sfp_lock_release+0x8>)
 8010d4a:	f000 ba1b 	b.w	8011184 <__retarget_lock_release_recursive>
 8010d4e:	bf00      	nop
 8010d50:	2001165d 	.word	0x2001165d

08010d54 <__sinit>:
 8010d54:	b510      	push	{r4, lr}
 8010d56:	4604      	mov	r4, r0
 8010d58:	f7ff fff0 	bl	8010d3c <__sfp_lock_acquire>
 8010d5c:	6a23      	ldr	r3, [r4, #32]
 8010d5e:	b11b      	cbz	r3, 8010d68 <__sinit+0x14>
 8010d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d64:	f7ff bff0 	b.w	8010d48 <__sfp_lock_release>
 8010d68:	4b04      	ldr	r3, [pc, #16]	@ (8010d7c <__sinit+0x28>)
 8010d6a:	6223      	str	r3, [r4, #32]
 8010d6c:	4b04      	ldr	r3, [pc, #16]	@ (8010d80 <__sinit+0x2c>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d1f5      	bne.n	8010d60 <__sinit+0xc>
 8010d74:	f7ff ffc4 	bl	8010d00 <global_stdio_init.part.0>
 8010d78:	e7f2      	b.n	8010d60 <__sinit+0xc>
 8010d7a:	bf00      	nop
 8010d7c:	08010cc1 	.word	0x08010cc1
 8010d80:	20011654 	.word	0x20011654

08010d84 <_fwalk_sglue>:
 8010d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d88:	4607      	mov	r7, r0
 8010d8a:	4688      	mov	r8, r1
 8010d8c:	4614      	mov	r4, r2
 8010d8e:	2600      	movs	r6, #0
 8010d90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010d94:	f1b9 0901 	subs.w	r9, r9, #1
 8010d98:	d505      	bpl.n	8010da6 <_fwalk_sglue+0x22>
 8010d9a:	6824      	ldr	r4, [r4, #0]
 8010d9c:	2c00      	cmp	r4, #0
 8010d9e:	d1f7      	bne.n	8010d90 <_fwalk_sglue+0xc>
 8010da0:	4630      	mov	r0, r6
 8010da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010da6:	89ab      	ldrh	r3, [r5, #12]
 8010da8:	2b01      	cmp	r3, #1
 8010daa:	d907      	bls.n	8010dbc <_fwalk_sglue+0x38>
 8010dac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010db0:	3301      	adds	r3, #1
 8010db2:	d003      	beq.n	8010dbc <_fwalk_sglue+0x38>
 8010db4:	4629      	mov	r1, r5
 8010db6:	4638      	mov	r0, r7
 8010db8:	47c0      	blx	r8
 8010dba:	4306      	orrs	r6, r0
 8010dbc:	3568      	adds	r5, #104	@ 0x68
 8010dbe:	e7e9      	b.n	8010d94 <_fwalk_sglue+0x10>

08010dc0 <siprintf>:
 8010dc0:	b40e      	push	{r1, r2, r3}
 8010dc2:	b510      	push	{r4, lr}
 8010dc4:	b09d      	sub	sp, #116	@ 0x74
 8010dc6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8010dc8:	9002      	str	r0, [sp, #8]
 8010dca:	9006      	str	r0, [sp, #24]
 8010dcc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010dd0:	480a      	ldr	r0, [pc, #40]	@ (8010dfc <siprintf+0x3c>)
 8010dd2:	9107      	str	r1, [sp, #28]
 8010dd4:	9104      	str	r1, [sp, #16]
 8010dd6:	490a      	ldr	r1, [pc, #40]	@ (8010e00 <siprintf+0x40>)
 8010dd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ddc:	9105      	str	r1, [sp, #20]
 8010dde:	2400      	movs	r4, #0
 8010de0:	a902      	add	r1, sp, #8
 8010de2:	6800      	ldr	r0, [r0, #0]
 8010de4:	9301      	str	r3, [sp, #4]
 8010de6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8010de8:	f000 faa8 	bl	801133c <_svfiprintf_r>
 8010dec:	9b02      	ldr	r3, [sp, #8]
 8010dee:	701c      	strb	r4, [r3, #0]
 8010df0:	b01d      	add	sp, #116	@ 0x74
 8010df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010df6:	b003      	add	sp, #12
 8010df8:	4770      	bx	lr
 8010dfa:	bf00      	nop
 8010dfc:	20000298 	.word	0x20000298
 8010e00:	ffff0208 	.word	0xffff0208

08010e04 <__sread>:
 8010e04:	b510      	push	{r4, lr}
 8010e06:	460c      	mov	r4, r1
 8010e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e0c:	f000 f95a 	bl	80110c4 <_read_r>
 8010e10:	2800      	cmp	r0, #0
 8010e12:	bfab      	itete	ge
 8010e14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010e16:	89a3      	ldrhlt	r3, [r4, #12]
 8010e18:	181b      	addge	r3, r3, r0
 8010e1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010e1e:	bfac      	ite	ge
 8010e20:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010e22:	81a3      	strhlt	r3, [r4, #12]
 8010e24:	bd10      	pop	{r4, pc}

08010e26 <__swrite>:
 8010e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e2a:	461f      	mov	r7, r3
 8010e2c:	898b      	ldrh	r3, [r1, #12]
 8010e2e:	05db      	lsls	r3, r3, #23
 8010e30:	4605      	mov	r5, r0
 8010e32:	460c      	mov	r4, r1
 8010e34:	4616      	mov	r6, r2
 8010e36:	d505      	bpl.n	8010e44 <__swrite+0x1e>
 8010e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e3c:	2302      	movs	r3, #2
 8010e3e:	2200      	movs	r2, #0
 8010e40:	f000 f92e 	bl	80110a0 <_lseek_r>
 8010e44:	89a3      	ldrh	r3, [r4, #12]
 8010e46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010e4e:	81a3      	strh	r3, [r4, #12]
 8010e50:	4632      	mov	r2, r6
 8010e52:	463b      	mov	r3, r7
 8010e54:	4628      	mov	r0, r5
 8010e56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e5a:	f000 b955 	b.w	8011108 <_write_r>

08010e5e <__sseek>:
 8010e5e:	b510      	push	{r4, lr}
 8010e60:	460c      	mov	r4, r1
 8010e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e66:	f000 f91b 	bl	80110a0 <_lseek_r>
 8010e6a:	1c43      	adds	r3, r0, #1
 8010e6c:	89a3      	ldrh	r3, [r4, #12]
 8010e6e:	bf15      	itete	ne
 8010e70:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010e72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010e76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010e7a:	81a3      	strheq	r3, [r4, #12]
 8010e7c:	bf18      	it	ne
 8010e7e:	81a3      	strhne	r3, [r4, #12]
 8010e80:	bd10      	pop	{r4, pc}

08010e82 <__sclose>:
 8010e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e86:	f000 b89d 	b.w	8010fc4 <_close_r>

08010e8a <memmove>:
 8010e8a:	4288      	cmp	r0, r1
 8010e8c:	b510      	push	{r4, lr}
 8010e8e:	eb01 0402 	add.w	r4, r1, r2
 8010e92:	d902      	bls.n	8010e9a <memmove+0x10>
 8010e94:	4284      	cmp	r4, r0
 8010e96:	4623      	mov	r3, r4
 8010e98:	d807      	bhi.n	8010eaa <memmove+0x20>
 8010e9a:	1e43      	subs	r3, r0, #1
 8010e9c:	42a1      	cmp	r1, r4
 8010e9e:	d008      	beq.n	8010eb2 <memmove+0x28>
 8010ea0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010ea4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010ea8:	e7f8      	b.n	8010e9c <memmove+0x12>
 8010eaa:	4402      	add	r2, r0
 8010eac:	4601      	mov	r1, r0
 8010eae:	428a      	cmp	r2, r1
 8010eb0:	d100      	bne.n	8010eb4 <memmove+0x2a>
 8010eb2:	bd10      	pop	{r4, pc}
 8010eb4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010eb8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010ebc:	e7f7      	b.n	8010eae <memmove+0x24>

08010ebe <memset>:
 8010ebe:	4402      	add	r2, r0
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	4293      	cmp	r3, r2
 8010ec4:	d100      	bne.n	8010ec8 <memset+0xa>
 8010ec6:	4770      	bx	lr
 8010ec8:	f803 1b01 	strb.w	r1, [r3], #1
 8010ecc:	e7f9      	b.n	8010ec2 <memset+0x4>

08010ece <strchr>:
 8010ece:	b2c9      	uxtb	r1, r1
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ed8:	b112      	cbz	r2, 8010ee0 <strchr+0x12>
 8010eda:	428a      	cmp	r2, r1
 8010edc:	d1f9      	bne.n	8010ed2 <strchr+0x4>
 8010ede:	4770      	bx	lr
 8010ee0:	2900      	cmp	r1, #0
 8010ee2:	bf18      	it	ne
 8010ee4:	2000      	movne	r0, #0
 8010ee6:	4770      	bx	lr

08010ee8 <strncmp>:
 8010ee8:	b510      	push	{r4, lr}
 8010eea:	b16a      	cbz	r2, 8010f08 <strncmp+0x20>
 8010eec:	3901      	subs	r1, #1
 8010eee:	1884      	adds	r4, r0, r2
 8010ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ef4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010ef8:	429a      	cmp	r2, r3
 8010efa:	d103      	bne.n	8010f04 <strncmp+0x1c>
 8010efc:	42a0      	cmp	r0, r4
 8010efe:	d001      	beq.n	8010f04 <strncmp+0x1c>
 8010f00:	2a00      	cmp	r2, #0
 8010f02:	d1f5      	bne.n	8010ef0 <strncmp+0x8>
 8010f04:	1ad0      	subs	r0, r2, r3
 8010f06:	bd10      	pop	{r4, pc}
 8010f08:	4610      	mov	r0, r2
 8010f0a:	e7fc      	b.n	8010f06 <strncmp+0x1e>

08010f0c <strtok>:
 8010f0c:	4b16      	ldr	r3, [pc, #88]	@ (8010f68 <strtok+0x5c>)
 8010f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f12:	681f      	ldr	r7, [r3, #0]
 8010f14:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8010f16:	4605      	mov	r5, r0
 8010f18:	460e      	mov	r6, r1
 8010f1a:	b9ec      	cbnz	r4, 8010f58 <strtok+0x4c>
 8010f1c:	2050      	movs	r0, #80	@ 0x50
 8010f1e:	f7ff fd4b 	bl	80109b8 <malloc>
 8010f22:	4602      	mov	r2, r0
 8010f24:	6478      	str	r0, [r7, #68]	@ 0x44
 8010f26:	b920      	cbnz	r0, 8010f32 <strtok+0x26>
 8010f28:	4b10      	ldr	r3, [pc, #64]	@ (8010f6c <strtok+0x60>)
 8010f2a:	4811      	ldr	r0, [pc, #68]	@ (8010f70 <strtok+0x64>)
 8010f2c:	215b      	movs	r1, #91	@ 0x5b
 8010f2e:	f000 f941 	bl	80111b4 <__assert_func>
 8010f32:	e9c0 4400 	strd	r4, r4, [r0]
 8010f36:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8010f3a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8010f3e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8010f42:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8010f46:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8010f4a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8010f4e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8010f52:	6184      	str	r4, [r0, #24]
 8010f54:	7704      	strb	r4, [r0, #28]
 8010f56:	6244      	str	r4, [r0, #36]	@ 0x24
 8010f58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010f5a:	4631      	mov	r1, r6
 8010f5c:	4628      	mov	r0, r5
 8010f5e:	2301      	movs	r3, #1
 8010f60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f64:	f000 b806 	b.w	8010f74 <__strtok_r>
 8010f68:	20000298 	.word	0x20000298
 8010f6c:	08012b3d 	.word	0x08012b3d
 8010f70:	08012b54 	.word	0x08012b54

08010f74 <__strtok_r>:
 8010f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f76:	4604      	mov	r4, r0
 8010f78:	b908      	cbnz	r0, 8010f7e <__strtok_r+0xa>
 8010f7a:	6814      	ldr	r4, [r2, #0]
 8010f7c:	b144      	cbz	r4, 8010f90 <__strtok_r+0x1c>
 8010f7e:	4620      	mov	r0, r4
 8010f80:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010f84:	460f      	mov	r7, r1
 8010f86:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010f8a:	b91e      	cbnz	r6, 8010f94 <__strtok_r+0x20>
 8010f8c:	b965      	cbnz	r5, 8010fa8 <__strtok_r+0x34>
 8010f8e:	6015      	str	r5, [r2, #0]
 8010f90:	2000      	movs	r0, #0
 8010f92:	e005      	b.n	8010fa0 <__strtok_r+0x2c>
 8010f94:	42b5      	cmp	r5, r6
 8010f96:	d1f6      	bne.n	8010f86 <__strtok_r+0x12>
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d1f0      	bne.n	8010f7e <__strtok_r+0xa>
 8010f9c:	6014      	str	r4, [r2, #0]
 8010f9e:	7003      	strb	r3, [r0, #0]
 8010fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fa2:	461c      	mov	r4, r3
 8010fa4:	e00c      	b.n	8010fc0 <__strtok_r+0x4c>
 8010fa6:	b91d      	cbnz	r5, 8010fb0 <__strtok_r+0x3c>
 8010fa8:	4627      	mov	r7, r4
 8010faa:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010fae:	460e      	mov	r6, r1
 8010fb0:	f816 5b01 	ldrb.w	r5, [r6], #1
 8010fb4:	42ab      	cmp	r3, r5
 8010fb6:	d1f6      	bne.n	8010fa6 <__strtok_r+0x32>
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d0f2      	beq.n	8010fa2 <__strtok_r+0x2e>
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	703b      	strb	r3, [r7, #0]
 8010fc0:	6014      	str	r4, [r2, #0]
 8010fc2:	e7ed      	b.n	8010fa0 <__strtok_r+0x2c>

08010fc4 <_close_r>:
 8010fc4:	b538      	push	{r3, r4, r5, lr}
 8010fc6:	4d06      	ldr	r5, [pc, #24]	@ (8010fe0 <_close_r+0x1c>)
 8010fc8:	2300      	movs	r3, #0
 8010fca:	4604      	mov	r4, r0
 8010fcc:	4608      	mov	r0, r1
 8010fce:	602b      	str	r3, [r5, #0]
 8010fd0:	f7f1 fe46 	bl	8002c60 <_close>
 8010fd4:	1c43      	adds	r3, r0, #1
 8010fd6:	d102      	bne.n	8010fde <_close_r+0x1a>
 8010fd8:	682b      	ldr	r3, [r5, #0]
 8010fda:	b103      	cbz	r3, 8010fde <_close_r+0x1a>
 8010fdc:	6023      	str	r3, [r4, #0]
 8010fde:	bd38      	pop	{r3, r4, r5, pc}
 8010fe0:	20011658 	.word	0x20011658

08010fe4 <_reclaim_reent>:
 8010fe4:	4b2d      	ldr	r3, [pc, #180]	@ (801109c <_reclaim_reent+0xb8>)
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	4283      	cmp	r3, r0
 8010fea:	b570      	push	{r4, r5, r6, lr}
 8010fec:	4604      	mov	r4, r0
 8010fee:	d053      	beq.n	8011098 <_reclaim_reent+0xb4>
 8010ff0:	69c3      	ldr	r3, [r0, #28]
 8010ff2:	b31b      	cbz	r3, 801103c <_reclaim_reent+0x58>
 8010ff4:	68db      	ldr	r3, [r3, #12]
 8010ff6:	b163      	cbz	r3, 8011012 <_reclaim_reent+0x2e>
 8010ff8:	2500      	movs	r5, #0
 8010ffa:	69e3      	ldr	r3, [r4, #28]
 8010ffc:	68db      	ldr	r3, [r3, #12]
 8010ffe:	5959      	ldr	r1, [r3, r5]
 8011000:	b9b1      	cbnz	r1, 8011030 <_reclaim_reent+0x4c>
 8011002:	3504      	adds	r5, #4
 8011004:	2d80      	cmp	r5, #128	@ 0x80
 8011006:	d1f8      	bne.n	8010ffa <_reclaim_reent+0x16>
 8011008:	69e3      	ldr	r3, [r4, #28]
 801100a:	4620      	mov	r0, r4
 801100c:	68d9      	ldr	r1, [r3, #12]
 801100e:	f000 f8ef 	bl	80111f0 <_free_r>
 8011012:	69e3      	ldr	r3, [r4, #28]
 8011014:	6819      	ldr	r1, [r3, #0]
 8011016:	b111      	cbz	r1, 801101e <_reclaim_reent+0x3a>
 8011018:	4620      	mov	r0, r4
 801101a:	f000 f8e9 	bl	80111f0 <_free_r>
 801101e:	69e3      	ldr	r3, [r4, #28]
 8011020:	689d      	ldr	r5, [r3, #8]
 8011022:	b15d      	cbz	r5, 801103c <_reclaim_reent+0x58>
 8011024:	4629      	mov	r1, r5
 8011026:	4620      	mov	r0, r4
 8011028:	682d      	ldr	r5, [r5, #0]
 801102a:	f000 f8e1 	bl	80111f0 <_free_r>
 801102e:	e7f8      	b.n	8011022 <_reclaim_reent+0x3e>
 8011030:	680e      	ldr	r6, [r1, #0]
 8011032:	4620      	mov	r0, r4
 8011034:	f000 f8dc 	bl	80111f0 <_free_r>
 8011038:	4631      	mov	r1, r6
 801103a:	e7e1      	b.n	8011000 <_reclaim_reent+0x1c>
 801103c:	6961      	ldr	r1, [r4, #20]
 801103e:	b111      	cbz	r1, 8011046 <_reclaim_reent+0x62>
 8011040:	4620      	mov	r0, r4
 8011042:	f000 f8d5 	bl	80111f0 <_free_r>
 8011046:	69e1      	ldr	r1, [r4, #28]
 8011048:	b111      	cbz	r1, 8011050 <_reclaim_reent+0x6c>
 801104a:	4620      	mov	r0, r4
 801104c:	f000 f8d0 	bl	80111f0 <_free_r>
 8011050:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011052:	b111      	cbz	r1, 801105a <_reclaim_reent+0x76>
 8011054:	4620      	mov	r0, r4
 8011056:	f000 f8cb 	bl	80111f0 <_free_r>
 801105a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801105c:	b111      	cbz	r1, 8011064 <_reclaim_reent+0x80>
 801105e:	4620      	mov	r0, r4
 8011060:	f000 f8c6 	bl	80111f0 <_free_r>
 8011064:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8011066:	b111      	cbz	r1, 801106e <_reclaim_reent+0x8a>
 8011068:	4620      	mov	r0, r4
 801106a:	f000 f8c1 	bl	80111f0 <_free_r>
 801106e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8011070:	b111      	cbz	r1, 8011078 <_reclaim_reent+0x94>
 8011072:	4620      	mov	r0, r4
 8011074:	f000 f8bc 	bl	80111f0 <_free_r>
 8011078:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801107a:	b111      	cbz	r1, 8011082 <_reclaim_reent+0x9e>
 801107c:	4620      	mov	r0, r4
 801107e:	f000 f8b7 	bl	80111f0 <_free_r>
 8011082:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011084:	b111      	cbz	r1, 801108c <_reclaim_reent+0xa8>
 8011086:	4620      	mov	r0, r4
 8011088:	f000 f8b2 	bl	80111f0 <_free_r>
 801108c:	6a23      	ldr	r3, [r4, #32]
 801108e:	b11b      	cbz	r3, 8011098 <_reclaim_reent+0xb4>
 8011090:	4620      	mov	r0, r4
 8011092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011096:	4718      	bx	r3
 8011098:	bd70      	pop	{r4, r5, r6, pc}
 801109a:	bf00      	nop
 801109c:	20000298 	.word	0x20000298

080110a0 <_lseek_r>:
 80110a0:	b538      	push	{r3, r4, r5, lr}
 80110a2:	4d07      	ldr	r5, [pc, #28]	@ (80110c0 <_lseek_r+0x20>)
 80110a4:	4604      	mov	r4, r0
 80110a6:	4608      	mov	r0, r1
 80110a8:	4611      	mov	r1, r2
 80110aa:	2200      	movs	r2, #0
 80110ac:	602a      	str	r2, [r5, #0]
 80110ae:	461a      	mov	r2, r3
 80110b0:	f7f1 fdfd 	bl	8002cae <_lseek>
 80110b4:	1c43      	adds	r3, r0, #1
 80110b6:	d102      	bne.n	80110be <_lseek_r+0x1e>
 80110b8:	682b      	ldr	r3, [r5, #0]
 80110ba:	b103      	cbz	r3, 80110be <_lseek_r+0x1e>
 80110bc:	6023      	str	r3, [r4, #0]
 80110be:	bd38      	pop	{r3, r4, r5, pc}
 80110c0:	20011658 	.word	0x20011658

080110c4 <_read_r>:
 80110c4:	b538      	push	{r3, r4, r5, lr}
 80110c6:	4d07      	ldr	r5, [pc, #28]	@ (80110e4 <_read_r+0x20>)
 80110c8:	4604      	mov	r4, r0
 80110ca:	4608      	mov	r0, r1
 80110cc:	4611      	mov	r1, r2
 80110ce:	2200      	movs	r2, #0
 80110d0:	602a      	str	r2, [r5, #0]
 80110d2:	461a      	mov	r2, r3
 80110d4:	f7f1 fd8b 	bl	8002bee <_read>
 80110d8:	1c43      	adds	r3, r0, #1
 80110da:	d102      	bne.n	80110e2 <_read_r+0x1e>
 80110dc:	682b      	ldr	r3, [r5, #0]
 80110de:	b103      	cbz	r3, 80110e2 <_read_r+0x1e>
 80110e0:	6023      	str	r3, [r4, #0]
 80110e2:	bd38      	pop	{r3, r4, r5, pc}
 80110e4:	20011658 	.word	0x20011658

080110e8 <_sbrk_r>:
 80110e8:	b538      	push	{r3, r4, r5, lr}
 80110ea:	4d06      	ldr	r5, [pc, #24]	@ (8011104 <_sbrk_r+0x1c>)
 80110ec:	2300      	movs	r3, #0
 80110ee:	4604      	mov	r4, r0
 80110f0:	4608      	mov	r0, r1
 80110f2:	602b      	str	r3, [r5, #0]
 80110f4:	f7f1 fde8 	bl	8002cc8 <_sbrk>
 80110f8:	1c43      	adds	r3, r0, #1
 80110fa:	d102      	bne.n	8011102 <_sbrk_r+0x1a>
 80110fc:	682b      	ldr	r3, [r5, #0]
 80110fe:	b103      	cbz	r3, 8011102 <_sbrk_r+0x1a>
 8011100:	6023      	str	r3, [r4, #0]
 8011102:	bd38      	pop	{r3, r4, r5, pc}
 8011104:	20011658 	.word	0x20011658

08011108 <_write_r>:
 8011108:	b538      	push	{r3, r4, r5, lr}
 801110a:	4d07      	ldr	r5, [pc, #28]	@ (8011128 <_write_r+0x20>)
 801110c:	4604      	mov	r4, r0
 801110e:	4608      	mov	r0, r1
 8011110:	4611      	mov	r1, r2
 8011112:	2200      	movs	r2, #0
 8011114:	602a      	str	r2, [r5, #0]
 8011116:	461a      	mov	r2, r3
 8011118:	f7f1 fd86 	bl	8002c28 <_write>
 801111c:	1c43      	adds	r3, r0, #1
 801111e:	d102      	bne.n	8011126 <_write_r+0x1e>
 8011120:	682b      	ldr	r3, [r5, #0]
 8011122:	b103      	cbz	r3, 8011126 <_write_r+0x1e>
 8011124:	6023      	str	r3, [r4, #0]
 8011126:	bd38      	pop	{r3, r4, r5, pc}
 8011128:	20011658 	.word	0x20011658

0801112c <__errno>:
 801112c:	4b01      	ldr	r3, [pc, #4]	@ (8011134 <__errno+0x8>)
 801112e:	6818      	ldr	r0, [r3, #0]
 8011130:	4770      	bx	lr
 8011132:	bf00      	nop
 8011134:	20000298 	.word	0x20000298

08011138 <__libc_init_array>:
 8011138:	b570      	push	{r4, r5, r6, lr}
 801113a:	4d0d      	ldr	r5, [pc, #52]	@ (8011170 <__libc_init_array+0x38>)
 801113c:	4c0d      	ldr	r4, [pc, #52]	@ (8011174 <__libc_init_array+0x3c>)
 801113e:	1b64      	subs	r4, r4, r5
 8011140:	10a4      	asrs	r4, r4, #2
 8011142:	2600      	movs	r6, #0
 8011144:	42a6      	cmp	r6, r4
 8011146:	d109      	bne.n	801115c <__libc_init_array+0x24>
 8011148:	4d0b      	ldr	r5, [pc, #44]	@ (8011178 <__libc_init_array+0x40>)
 801114a:	4c0c      	ldr	r4, [pc, #48]	@ (801117c <__libc_init_array+0x44>)
 801114c:	f000 ff16 	bl	8011f7c <_init>
 8011150:	1b64      	subs	r4, r4, r5
 8011152:	10a4      	asrs	r4, r4, #2
 8011154:	2600      	movs	r6, #0
 8011156:	42a6      	cmp	r6, r4
 8011158:	d105      	bne.n	8011166 <__libc_init_array+0x2e>
 801115a:	bd70      	pop	{r4, r5, r6, pc}
 801115c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011160:	4798      	blx	r3
 8011162:	3601      	adds	r6, #1
 8011164:	e7ee      	b.n	8011144 <__libc_init_array+0xc>
 8011166:	f855 3b04 	ldr.w	r3, [r5], #4
 801116a:	4798      	blx	r3
 801116c:	3601      	adds	r6, #1
 801116e:	e7f2      	b.n	8011156 <__libc_init_array+0x1e>
 8011170:	08012c28 	.word	0x08012c28
 8011174:	08012c28 	.word	0x08012c28
 8011178:	08012c28 	.word	0x08012c28
 801117c:	08012c2c 	.word	0x08012c2c

08011180 <__retarget_lock_init_recursive>:
 8011180:	4770      	bx	lr

08011182 <__retarget_lock_acquire_recursive>:
 8011182:	4770      	bx	lr

08011184 <__retarget_lock_release_recursive>:
 8011184:	4770      	bx	lr

08011186 <strcpy>:
 8011186:	4603      	mov	r3, r0
 8011188:	f811 2b01 	ldrb.w	r2, [r1], #1
 801118c:	f803 2b01 	strb.w	r2, [r3], #1
 8011190:	2a00      	cmp	r2, #0
 8011192:	d1f9      	bne.n	8011188 <strcpy+0x2>
 8011194:	4770      	bx	lr

08011196 <memcpy>:
 8011196:	440a      	add	r2, r1
 8011198:	4291      	cmp	r1, r2
 801119a:	f100 33ff 	add.w	r3, r0, #4294967295
 801119e:	d100      	bne.n	80111a2 <memcpy+0xc>
 80111a0:	4770      	bx	lr
 80111a2:	b510      	push	{r4, lr}
 80111a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80111a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80111ac:	4291      	cmp	r1, r2
 80111ae:	d1f9      	bne.n	80111a4 <memcpy+0xe>
 80111b0:	bd10      	pop	{r4, pc}
	...

080111b4 <__assert_func>:
 80111b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80111b6:	4614      	mov	r4, r2
 80111b8:	461a      	mov	r2, r3
 80111ba:	4b09      	ldr	r3, [pc, #36]	@ (80111e0 <__assert_func+0x2c>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	4605      	mov	r5, r0
 80111c0:	68d8      	ldr	r0, [r3, #12]
 80111c2:	b14c      	cbz	r4, 80111d8 <__assert_func+0x24>
 80111c4:	4b07      	ldr	r3, [pc, #28]	@ (80111e4 <__assert_func+0x30>)
 80111c6:	9100      	str	r1, [sp, #0]
 80111c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80111cc:	4906      	ldr	r1, [pc, #24]	@ (80111e8 <__assert_func+0x34>)
 80111ce:	462b      	mov	r3, r5
 80111d0:	f000 fbe8 	bl	80119a4 <fiprintf>
 80111d4:	f000 fbf8 	bl	80119c8 <abort>
 80111d8:	4b04      	ldr	r3, [pc, #16]	@ (80111ec <__assert_func+0x38>)
 80111da:	461c      	mov	r4, r3
 80111dc:	e7f3      	b.n	80111c6 <__assert_func+0x12>
 80111de:	bf00      	nop
 80111e0:	20000298 	.word	0x20000298
 80111e4:	08012bae 	.word	0x08012bae
 80111e8:	08012bbb 	.word	0x08012bbb
 80111ec:	08012be9 	.word	0x08012be9

080111f0 <_free_r>:
 80111f0:	b538      	push	{r3, r4, r5, lr}
 80111f2:	4605      	mov	r5, r0
 80111f4:	2900      	cmp	r1, #0
 80111f6:	d041      	beq.n	801127c <_free_r+0x8c>
 80111f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111fc:	1f0c      	subs	r4, r1, #4
 80111fe:	2b00      	cmp	r3, #0
 8011200:	bfb8      	it	lt
 8011202:	18e4      	addlt	r4, r4, r3
 8011204:	f7ff fc8a 	bl	8010b1c <__malloc_lock>
 8011208:	4a1d      	ldr	r2, [pc, #116]	@ (8011280 <_free_r+0x90>)
 801120a:	6813      	ldr	r3, [r2, #0]
 801120c:	b933      	cbnz	r3, 801121c <_free_r+0x2c>
 801120e:	6063      	str	r3, [r4, #4]
 8011210:	6014      	str	r4, [r2, #0]
 8011212:	4628      	mov	r0, r5
 8011214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011218:	f7ff bc86 	b.w	8010b28 <__malloc_unlock>
 801121c:	42a3      	cmp	r3, r4
 801121e:	d908      	bls.n	8011232 <_free_r+0x42>
 8011220:	6820      	ldr	r0, [r4, #0]
 8011222:	1821      	adds	r1, r4, r0
 8011224:	428b      	cmp	r3, r1
 8011226:	bf01      	itttt	eq
 8011228:	6819      	ldreq	r1, [r3, #0]
 801122a:	685b      	ldreq	r3, [r3, #4]
 801122c:	1809      	addeq	r1, r1, r0
 801122e:	6021      	streq	r1, [r4, #0]
 8011230:	e7ed      	b.n	801120e <_free_r+0x1e>
 8011232:	461a      	mov	r2, r3
 8011234:	685b      	ldr	r3, [r3, #4]
 8011236:	b10b      	cbz	r3, 801123c <_free_r+0x4c>
 8011238:	42a3      	cmp	r3, r4
 801123a:	d9fa      	bls.n	8011232 <_free_r+0x42>
 801123c:	6811      	ldr	r1, [r2, #0]
 801123e:	1850      	adds	r0, r2, r1
 8011240:	42a0      	cmp	r0, r4
 8011242:	d10b      	bne.n	801125c <_free_r+0x6c>
 8011244:	6820      	ldr	r0, [r4, #0]
 8011246:	4401      	add	r1, r0
 8011248:	1850      	adds	r0, r2, r1
 801124a:	4283      	cmp	r3, r0
 801124c:	6011      	str	r1, [r2, #0]
 801124e:	d1e0      	bne.n	8011212 <_free_r+0x22>
 8011250:	6818      	ldr	r0, [r3, #0]
 8011252:	685b      	ldr	r3, [r3, #4]
 8011254:	6053      	str	r3, [r2, #4]
 8011256:	4408      	add	r0, r1
 8011258:	6010      	str	r0, [r2, #0]
 801125a:	e7da      	b.n	8011212 <_free_r+0x22>
 801125c:	d902      	bls.n	8011264 <_free_r+0x74>
 801125e:	230c      	movs	r3, #12
 8011260:	602b      	str	r3, [r5, #0]
 8011262:	e7d6      	b.n	8011212 <_free_r+0x22>
 8011264:	6820      	ldr	r0, [r4, #0]
 8011266:	1821      	adds	r1, r4, r0
 8011268:	428b      	cmp	r3, r1
 801126a:	bf04      	itt	eq
 801126c:	6819      	ldreq	r1, [r3, #0]
 801126e:	685b      	ldreq	r3, [r3, #4]
 8011270:	6063      	str	r3, [r4, #4]
 8011272:	bf04      	itt	eq
 8011274:	1809      	addeq	r1, r1, r0
 8011276:	6021      	streq	r1, [r4, #0]
 8011278:	6054      	str	r4, [r2, #4]
 801127a:	e7ca      	b.n	8011212 <_free_r+0x22>
 801127c:	bd38      	pop	{r3, r4, r5, pc}
 801127e:	bf00      	nop
 8011280:	20011518 	.word	0x20011518

08011284 <__ssputs_r>:
 8011284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011288:	688e      	ldr	r6, [r1, #8]
 801128a:	461f      	mov	r7, r3
 801128c:	42be      	cmp	r6, r7
 801128e:	680b      	ldr	r3, [r1, #0]
 8011290:	4682      	mov	sl, r0
 8011292:	460c      	mov	r4, r1
 8011294:	4690      	mov	r8, r2
 8011296:	d82d      	bhi.n	80112f4 <__ssputs_r+0x70>
 8011298:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801129c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80112a0:	d026      	beq.n	80112f0 <__ssputs_r+0x6c>
 80112a2:	6965      	ldr	r5, [r4, #20]
 80112a4:	6909      	ldr	r1, [r1, #16]
 80112a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80112aa:	eba3 0901 	sub.w	r9, r3, r1
 80112ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80112b2:	1c7b      	adds	r3, r7, #1
 80112b4:	444b      	add	r3, r9
 80112b6:	106d      	asrs	r5, r5, #1
 80112b8:	429d      	cmp	r5, r3
 80112ba:	bf38      	it	cc
 80112bc:	461d      	movcc	r5, r3
 80112be:	0553      	lsls	r3, r2, #21
 80112c0:	d527      	bpl.n	8011312 <__ssputs_r+0x8e>
 80112c2:	4629      	mov	r1, r5
 80112c4:	f7ff fbaa 	bl	8010a1c <_malloc_r>
 80112c8:	4606      	mov	r6, r0
 80112ca:	b360      	cbz	r0, 8011326 <__ssputs_r+0xa2>
 80112cc:	6921      	ldr	r1, [r4, #16]
 80112ce:	464a      	mov	r2, r9
 80112d0:	f7ff ff61 	bl	8011196 <memcpy>
 80112d4:	89a3      	ldrh	r3, [r4, #12]
 80112d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80112da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80112de:	81a3      	strh	r3, [r4, #12]
 80112e0:	6126      	str	r6, [r4, #16]
 80112e2:	6165      	str	r5, [r4, #20]
 80112e4:	444e      	add	r6, r9
 80112e6:	eba5 0509 	sub.w	r5, r5, r9
 80112ea:	6026      	str	r6, [r4, #0]
 80112ec:	60a5      	str	r5, [r4, #8]
 80112ee:	463e      	mov	r6, r7
 80112f0:	42be      	cmp	r6, r7
 80112f2:	d900      	bls.n	80112f6 <__ssputs_r+0x72>
 80112f4:	463e      	mov	r6, r7
 80112f6:	6820      	ldr	r0, [r4, #0]
 80112f8:	4632      	mov	r2, r6
 80112fa:	4641      	mov	r1, r8
 80112fc:	f7ff fdc5 	bl	8010e8a <memmove>
 8011300:	68a3      	ldr	r3, [r4, #8]
 8011302:	1b9b      	subs	r3, r3, r6
 8011304:	60a3      	str	r3, [r4, #8]
 8011306:	6823      	ldr	r3, [r4, #0]
 8011308:	4433      	add	r3, r6
 801130a:	6023      	str	r3, [r4, #0]
 801130c:	2000      	movs	r0, #0
 801130e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011312:	462a      	mov	r2, r5
 8011314:	f000 fb5f 	bl	80119d6 <_realloc_r>
 8011318:	4606      	mov	r6, r0
 801131a:	2800      	cmp	r0, #0
 801131c:	d1e0      	bne.n	80112e0 <__ssputs_r+0x5c>
 801131e:	6921      	ldr	r1, [r4, #16]
 8011320:	4650      	mov	r0, sl
 8011322:	f7ff ff65 	bl	80111f0 <_free_r>
 8011326:	230c      	movs	r3, #12
 8011328:	f8ca 3000 	str.w	r3, [sl]
 801132c:	89a3      	ldrh	r3, [r4, #12]
 801132e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011332:	81a3      	strh	r3, [r4, #12]
 8011334:	f04f 30ff 	mov.w	r0, #4294967295
 8011338:	e7e9      	b.n	801130e <__ssputs_r+0x8a>
	...

0801133c <_svfiprintf_r>:
 801133c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011340:	4698      	mov	r8, r3
 8011342:	898b      	ldrh	r3, [r1, #12]
 8011344:	061b      	lsls	r3, r3, #24
 8011346:	b09d      	sub	sp, #116	@ 0x74
 8011348:	4607      	mov	r7, r0
 801134a:	460d      	mov	r5, r1
 801134c:	4614      	mov	r4, r2
 801134e:	d510      	bpl.n	8011372 <_svfiprintf_r+0x36>
 8011350:	690b      	ldr	r3, [r1, #16]
 8011352:	b973      	cbnz	r3, 8011372 <_svfiprintf_r+0x36>
 8011354:	2140      	movs	r1, #64	@ 0x40
 8011356:	f7ff fb61 	bl	8010a1c <_malloc_r>
 801135a:	6028      	str	r0, [r5, #0]
 801135c:	6128      	str	r0, [r5, #16]
 801135e:	b930      	cbnz	r0, 801136e <_svfiprintf_r+0x32>
 8011360:	230c      	movs	r3, #12
 8011362:	603b      	str	r3, [r7, #0]
 8011364:	f04f 30ff 	mov.w	r0, #4294967295
 8011368:	b01d      	add	sp, #116	@ 0x74
 801136a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801136e:	2340      	movs	r3, #64	@ 0x40
 8011370:	616b      	str	r3, [r5, #20]
 8011372:	2300      	movs	r3, #0
 8011374:	9309      	str	r3, [sp, #36]	@ 0x24
 8011376:	2320      	movs	r3, #32
 8011378:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801137c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011380:	2330      	movs	r3, #48	@ 0x30
 8011382:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011520 <_svfiprintf_r+0x1e4>
 8011386:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801138a:	f04f 0901 	mov.w	r9, #1
 801138e:	4623      	mov	r3, r4
 8011390:	469a      	mov	sl, r3
 8011392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011396:	b10a      	cbz	r2, 801139c <_svfiprintf_r+0x60>
 8011398:	2a25      	cmp	r2, #37	@ 0x25
 801139a:	d1f9      	bne.n	8011390 <_svfiprintf_r+0x54>
 801139c:	ebba 0b04 	subs.w	fp, sl, r4
 80113a0:	d00b      	beq.n	80113ba <_svfiprintf_r+0x7e>
 80113a2:	465b      	mov	r3, fp
 80113a4:	4622      	mov	r2, r4
 80113a6:	4629      	mov	r1, r5
 80113a8:	4638      	mov	r0, r7
 80113aa:	f7ff ff6b 	bl	8011284 <__ssputs_r>
 80113ae:	3001      	adds	r0, #1
 80113b0:	f000 80a7 	beq.w	8011502 <_svfiprintf_r+0x1c6>
 80113b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80113b6:	445a      	add	r2, fp
 80113b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80113ba:	f89a 3000 	ldrb.w	r3, [sl]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	f000 809f 	beq.w	8011502 <_svfiprintf_r+0x1c6>
 80113c4:	2300      	movs	r3, #0
 80113c6:	f04f 32ff 	mov.w	r2, #4294967295
 80113ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80113ce:	f10a 0a01 	add.w	sl, sl, #1
 80113d2:	9304      	str	r3, [sp, #16]
 80113d4:	9307      	str	r3, [sp, #28]
 80113d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80113da:	931a      	str	r3, [sp, #104]	@ 0x68
 80113dc:	4654      	mov	r4, sl
 80113de:	2205      	movs	r2, #5
 80113e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113e4:	484e      	ldr	r0, [pc, #312]	@ (8011520 <_svfiprintf_r+0x1e4>)
 80113e6:	f7ee fefb 	bl	80001e0 <memchr>
 80113ea:	9a04      	ldr	r2, [sp, #16]
 80113ec:	b9d8      	cbnz	r0, 8011426 <_svfiprintf_r+0xea>
 80113ee:	06d0      	lsls	r0, r2, #27
 80113f0:	bf44      	itt	mi
 80113f2:	2320      	movmi	r3, #32
 80113f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80113f8:	0711      	lsls	r1, r2, #28
 80113fa:	bf44      	itt	mi
 80113fc:	232b      	movmi	r3, #43	@ 0x2b
 80113fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011402:	f89a 3000 	ldrb.w	r3, [sl]
 8011406:	2b2a      	cmp	r3, #42	@ 0x2a
 8011408:	d015      	beq.n	8011436 <_svfiprintf_r+0xfa>
 801140a:	9a07      	ldr	r2, [sp, #28]
 801140c:	4654      	mov	r4, sl
 801140e:	2000      	movs	r0, #0
 8011410:	f04f 0c0a 	mov.w	ip, #10
 8011414:	4621      	mov	r1, r4
 8011416:	f811 3b01 	ldrb.w	r3, [r1], #1
 801141a:	3b30      	subs	r3, #48	@ 0x30
 801141c:	2b09      	cmp	r3, #9
 801141e:	d94b      	bls.n	80114b8 <_svfiprintf_r+0x17c>
 8011420:	b1b0      	cbz	r0, 8011450 <_svfiprintf_r+0x114>
 8011422:	9207      	str	r2, [sp, #28]
 8011424:	e014      	b.n	8011450 <_svfiprintf_r+0x114>
 8011426:	eba0 0308 	sub.w	r3, r0, r8
 801142a:	fa09 f303 	lsl.w	r3, r9, r3
 801142e:	4313      	orrs	r3, r2
 8011430:	9304      	str	r3, [sp, #16]
 8011432:	46a2      	mov	sl, r4
 8011434:	e7d2      	b.n	80113dc <_svfiprintf_r+0xa0>
 8011436:	9b03      	ldr	r3, [sp, #12]
 8011438:	1d19      	adds	r1, r3, #4
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	9103      	str	r1, [sp, #12]
 801143e:	2b00      	cmp	r3, #0
 8011440:	bfbb      	ittet	lt
 8011442:	425b      	neglt	r3, r3
 8011444:	f042 0202 	orrlt.w	r2, r2, #2
 8011448:	9307      	strge	r3, [sp, #28]
 801144a:	9307      	strlt	r3, [sp, #28]
 801144c:	bfb8      	it	lt
 801144e:	9204      	strlt	r2, [sp, #16]
 8011450:	7823      	ldrb	r3, [r4, #0]
 8011452:	2b2e      	cmp	r3, #46	@ 0x2e
 8011454:	d10a      	bne.n	801146c <_svfiprintf_r+0x130>
 8011456:	7863      	ldrb	r3, [r4, #1]
 8011458:	2b2a      	cmp	r3, #42	@ 0x2a
 801145a:	d132      	bne.n	80114c2 <_svfiprintf_r+0x186>
 801145c:	9b03      	ldr	r3, [sp, #12]
 801145e:	1d1a      	adds	r2, r3, #4
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	9203      	str	r2, [sp, #12]
 8011464:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011468:	3402      	adds	r4, #2
 801146a:	9305      	str	r3, [sp, #20]
 801146c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011530 <_svfiprintf_r+0x1f4>
 8011470:	7821      	ldrb	r1, [r4, #0]
 8011472:	2203      	movs	r2, #3
 8011474:	4650      	mov	r0, sl
 8011476:	f7ee feb3 	bl	80001e0 <memchr>
 801147a:	b138      	cbz	r0, 801148c <_svfiprintf_r+0x150>
 801147c:	9b04      	ldr	r3, [sp, #16]
 801147e:	eba0 000a 	sub.w	r0, r0, sl
 8011482:	2240      	movs	r2, #64	@ 0x40
 8011484:	4082      	lsls	r2, r0
 8011486:	4313      	orrs	r3, r2
 8011488:	3401      	adds	r4, #1
 801148a:	9304      	str	r3, [sp, #16]
 801148c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011490:	4824      	ldr	r0, [pc, #144]	@ (8011524 <_svfiprintf_r+0x1e8>)
 8011492:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011496:	2206      	movs	r2, #6
 8011498:	f7ee fea2 	bl	80001e0 <memchr>
 801149c:	2800      	cmp	r0, #0
 801149e:	d036      	beq.n	801150e <_svfiprintf_r+0x1d2>
 80114a0:	4b21      	ldr	r3, [pc, #132]	@ (8011528 <_svfiprintf_r+0x1ec>)
 80114a2:	bb1b      	cbnz	r3, 80114ec <_svfiprintf_r+0x1b0>
 80114a4:	9b03      	ldr	r3, [sp, #12]
 80114a6:	3307      	adds	r3, #7
 80114a8:	f023 0307 	bic.w	r3, r3, #7
 80114ac:	3308      	adds	r3, #8
 80114ae:	9303      	str	r3, [sp, #12]
 80114b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114b2:	4433      	add	r3, r6
 80114b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80114b6:	e76a      	b.n	801138e <_svfiprintf_r+0x52>
 80114b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80114bc:	460c      	mov	r4, r1
 80114be:	2001      	movs	r0, #1
 80114c0:	e7a8      	b.n	8011414 <_svfiprintf_r+0xd8>
 80114c2:	2300      	movs	r3, #0
 80114c4:	3401      	adds	r4, #1
 80114c6:	9305      	str	r3, [sp, #20]
 80114c8:	4619      	mov	r1, r3
 80114ca:	f04f 0c0a 	mov.w	ip, #10
 80114ce:	4620      	mov	r0, r4
 80114d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114d4:	3a30      	subs	r2, #48	@ 0x30
 80114d6:	2a09      	cmp	r2, #9
 80114d8:	d903      	bls.n	80114e2 <_svfiprintf_r+0x1a6>
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d0c6      	beq.n	801146c <_svfiprintf_r+0x130>
 80114de:	9105      	str	r1, [sp, #20]
 80114e0:	e7c4      	b.n	801146c <_svfiprintf_r+0x130>
 80114e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80114e6:	4604      	mov	r4, r0
 80114e8:	2301      	movs	r3, #1
 80114ea:	e7f0      	b.n	80114ce <_svfiprintf_r+0x192>
 80114ec:	ab03      	add	r3, sp, #12
 80114ee:	9300      	str	r3, [sp, #0]
 80114f0:	462a      	mov	r2, r5
 80114f2:	4b0e      	ldr	r3, [pc, #56]	@ (801152c <_svfiprintf_r+0x1f0>)
 80114f4:	a904      	add	r1, sp, #16
 80114f6:	4638      	mov	r0, r7
 80114f8:	f3af 8000 	nop.w
 80114fc:	1c42      	adds	r2, r0, #1
 80114fe:	4606      	mov	r6, r0
 8011500:	d1d6      	bne.n	80114b0 <_svfiprintf_r+0x174>
 8011502:	89ab      	ldrh	r3, [r5, #12]
 8011504:	065b      	lsls	r3, r3, #25
 8011506:	f53f af2d 	bmi.w	8011364 <_svfiprintf_r+0x28>
 801150a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801150c:	e72c      	b.n	8011368 <_svfiprintf_r+0x2c>
 801150e:	ab03      	add	r3, sp, #12
 8011510:	9300      	str	r3, [sp, #0]
 8011512:	462a      	mov	r2, r5
 8011514:	4b05      	ldr	r3, [pc, #20]	@ (801152c <_svfiprintf_r+0x1f0>)
 8011516:	a904      	add	r1, sp, #16
 8011518:	4638      	mov	r0, r7
 801151a:	f000 f879 	bl	8011610 <_printf_i>
 801151e:	e7ed      	b.n	80114fc <_svfiprintf_r+0x1c0>
 8011520:	08012bea 	.word	0x08012bea
 8011524:	08012bf4 	.word	0x08012bf4
 8011528:	00000000 	.word	0x00000000
 801152c:	08011285 	.word	0x08011285
 8011530:	08012bf0 	.word	0x08012bf0

08011534 <_printf_common>:
 8011534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011538:	4616      	mov	r6, r2
 801153a:	4698      	mov	r8, r3
 801153c:	688a      	ldr	r2, [r1, #8]
 801153e:	690b      	ldr	r3, [r1, #16]
 8011540:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011544:	4293      	cmp	r3, r2
 8011546:	bfb8      	it	lt
 8011548:	4613      	movlt	r3, r2
 801154a:	6033      	str	r3, [r6, #0]
 801154c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011550:	4607      	mov	r7, r0
 8011552:	460c      	mov	r4, r1
 8011554:	b10a      	cbz	r2, 801155a <_printf_common+0x26>
 8011556:	3301      	adds	r3, #1
 8011558:	6033      	str	r3, [r6, #0]
 801155a:	6823      	ldr	r3, [r4, #0]
 801155c:	0699      	lsls	r1, r3, #26
 801155e:	bf42      	ittt	mi
 8011560:	6833      	ldrmi	r3, [r6, #0]
 8011562:	3302      	addmi	r3, #2
 8011564:	6033      	strmi	r3, [r6, #0]
 8011566:	6825      	ldr	r5, [r4, #0]
 8011568:	f015 0506 	ands.w	r5, r5, #6
 801156c:	d106      	bne.n	801157c <_printf_common+0x48>
 801156e:	f104 0a19 	add.w	sl, r4, #25
 8011572:	68e3      	ldr	r3, [r4, #12]
 8011574:	6832      	ldr	r2, [r6, #0]
 8011576:	1a9b      	subs	r3, r3, r2
 8011578:	42ab      	cmp	r3, r5
 801157a:	dc26      	bgt.n	80115ca <_printf_common+0x96>
 801157c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011580:	6822      	ldr	r2, [r4, #0]
 8011582:	3b00      	subs	r3, #0
 8011584:	bf18      	it	ne
 8011586:	2301      	movne	r3, #1
 8011588:	0692      	lsls	r2, r2, #26
 801158a:	d42b      	bmi.n	80115e4 <_printf_common+0xb0>
 801158c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011590:	4641      	mov	r1, r8
 8011592:	4638      	mov	r0, r7
 8011594:	47c8      	blx	r9
 8011596:	3001      	adds	r0, #1
 8011598:	d01e      	beq.n	80115d8 <_printf_common+0xa4>
 801159a:	6823      	ldr	r3, [r4, #0]
 801159c:	6922      	ldr	r2, [r4, #16]
 801159e:	f003 0306 	and.w	r3, r3, #6
 80115a2:	2b04      	cmp	r3, #4
 80115a4:	bf02      	ittt	eq
 80115a6:	68e5      	ldreq	r5, [r4, #12]
 80115a8:	6833      	ldreq	r3, [r6, #0]
 80115aa:	1aed      	subeq	r5, r5, r3
 80115ac:	68a3      	ldr	r3, [r4, #8]
 80115ae:	bf0c      	ite	eq
 80115b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80115b4:	2500      	movne	r5, #0
 80115b6:	4293      	cmp	r3, r2
 80115b8:	bfc4      	itt	gt
 80115ba:	1a9b      	subgt	r3, r3, r2
 80115bc:	18ed      	addgt	r5, r5, r3
 80115be:	2600      	movs	r6, #0
 80115c0:	341a      	adds	r4, #26
 80115c2:	42b5      	cmp	r5, r6
 80115c4:	d11a      	bne.n	80115fc <_printf_common+0xc8>
 80115c6:	2000      	movs	r0, #0
 80115c8:	e008      	b.n	80115dc <_printf_common+0xa8>
 80115ca:	2301      	movs	r3, #1
 80115cc:	4652      	mov	r2, sl
 80115ce:	4641      	mov	r1, r8
 80115d0:	4638      	mov	r0, r7
 80115d2:	47c8      	blx	r9
 80115d4:	3001      	adds	r0, #1
 80115d6:	d103      	bne.n	80115e0 <_printf_common+0xac>
 80115d8:	f04f 30ff 	mov.w	r0, #4294967295
 80115dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115e0:	3501      	adds	r5, #1
 80115e2:	e7c6      	b.n	8011572 <_printf_common+0x3e>
 80115e4:	18e1      	adds	r1, r4, r3
 80115e6:	1c5a      	adds	r2, r3, #1
 80115e8:	2030      	movs	r0, #48	@ 0x30
 80115ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80115ee:	4422      	add	r2, r4
 80115f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80115f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80115f8:	3302      	adds	r3, #2
 80115fa:	e7c7      	b.n	801158c <_printf_common+0x58>
 80115fc:	2301      	movs	r3, #1
 80115fe:	4622      	mov	r2, r4
 8011600:	4641      	mov	r1, r8
 8011602:	4638      	mov	r0, r7
 8011604:	47c8      	blx	r9
 8011606:	3001      	adds	r0, #1
 8011608:	d0e6      	beq.n	80115d8 <_printf_common+0xa4>
 801160a:	3601      	adds	r6, #1
 801160c:	e7d9      	b.n	80115c2 <_printf_common+0x8e>
	...

08011610 <_printf_i>:
 8011610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011614:	7e0f      	ldrb	r7, [r1, #24]
 8011616:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011618:	2f78      	cmp	r7, #120	@ 0x78
 801161a:	4691      	mov	r9, r2
 801161c:	4680      	mov	r8, r0
 801161e:	460c      	mov	r4, r1
 8011620:	469a      	mov	sl, r3
 8011622:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011626:	d807      	bhi.n	8011638 <_printf_i+0x28>
 8011628:	2f62      	cmp	r7, #98	@ 0x62
 801162a:	d80a      	bhi.n	8011642 <_printf_i+0x32>
 801162c:	2f00      	cmp	r7, #0
 801162e:	f000 80d1 	beq.w	80117d4 <_printf_i+0x1c4>
 8011632:	2f58      	cmp	r7, #88	@ 0x58
 8011634:	f000 80b8 	beq.w	80117a8 <_printf_i+0x198>
 8011638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801163c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011640:	e03a      	b.n	80116b8 <_printf_i+0xa8>
 8011642:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011646:	2b15      	cmp	r3, #21
 8011648:	d8f6      	bhi.n	8011638 <_printf_i+0x28>
 801164a:	a101      	add	r1, pc, #4	@ (adr r1, 8011650 <_printf_i+0x40>)
 801164c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011650:	080116a9 	.word	0x080116a9
 8011654:	080116bd 	.word	0x080116bd
 8011658:	08011639 	.word	0x08011639
 801165c:	08011639 	.word	0x08011639
 8011660:	08011639 	.word	0x08011639
 8011664:	08011639 	.word	0x08011639
 8011668:	080116bd 	.word	0x080116bd
 801166c:	08011639 	.word	0x08011639
 8011670:	08011639 	.word	0x08011639
 8011674:	08011639 	.word	0x08011639
 8011678:	08011639 	.word	0x08011639
 801167c:	080117bb 	.word	0x080117bb
 8011680:	080116e7 	.word	0x080116e7
 8011684:	08011775 	.word	0x08011775
 8011688:	08011639 	.word	0x08011639
 801168c:	08011639 	.word	0x08011639
 8011690:	080117dd 	.word	0x080117dd
 8011694:	08011639 	.word	0x08011639
 8011698:	080116e7 	.word	0x080116e7
 801169c:	08011639 	.word	0x08011639
 80116a0:	08011639 	.word	0x08011639
 80116a4:	0801177d 	.word	0x0801177d
 80116a8:	6833      	ldr	r3, [r6, #0]
 80116aa:	1d1a      	adds	r2, r3, #4
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	6032      	str	r2, [r6, #0]
 80116b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80116b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80116b8:	2301      	movs	r3, #1
 80116ba:	e09c      	b.n	80117f6 <_printf_i+0x1e6>
 80116bc:	6833      	ldr	r3, [r6, #0]
 80116be:	6820      	ldr	r0, [r4, #0]
 80116c0:	1d19      	adds	r1, r3, #4
 80116c2:	6031      	str	r1, [r6, #0]
 80116c4:	0606      	lsls	r6, r0, #24
 80116c6:	d501      	bpl.n	80116cc <_printf_i+0xbc>
 80116c8:	681d      	ldr	r5, [r3, #0]
 80116ca:	e003      	b.n	80116d4 <_printf_i+0xc4>
 80116cc:	0645      	lsls	r5, r0, #25
 80116ce:	d5fb      	bpl.n	80116c8 <_printf_i+0xb8>
 80116d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80116d4:	2d00      	cmp	r5, #0
 80116d6:	da03      	bge.n	80116e0 <_printf_i+0xd0>
 80116d8:	232d      	movs	r3, #45	@ 0x2d
 80116da:	426d      	negs	r5, r5
 80116dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80116e0:	4858      	ldr	r0, [pc, #352]	@ (8011844 <_printf_i+0x234>)
 80116e2:	230a      	movs	r3, #10
 80116e4:	e011      	b.n	801170a <_printf_i+0xfa>
 80116e6:	6821      	ldr	r1, [r4, #0]
 80116e8:	6833      	ldr	r3, [r6, #0]
 80116ea:	0608      	lsls	r0, r1, #24
 80116ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80116f0:	d402      	bmi.n	80116f8 <_printf_i+0xe8>
 80116f2:	0649      	lsls	r1, r1, #25
 80116f4:	bf48      	it	mi
 80116f6:	b2ad      	uxthmi	r5, r5
 80116f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80116fa:	4852      	ldr	r0, [pc, #328]	@ (8011844 <_printf_i+0x234>)
 80116fc:	6033      	str	r3, [r6, #0]
 80116fe:	bf14      	ite	ne
 8011700:	230a      	movne	r3, #10
 8011702:	2308      	moveq	r3, #8
 8011704:	2100      	movs	r1, #0
 8011706:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801170a:	6866      	ldr	r6, [r4, #4]
 801170c:	60a6      	str	r6, [r4, #8]
 801170e:	2e00      	cmp	r6, #0
 8011710:	db05      	blt.n	801171e <_printf_i+0x10e>
 8011712:	6821      	ldr	r1, [r4, #0]
 8011714:	432e      	orrs	r6, r5
 8011716:	f021 0104 	bic.w	r1, r1, #4
 801171a:	6021      	str	r1, [r4, #0]
 801171c:	d04b      	beq.n	80117b6 <_printf_i+0x1a6>
 801171e:	4616      	mov	r6, r2
 8011720:	fbb5 f1f3 	udiv	r1, r5, r3
 8011724:	fb03 5711 	mls	r7, r3, r1, r5
 8011728:	5dc7      	ldrb	r7, [r0, r7]
 801172a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801172e:	462f      	mov	r7, r5
 8011730:	42bb      	cmp	r3, r7
 8011732:	460d      	mov	r5, r1
 8011734:	d9f4      	bls.n	8011720 <_printf_i+0x110>
 8011736:	2b08      	cmp	r3, #8
 8011738:	d10b      	bne.n	8011752 <_printf_i+0x142>
 801173a:	6823      	ldr	r3, [r4, #0]
 801173c:	07df      	lsls	r7, r3, #31
 801173e:	d508      	bpl.n	8011752 <_printf_i+0x142>
 8011740:	6923      	ldr	r3, [r4, #16]
 8011742:	6861      	ldr	r1, [r4, #4]
 8011744:	4299      	cmp	r1, r3
 8011746:	bfde      	ittt	le
 8011748:	2330      	movle	r3, #48	@ 0x30
 801174a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801174e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011752:	1b92      	subs	r2, r2, r6
 8011754:	6122      	str	r2, [r4, #16]
 8011756:	f8cd a000 	str.w	sl, [sp]
 801175a:	464b      	mov	r3, r9
 801175c:	aa03      	add	r2, sp, #12
 801175e:	4621      	mov	r1, r4
 8011760:	4640      	mov	r0, r8
 8011762:	f7ff fee7 	bl	8011534 <_printf_common>
 8011766:	3001      	adds	r0, #1
 8011768:	d14a      	bne.n	8011800 <_printf_i+0x1f0>
 801176a:	f04f 30ff 	mov.w	r0, #4294967295
 801176e:	b004      	add	sp, #16
 8011770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011774:	6823      	ldr	r3, [r4, #0]
 8011776:	f043 0320 	orr.w	r3, r3, #32
 801177a:	6023      	str	r3, [r4, #0]
 801177c:	4832      	ldr	r0, [pc, #200]	@ (8011848 <_printf_i+0x238>)
 801177e:	2778      	movs	r7, #120	@ 0x78
 8011780:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011784:	6823      	ldr	r3, [r4, #0]
 8011786:	6831      	ldr	r1, [r6, #0]
 8011788:	061f      	lsls	r7, r3, #24
 801178a:	f851 5b04 	ldr.w	r5, [r1], #4
 801178e:	d402      	bmi.n	8011796 <_printf_i+0x186>
 8011790:	065f      	lsls	r7, r3, #25
 8011792:	bf48      	it	mi
 8011794:	b2ad      	uxthmi	r5, r5
 8011796:	6031      	str	r1, [r6, #0]
 8011798:	07d9      	lsls	r1, r3, #31
 801179a:	bf44      	itt	mi
 801179c:	f043 0320 	orrmi.w	r3, r3, #32
 80117a0:	6023      	strmi	r3, [r4, #0]
 80117a2:	b11d      	cbz	r5, 80117ac <_printf_i+0x19c>
 80117a4:	2310      	movs	r3, #16
 80117a6:	e7ad      	b.n	8011704 <_printf_i+0xf4>
 80117a8:	4826      	ldr	r0, [pc, #152]	@ (8011844 <_printf_i+0x234>)
 80117aa:	e7e9      	b.n	8011780 <_printf_i+0x170>
 80117ac:	6823      	ldr	r3, [r4, #0]
 80117ae:	f023 0320 	bic.w	r3, r3, #32
 80117b2:	6023      	str	r3, [r4, #0]
 80117b4:	e7f6      	b.n	80117a4 <_printf_i+0x194>
 80117b6:	4616      	mov	r6, r2
 80117b8:	e7bd      	b.n	8011736 <_printf_i+0x126>
 80117ba:	6833      	ldr	r3, [r6, #0]
 80117bc:	6825      	ldr	r5, [r4, #0]
 80117be:	6961      	ldr	r1, [r4, #20]
 80117c0:	1d18      	adds	r0, r3, #4
 80117c2:	6030      	str	r0, [r6, #0]
 80117c4:	062e      	lsls	r6, r5, #24
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	d501      	bpl.n	80117ce <_printf_i+0x1be>
 80117ca:	6019      	str	r1, [r3, #0]
 80117cc:	e002      	b.n	80117d4 <_printf_i+0x1c4>
 80117ce:	0668      	lsls	r0, r5, #25
 80117d0:	d5fb      	bpl.n	80117ca <_printf_i+0x1ba>
 80117d2:	8019      	strh	r1, [r3, #0]
 80117d4:	2300      	movs	r3, #0
 80117d6:	6123      	str	r3, [r4, #16]
 80117d8:	4616      	mov	r6, r2
 80117da:	e7bc      	b.n	8011756 <_printf_i+0x146>
 80117dc:	6833      	ldr	r3, [r6, #0]
 80117de:	1d1a      	adds	r2, r3, #4
 80117e0:	6032      	str	r2, [r6, #0]
 80117e2:	681e      	ldr	r6, [r3, #0]
 80117e4:	6862      	ldr	r2, [r4, #4]
 80117e6:	2100      	movs	r1, #0
 80117e8:	4630      	mov	r0, r6
 80117ea:	f7ee fcf9 	bl	80001e0 <memchr>
 80117ee:	b108      	cbz	r0, 80117f4 <_printf_i+0x1e4>
 80117f0:	1b80      	subs	r0, r0, r6
 80117f2:	6060      	str	r0, [r4, #4]
 80117f4:	6863      	ldr	r3, [r4, #4]
 80117f6:	6123      	str	r3, [r4, #16]
 80117f8:	2300      	movs	r3, #0
 80117fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80117fe:	e7aa      	b.n	8011756 <_printf_i+0x146>
 8011800:	6923      	ldr	r3, [r4, #16]
 8011802:	4632      	mov	r2, r6
 8011804:	4649      	mov	r1, r9
 8011806:	4640      	mov	r0, r8
 8011808:	47d0      	blx	sl
 801180a:	3001      	adds	r0, #1
 801180c:	d0ad      	beq.n	801176a <_printf_i+0x15a>
 801180e:	6823      	ldr	r3, [r4, #0]
 8011810:	079b      	lsls	r3, r3, #30
 8011812:	d413      	bmi.n	801183c <_printf_i+0x22c>
 8011814:	68e0      	ldr	r0, [r4, #12]
 8011816:	9b03      	ldr	r3, [sp, #12]
 8011818:	4298      	cmp	r0, r3
 801181a:	bfb8      	it	lt
 801181c:	4618      	movlt	r0, r3
 801181e:	e7a6      	b.n	801176e <_printf_i+0x15e>
 8011820:	2301      	movs	r3, #1
 8011822:	4632      	mov	r2, r6
 8011824:	4649      	mov	r1, r9
 8011826:	4640      	mov	r0, r8
 8011828:	47d0      	blx	sl
 801182a:	3001      	adds	r0, #1
 801182c:	d09d      	beq.n	801176a <_printf_i+0x15a>
 801182e:	3501      	adds	r5, #1
 8011830:	68e3      	ldr	r3, [r4, #12]
 8011832:	9903      	ldr	r1, [sp, #12]
 8011834:	1a5b      	subs	r3, r3, r1
 8011836:	42ab      	cmp	r3, r5
 8011838:	dcf2      	bgt.n	8011820 <_printf_i+0x210>
 801183a:	e7eb      	b.n	8011814 <_printf_i+0x204>
 801183c:	2500      	movs	r5, #0
 801183e:	f104 0619 	add.w	r6, r4, #25
 8011842:	e7f5      	b.n	8011830 <_printf_i+0x220>
 8011844:	08012bfb 	.word	0x08012bfb
 8011848:	08012c0c 	.word	0x08012c0c

0801184c <__sflush_r>:
 801184c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011854:	0716      	lsls	r6, r2, #28
 8011856:	4605      	mov	r5, r0
 8011858:	460c      	mov	r4, r1
 801185a:	d454      	bmi.n	8011906 <__sflush_r+0xba>
 801185c:	684b      	ldr	r3, [r1, #4]
 801185e:	2b00      	cmp	r3, #0
 8011860:	dc02      	bgt.n	8011868 <__sflush_r+0x1c>
 8011862:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011864:	2b00      	cmp	r3, #0
 8011866:	dd48      	ble.n	80118fa <__sflush_r+0xae>
 8011868:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801186a:	2e00      	cmp	r6, #0
 801186c:	d045      	beq.n	80118fa <__sflush_r+0xae>
 801186e:	2300      	movs	r3, #0
 8011870:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011874:	682f      	ldr	r7, [r5, #0]
 8011876:	6a21      	ldr	r1, [r4, #32]
 8011878:	602b      	str	r3, [r5, #0]
 801187a:	d030      	beq.n	80118de <__sflush_r+0x92>
 801187c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801187e:	89a3      	ldrh	r3, [r4, #12]
 8011880:	0759      	lsls	r1, r3, #29
 8011882:	d505      	bpl.n	8011890 <__sflush_r+0x44>
 8011884:	6863      	ldr	r3, [r4, #4]
 8011886:	1ad2      	subs	r2, r2, r3
 8011888:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801188a:	b10b      	cbz	r3, 8011890 <__sflush_r+0x44>
 801188c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801188e:	1ad2      	subs	r2, r2, r3
 8011890:	2300      	movs	r3, #0
 8011892:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011894:	6a21      	ldr	r1, [r4, #32]
 8011896:	4628      	mov	r0, r5
 8011898:	47b0      	blx	r6
 801189a:	1c43      	adds	r3, r0, #1
 801189c:	89a3      	ldrh	r3, [r4, #12]
 801189e:	d106      	bne.n	80118ae <__sflush_r+0x62>
 80118a0:	6829      	ldr	r1, [r5, #0]
 80118a2:	291d      	cmp	r1, #29
 80118a4:	d82b      	bhi.n	80118fe <__sflush_r+0xb2>
 80118a6:	4a2a      	ldr	r2, [pc, #168]	@ (8011950 <__sflush_r+0x104>)
 80118a8:	40ca      	lsrs	r2, r1
 80118aa:	07d6      	lsls	r6, r2, #31
 80118ac:	d527      	bpl.n	80118fe <__sflush_r+0xb2>
 80118ae:	2200      	movs	r2, #0
 80118b0:	6062      	str	r2, [r4, #4]
 80118b2:	04d9      	lsls	r1, r3, #19
 80118b4:	6922      	ldr	r2, [r4, #16]
 80118b6:	6022      	str	r2, [r4, #0]
 80118b8:	d504      	bpl.n	80118c4 <__sflush_r+0x78>
 80118ba:	1c42      	adds	r2, r0, #1
 80118bc:	d101      	bne.n	80118c2 <__sflush_r+0x76>
 80118be:	682b      	ldr	r3, [r5, #0]
 80118c0:	b903      	cbnz	r3, 80118c4 <__sflush_r+0x78>
 80118c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80118c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80118c6:	602f      	str	r7, [r5, #0]
 80118c8:	b1b9      	cbz	r1, 80118fa <__sflush_r+0xae>
 80118ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80118ce:	4299      	cmp	r1, r3
 80118d0:	d002      	beq.n	80118d8 <__sflush_r+0x8c>
 80118d2:	4628      	mov	r0, r5
 80118d4:	f7ff fc8c 	bl	80111f0 <_free_r>
 80118d8:	2300      	movs	r3, #0
 80118da:	6363      	str	r3, [r4, #52]	@ 0x34
 80118dc:	e00d      	b.n	80118fa <__sflush_r+0xae>
 80118de:	2301      	movs	r3, #1
 80118e0:	4628      	mov	r0, r5
 80118e2:	47b0      	blx	r6
 80118e4:	4602      	mov	r2, r0
 80118e6:	1c50      	adds	r0, r2, #1
 80118e8:	d1c9      	bne.n	801187e <__sflush_r+0x32>
 80118ea:	682b      	ldr	r3, [r5, #0]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d0c6      	beq.n	801187e <__sflush_r+0x32>
 80118f0:	2b1d      	cmp	r3, #29
 80118f2:	d001      	beq.n	80118f8 <__sflush_r+0xac>
 80118f4:	2b16      	cmp	r3, #22
 80118f6:	d11e      	bne.n	8011936 <__sflush_r+0xea>
 80118f8:	602f      	str	r7, [r5, #0]
 80118fa:	2000      	movs	r0, #0
 80118fc:	e022      	b.n	8011944 <__sflush_r+0xf8>
 80118fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011902:	b21b      	sxth	r3, r3
 8011904:	e01b      	b.n	801193e <__sflush_r+0xf2>
 8011906:	690f      	ldr	r7, [r1, #16]
 8011908:	2f00      	cmp	r7, #0
 801190a:	d0f6      	beq.n	80118fa <__sflush_r+0xae>
 801190c:	0793      	lsls	r3, r2, #30
 801190e:	680e      	ldr	r6, [r1, #0]
 8011910:	bf08      	it	eq
 8011912:	694b      	ldreq	r3, [r1, #20]
 8011914:	600f      	str	r7, [r1, #0]
 8011916:	bf18      	it	ne
 8011918:	2300      	movne	r3, #0
 801191a:	eba6 0807 	sub.w	r8, r6, r7
 801191e:	608b      	str	r3, [r1, #8]
 8011920:	f1b8 0f00 	cmp.w	r8, #0
 8011924:	dde9      	ble.n	80118fa <__sflush_r+0xae>
 8011926:	6a21      	ldr	r1, [r4, #32]
 8011928:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801192a:	4643      	mov	r3, r8
 801192c:	463a      	mov	r2, r7
 801192e:	4628      	mov	r0, r5
 8011930:	47b0      	blx	r6
 8011932:	2800      	cmp	r0, #0
 8011934:	dc08      	bgt.n	8011948 <__sflush_r+0xfc>
 8011936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801193a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801193e:	81a3      	strh	r3, [r4, #12]
 8011940:	f04f 30ff 	mov.w	r0, #4294967295
 8011944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011948:	4407      	add	r7, r0
 801194a:	eba8 0800 	sub.w	r8, r8, r0
 801194e:	e7e7      	b.n	8011920 <__sflush_r+0xd4>
 8011950:	20400001 	.word	0x20400001

08011954 <_fflush_r>:
 8011954:	b538      	push	{r3, r4, r5, lr}
 8011956:	690b      	ldr	r3, [r1, #16]
 8011958:	4605      	mov	r5, r0
 801195a:	460c      	mov	r4, r1
 801195c:	b913      	cbnz	r3, 8011964 <_fflush_r+0x10>
 801195e:	2500      	movs	r5, #0
 8011960:	4628      	mov	r0, r5
 8011962:	bd38      	pop	{r3, r4, r5, pc}
 8011964:	b118      	cbz	r0, 801196e <_fflush_r+0x1a>
 8011966:	6a03      	ldr	r3, [r0, #32]
 8011968:	b90b      	cbnz	r3, 801196e <_fflush_r+0x1a>
 801196a:	f7ff f9f3 	bl	8010d54 <__sinit>
 801196e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d0f3      	beq.n	801195e <_fflush_r+0xa>
 8011976:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011978:	07d0      	lsls	r0, r2, #31
 801197a:	d404      	bmi.n	8011986 <_fflush_r+0x32>
 801197c:	0599      	lsls	r1, r3, #22
 801197e:	d402      	bmi.n	8011986 <_fflush_r+0x32>
 8011980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011982:	f7ff fbfe 	bl	8011182 <__retarget_lock_acquire_recursive>
 8011986:	4628      	mov	r0, r5
 8011988:	4621      	mov	r1, r4
 801198a:	f7ff ff5f 	bl	801184c <__sflush_r>
 801198e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011990:	07da      	lsls	r2, r3, #31
 8011992:	4605      	mov	r5, r0
 8011994:	d4e4      	bmi.n	8011960 <_fflush_r+0xc>
 8011996:	89a3      	ldrh	r3, [r4, #12]
 8011998:	059b      	lsls	r3, r3, #22
 801199a:	d4e1      	bmi.n	8011960 <_fflush_r+0xc>
 801199c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801199e:	f7ff fbf1 	bl	8011184 <__retarget_lock_release_recursive>
 80119a2:	e7dd      	b.n	8011960 <_fflush_r+0xc>

080119a4 <fiprintf>:
 80119a4:	b40e      	push	{r1, r2, r3}
 80119a6:	b503      	push	{r0, r1, lr}
 80119a8:	4601      	mov	r1, r0
 80119aa:	ab03      	add	r3, sp, #12
 80119ac:	4805      	ldr	r0, [pc, #20]	@ (80119c4 <fiprintf+0x20>)
 80119ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80119b2:	6800      	ldr	r0, [r0, #0]
 80119b4:	9301      	str	r3, [sp, #4]
 80119b6:	f000 f865 	bl	8011a84 <_vfiprintf_r>
 80119ba:	b002      	add	sp, #8
 80119bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80119c0:	b003      	add	sp, #12
 80119c2:	4770      	bx	lr
 80119c4:	20000298 	.word	0x20000298

080119c8 <abort>:
 80119c8:	b508      	push	{r3, lr}
 80119ca:	2006      	movs	r0, #6
 80119cc:	f000 fa2e 	bl	8011e2c <raise>
 80119d0:	2001      	movs	r0, #1
 80119d2:	f7f1 f901 	bl	8002bd8 <_exit>

080119d6 <_realloc_r>:
 80119d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119da:	4607      	mov	r7, r0
 80119dc:	4614      	mov	r4, r2
 80119de:	460d      	mov	r5, r1
 80119e0:	b921      	cbnz	r1, 80119ec <_realloc_r+0x16>
 80119e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119e6:	4611      	mov	r1, r2
 80119e8:	f7ff b818 	b.w	8010a1c <_malloc_r>
 80119ec:	b92a      	cbnz	r2, 80119fa <_realloc_r+0x24>
 80119ee:	f7ff fbff 	bl	80111f0 <_free_r>
 80119f2:	4625      	mov	r5, r4
 80119f4:	4628      	mov	r0, r5
 80119f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119fa:	f000 fa33 	bl	8011e64 <_malloc_usable_size_r>
 80119fe:	4284      	cmp	r4, r0
 8011a00:	4606      	mov	r6, r0
 8011a02:	d802      	bhi.n	8011a0a <_realloc_r+0x34>
 8011a04:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011a08:	d8f4      	bhi.n	80119f4 <_realloc_r+0x1e>
 8011a0a:	4621      	mov	r1, r4
 8011a0c:	4638      	mov	r0, r7
 8011a0e:	f7ff f805 	bl	8010a1c <_malloc_r>
 8011a12:	4680      	mov	r8, r0
 8011a14:	b908      	cbnz	r0, 8011a1a <_realloc_r+0x44>
 8011a16:	4645      	mov	r5, r8
 8011a18:	e7ec      	b.n	80119f4 <_realloc_r+0x1e>
 8011a1a:	42b4      	cmp	r4, r6
 8011a1c:	4622      	mov	r2, r4
 8011a1e:	4629      	mov	r1, r5
 8011a20:	bf28      	it	cs
 8011a22:	4632      	movcs	r2, r6
 8011a24:	f7ff fbb7 	bl	8011196 <memcpy>
 8011a28:	4629      	mov	r1, r5
 8011a2a:	4638      	mov	r0, r7
 8011a2c:	f7ff fbe0 	bl	80111f0 <_free_r>
 8011a30:	e7f1      	b.n	8011a16 <_realloc_r+0x40>

08011a32 <__sfputc_r>:
 8011a32:	6893      	ldr	r3, [r2, #8]
 8011a34:	3b01      	subs	r3, #1
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	b410      	push	{r4}
 8011a3a:	6093      	str	r3, [r2, #8]
 8011a3c:	da08      	bge.n	8011a50 <__sfputc_r+0x1e>
 8011a3e:	6994      	ldr	r4, [r2, #24]
 8011a40:	42a3      	cmp	r3, r4
 8011a42:	db01      	blt.n	8011a48 <__sfputc_r+0x16>
 8011a44:	290a      	cmp	r1, #10
 8011a46:	d103      	bne.n	8011a50 <__sfputc_r+0x1e>
 8011a48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a4c:	f000 b932 	b.w	8011cb4 <__swbuf_r>
 8011a50:	6813      	ldr	r3, [r2, #0]
 8011a52:	1c58      	adds	r0, r3, #1
 8011a54:	6010      	str	r0, [r2, #0]
 8011a56:	7019      	strb	r1, [r3, #0]
 8011a58:	4608      	mov	r0, r1
 8011a5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a5e:	4770      	bx	lr

08011a60 <__sfputs_r>:
 8011a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a62:	4606      	mov	r6, r0
 8011a64:	460f      	mov	r7, r1
 8011a66:	4614      	mov	r4, r2
 8011a68:	18d5      	adds	r5, r2, r3
 8011a6a:	42ac      	cmp	r4, r5
 8011a6c:	d101      	bne.n	8011a72 <__sfputs_r+0x12>
 8011a6e:	2000      	movs	r0, #0
 8011a70:	e007      	b.n	8011a82 <__sfputs_r+0x22>
 8011a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a76:	463a      	mov	r2, r7
 8011a78:	4630      	mov	r0, r6
 8011a7a:	f7ff ffda 	bl	8011a32 <__sfputc_r>
 8011a7e:	1c43      	adds	r3, r0, #1
 8011a80:	d1f3      	bne.n	8011a6a <__sfputs_r+0xa>
 8011a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011a84 <_vfiprintf_r>:
 8011a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a88:	460d      	mov	r5, r1
 8011a8a:	b09d      	sub	sp, #116	@ 0x74
 8011a8c:	4614      	mov	r4, r2
 8011a8e:	4698      	mov	r8, r3
 8011a90:	4606      	mov	r6, r0
 8011a92:	b118      	cbz	r0, 8011a9c <_vfiprintf_r+0x18>
 8011a94:	6a03      	ldr	r3, [r0, #32]
 8011a96:	b90b      	cbnz	r3, 8011a9c <_vfiprintf_r+0x18>
 8011a98:	f7ff f95c 	bl	8010d54 <__sinit>
 8011a9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011a9e:	07d9      	lsls	r1, r3, #31
 8011aa0:	d405      	bmi.n	8011aae <_vfiprintf_r+0x2a>
 8011aa2:	89ab      	ldrh	r3, [r5, #12]
 8011aa4:	059a      	lsls	r2, r3, #22
 8011aa6:	d402      	bmi.n	8011aae <_vfiprintf_r+0x2a>
 8011aa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011aaa:	f7ff fb6a 	bl	8011182 <__retarget_lock_acquire_recursive>
 8011aae:	89ab      	ldrh	r3, [r5, #12]
 8011ab0:	071b      	lsls	r3, r3, #28
 8011ab2:	d501      	bpl.n	8011ab8 <_vfiprintf_r+0x34>
 8011ab4:	692b      	ldr	r3, [r5, #16]
 8011ab6:	b99b      	cbnz	r3, 8011ae0 <_vfiprintf_r+0x5c>
 8011ab8:	4629      	mov	r1, r5
 8011aba:	4630      	mov	r0, r6
 8011abc:	f000 f938 	bl	8011d30 <__swsetup_r>
 8011ac0:	b170      	cbz	r0, 8011ae0 <_vfiprintf_r+0x5c>
 8011ac2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011ac4:	07dc      	lsls	r4, r3, #31
 8011ac6:	d504      	bpl.n	8011ad2 <_vfiprintf_r+0x4e>
 8011ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8011acc:	b01d      	add	sp, #116	@ 0x74
 8011ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ad2:	89ab      	ldrh	r3, [r5, #12]
 8011ad4:	0598      	lsls	r0, r3, #22
 8011ad6:	d4f7      	bmi.n	8011ac8 <_vfiprintf_r+0x44>
 8011ad8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011ada:	f7ff fb53 	bl	8011184 <__retarget_lock_release_recursive>
 8011ade:	e7f3      	b.n	8011ac8 <_vfiprintf_r+0x44>
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ae4:	2320      	movs	r3, #32
 8011ae6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011aea:	f8cd 800c 	str.w	r8, [sp, #12]
 8011aee:	2330      	movs	r3, #48	@ 0x30
 8011af0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011ca0 <_vfiprintf_r+0x21c>
 8011af4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011af8:	f04f 0901 	mov.w	r9, #1
 8011afc:	4623      	mov	r3, r4
 8011afe:	469a      	mov	sl, r3
 8011b00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b04:	b10a      	cbz	r2, 8011b0a <_vfiprintf_r+0x86>
 8011b06:	2a25      	cmp	r2, #37	@ 0x25
 8011b08:	d1f9      	bne.n	8011afe <_vfiprintf_r+0x7a>
 8011b0a:	ebba 0b04 	subs.w	fp, sl, r4
 8011b0e:	d00b      	beq.n	8011b28 <_vfiprintf_r+0xa4>
 8011b10:	465b      	mov	r3, fp
 8011b12:	4622      	mov	r2, r4
 8011b14:	4629      	mov	r1, r5
 8011b16:	4630      	mov	r0, r6
 8011b18:	f7ff ffa2 	bl	8011a60 <__sfputs_r>
 8011b1c:	3001      	adds	r0, #1
 8011b1e:	f000 80a7 	beq.w	8011c70 <_vfiprintf_r+0x1ec>
 8011b22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b24:	445a      	add	r2, fp
 8011b26:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b28:	f89a 3000 	ldrb.w	r3, [sl]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	f000 809f 	beq.w	8011c70 <_vfiprintf_r+0x1ec>
 8011b32:	2300      	movs	r3, #0
 8011b34:	f04f 32ff 	mov.w	r2, #4294967295
 8011b38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b3c:	f10a 0a01 	add.w	sl, sl, #1
 8011b40:	9304      	str	r3, [sp, #16]
 8011b42:	9307      	str	r3, [sp, #28]
 8011b44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011b48:	931a      	str	r3, [sp, #104]	@ 0x68
 8011b4a:	4654      	mov	r4, sl
 8011b4c:	2205      	movs	r2, #5
 8011b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b52:	4853      	ldr	r0, [pc, #332]	@ (8011ca0 <_vfiprintf_r+0x21c>)
 8011b54:	f7ee fb44 	bl	80001e0 <memchr>
 8011b58:	9a04      	ldr	r2, [sp, #16]
 8011b5a:	b9d8      	cbnz	r0, 8011b94 <_vfiprintf_r+0x110>
 8011b5c:	06d1      	lsls	r1, r2, #27
 8011b5e:	bf44      	itt	mi
 8011b60:	2320      	movmi	r3, #32
 8011b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b66:	0713      	lsls	r3, r2, #28
 8011b68:	bf44      	itt	mi
 8011b6a:	232b      	movmi	r3, #43	@ 0x2b
 8011b6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b70:	f89a 3000 	ldrb.w	r3, [sl]
 8011b74:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b76:	d015      	beq.n	8011ba4 <_vfiprintf_r+0x120>
 8011b78:	9a07      	ldr	r2, [sp, #28]
 8011b7a:	4654      	mov	r4, sl
 8011b7c:	2000      	movs	r0, #0
 8011b7e:	f04f 0c0a 	mov.w	ip, #10
 8011b82:	4621      	mov	r1, r4
 8011b84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b88:	3b30      	subs	r3, #48	@ 0x30
 8011b8a:	2b09      	cmp	r3, #9
 8011b8c:	d94b      	bls.n	8011c26 <_vfiprintf_r+0x1a2>
 8011b8e:	b1b0      	cbz	r0, 8011bbe <_vfiprintf_r+0x13a>
 8011b90:	9207      	str	r2, [sp, #28]
 8011b92:	e014      	b.n	8011bbe <_vfiprintf_r+0x13a>
 8011b94:	eba0 0308 	sub.w	r3, r0, r8
 8011b98:	fa09 f303 	lsl.w	r3, r9, r3
 8011b9c:	4313      	orrs	r3, r2
 8011b9e:	9304      	str	r3, [sp, #16]
 8011ba0:	46a2      	mov	sl, r4
 8011ba2:	e7d2      	b.n	8011b4a <_vfiprintf_r+0xc6>
 8011ba4:	9b03      	ldr	r3, [sp, #12]
 8011ba6:	1d19      	adds	r1, r3, #4
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	9103      	str	r1, [sp, #12]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	bfbb      	ittet	lt
 8011bb0:	425b      	neglt	r3, r3
 8011bb2:	f042 0202 	orrlt.w	r2, r2, #2
 8011bb6:	9307      	strge	r3, [sp, #28]
 8011bb8:	9307      	strlt	r3, [sp, #28]
 8011bba:	bfb8      	it	lt
 8011bbc:	9204      	strlt	r2, [sp, #16]
 8011bbe:	7823      	ldrb	r3, [r4, #0]
 8011bc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8011bc2:	d10a      	bne.n	8011bda <_vfiprintf_r+0x156>
 8011bc4:	7863      	ldrb	r3, [r4, #1]
 8011bc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8011bc8:	d132      	bne.n	8011c30 <_vfiprintf_r+0x1ac>
 8011bca:	9b03      	ldr	r3, [sp, #12]
 8011bcc:	1d1a      	adds	r2, r3, #4
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	9203      	str	r2, [sp, #12]
 8011bd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011bd6:	3402      	adds	r4, #2
 8011bd8:	9305      	str	r3, [sp, #20]
 8011bda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011cb0 <_vfiprintf_r+0x22c>
 8011bde:	7821      	ldrb	r1, [r4, #0]
 8011be0:	2203      	movs	r2, #3
 8011be2:	4650      	mov	r0, sl
 8011be4:	f7ee fafc 	bl	80001e0 <memchr>
 8011be8:	b138      	cbz	r0, 8011bfa <_vfiprintf_r+0x176>
 8011bea:	9b04      	ldr	r3, [sp, #16]
 8011bec:	eba0 000a 	sub.w	r0, r0, sl
 8011bf0:	2240      	movs	r2, #64	@ 0x40
 8011bf2:	4082      	lsls	r2, r0
 8011bf4:	4313      	orrs	r3, r2
 8011bf6:	3401      	adds	r4, #1
 8011bf8:	9304      	str	r3, [sp, #16]
 8011bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bfe:	4829      	ldr	r0, [pc, #164]	@ (8011ca4 <_vfiprintf_r+0x220>)
 8011c00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011c04:	2206      	movs	r2, #6
 8011c06:	f7ee faeb 	bl	80001e0 <memchr>
 8011c0a:	2800      	cmp	r0, #0
 8011c0c:	d03f      	beq.n	8011c8e <_vfiprintf_r+0x20a>
 8011c0e:	4b26      	ldr	r3, [pc, #152]	@ (8011ca8 <_vfiprintf_r+0x224>)
 8011c10:	bb1b      	cbnz	r3, 8011c5a <_vfiprintf_r+0x1d6>
 8011c12:	9b03      	ldr	r3, [sp, #12]
 8011c14:	3307      	adds	r3, #7
 8011c16:	f023 0307 	bic.w	r3, r3, #7
 8011c1a:	3308      	adds	r3, #8
 8011c1c:	9303      	str	r3, [sp, #12]
 8011c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c20:	443b      	add	r3, r7
 8011c22:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c24:	e76a      	b.n	8011afc <_vfiprintf_r+0x78>
 8011c26:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c2a:	460c      	mov	r4, r1
 8011c2c:	2001      	movs	r0, #1
 8011c2e:	e7a8      	b.n	8011b82 <_vfiprintf_r+0xfe>
 8011c30:	2300      	movs	r3, #0
 8011c32:	3401      	adds	r4, #1
 8011c34:	9305      	str	r3, [sp, #20]
 8011c36:	4619      	mov	r1, r3
 8011c38:	f04f 0c0a 	mov.w	ip, #10
 8011c3c:	4620      	mov	r0, r4
 8011c3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c42:	3a30      	subs	r2, #48	@ 0x30
 8011c44:	2a09      	cmp	r2, #9
 8011c46:	d903      	bls.n	8011c50 <_vfiprintf_r+0x1cc>
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d0c6      	beq.n	8011bda <_vfiprintf_r+0x156>
 8011c4c:	9105      	str	r1, [sp, #20]
 8011c4e:	e7c4      	b.n	8011bda <_vfiprintf_r+0x156>
 8011c50:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c54:	4604      	mov	r4, r0
 8011c56:	2301      	movs	r3, #1
 8011c58:	e7f0      	b.n	8011c3c <_vfiprintf_r+0x1b8>
 8011c5a:	ab03      	add	r3, sp, #12
 8011c5c:	9300      	str	r3, [sp, #0]
 8011c5e:	462a      	mov	r2, r5
 8011c60:	4b12      	ldr	r3, [pc, #72]	@ (8011cac <_vfiprintf_r+0x228>)
 8011c62:	a904      	add	r1, sp, #16
 8011c64:	4630      	mov	r0, r6
 8011c66:	f3af 8000 	nop.w
 8011c6a:	4607      	mov	r7, r0
 8011c6c:	1c78      	adds	r0, r7, #1
 8011c6e:	d1d6      	bne.n	8011c1e <_vfiprintf_r+0x19a>
 8011c70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011c72:	07d9      	lsls	r1, r3, #31
 8011c74:	d405      	bmi.n	8011c82 <_vfiprintf_r+0x1fe>
 8011c76:	89ab      	ldrh	r3, [r5, #12]
 8011c78:	059a      	lsls	r2, r3, #22
 8011c7a:	d402      	bmi.n	8011c82 <_vfiprintf_r+0x1fe>
 8011c7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011c7e:	f7ff fa81 	bl	8011184 <__retarget_lock_release_recursive>
 8011c82:	89ab      	ldrh	r3, [r5, #12]
 8011c84:	065b      	lsls	r3, r3, #25
 8011c86:	f53f af1f 	bmi.w	8011ac8 <_vfiprintf_r+0x44>
 8011c8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011c8c:	e71e      	b.n	8011acc <_vfiprintf_r+0x48>
 8011c8e:	ab03      	add	r3, sp, #12
 8011c90:	9300      	str	r3, [sp, #0]
 8011c92:	462a      	mov	r2, r5
 8011c94:	4b05      	ldr	r3, [pc, #20]	@ (8011cac <_vfiprintf_r+0x228>)
 8011c96:	a904      	add	r1, sp, #16
 8011c98:	4630      	mov	r0, r6
 8011c9a:	f7ff fcb9 	bl	8011610 <_printf_i>
 8011c9e:	e7e4      	b.n	8011c6a <_vfiprintf_r+0x1e6>
 8011ca0:	08012bea 	.word	0x08012bea
 8011ca4:	08012bf4 	.word	0x08012bf4
 8011ca8:	00000000 	.word	0x00000000
 8011cac:	08011a61 	.word	0x08011a61
 8011cb0:	08012bf0 	.word	0x08012bf0

08011cb4 <__swbuf_r>:
 8011cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cb6:	460e      	mov	r6, r1
 8011cb8:	4614      	mov	r4, r2
 8011cba:	4605      	mov	r5, r0
 8011cbc:	b118      	cbz	r0, 8011cc6 <__swbuf_r+0x12>
 8011cbe:	6a03      	ldr	r3, [r0, #32]
 8011cc0:	b90b      	cbnz	r3, 8011cc6 <__swbuf_r+0x12>
 8011cc2:	f7ff f847 	bl	8010d54 <__sinit>
 8011cc6:	69a3      	ldr	r3, [r4, #24]
 8011cc8:	60a3      	str	r3, [r4, #8]
 8011cca:	89a3      	ldrh	r3, [r4, #12]
 8011ccc:	071a      	lsls	r2, r3, #28
 8011cce:	d501      	bpl.n	8011cd4 <__swbuf_r+0x20>
 8011cd0:	6923      	ldr	r3, [r4, #16]
 8011cd2:	b943      	cbnz	r3, 8011ce6 <__swbuf_r+0x32>
 8011cd4:	4621      	mov	r1, r4
 8011cd6:	4628      	mov	r0, r5
 8011cd8:	f000 f82a 	bl	8011d30 <__swsetup_r>
 8011cdc:	b118      	cbz	r0, 8011ce6 <__swbuf_r+0x32>
 8011cde:	f04f 37ff 	mov.w	r7, #4294967295
 8011ce2:	4638      	mov	r0, r7
 8011ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ce6:	6823      	ldr	r3, [r4, #0]
 8011ce8:	6922      	ldr	r2, [r4, #16]
 8011cea:	1a98      	subs	r0, r3, r2
 8011cec:	6963      	ldr	r3, [r4, #20]
 8011cee:	b2f6      	uxtb	r6, r6
 8011cf0:	4283      	cmp	r3, r0
 8011cf2:	4637      	mov	r7, r6
 8011cf4:	dc05      	bgt.n	8011d02 <__swbuf_r+0x4e>
 8011cf6:	4621      	mov	r1, r4
 8011cf8:	4628      	mov	r0, r5
 8011cfa:	f7ff fe2b 	bl	8011954 <_fflush_r>
 8011cfe:	2800      	cmp	r0, #0
 8011d00:	d1ed      	bne.n	8011cde <__swbuf_r+0x2a>
 8011d02:	68a3      	ldr	r3, [r4, #8]
 8011d04:	3b01      	subs	r3, #1
 8011d06:	60a3      	str	r3, [r4, #8]
 8011d08:	6823      	ldr	r3, [r4, #0]
 8011d0a:	1c5a      	adds	r2, r3, #1
 8011d0c:	6022      	str	r2, [r4, #0]
 8011d0e:	701e      	strb	r6, [r3, #0]
 8011d10:	6962      	ldr	r2, [r4, #20]
 8011d12:	1c43      	adds	r3, r0, #1
 8011d14:	429a      	cmp	r2, r3
 8011d16:	d004      	beq.n	8011d22 <__swbuf_r+0x6e>
 8011d18:	89a3      	ldrh	r3, [r4, #12]
 8011d1a:	07db      	lsls	r3, r3, #31
 8011d1c:	d5e1      	bpl.n	8011ce2 <__swbuf_r+0x2e>
 8011d1e:	2e0a      	cmp	r6, #10
 8011d20:	d1df      	bne.n	8011ce2 <__swbuf_r+0x2e>
 8011d22:	4621      	mov	r1, r4
 8011d24:	4628      	mov	r0, r5
 8011d26:	f7ff fe15 	bl	8011954 <_fflush_r>
 8011d2a:	2800      	cmp	r0, #0
 8011d2c:	d0d9      	beq.n	8011ce2 <__swbuf_r+0x2e>
 8011d2e:	e7d6      	b.n	8011cde <__swbuf_r+0x2a>

08011d30 <__swsetup_r>:
 8011d30:	b538      	push	{r3, r4, r5, lr}
 8011d32:	4b29      	ldr	r3, [pc, #164]	@ (8011dd8 <__swsetup_r+0xa8>)
 8011d34:	4605      	mov	r5, r0
 8011d36:	6818      	ldr	r0, [r3, #0]
 8011d38:	460c      	mov	r4, r1
 8011d3a:	b118      	cbz	r0, 8011d44 <__swsetup_r+0x14>
 8011d3c:	6a03      	ldr	r3, [r0, #32]
 8011d3e:	b90b      	cbnz	r3, 8011d44 <__swsetup_r+0x14>
 8011d40:	f7ff f808 	bl	8010d54 <__sinit>
 8011d44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d48:	0719      	lsls	r1, r3, #28
 8011d4a:	d422      	bmi.n	8011d92 <__swsetup_r+0x62>
 8011d4c:	06da      	lsls	r2, r3, #27
 8011d4e:	d407      	bmi.n	8011d60 <__swsetup_r+0x30>
 8011d50:	2209      	movs	r2, #9
 8011d52:	602a      	str	r2, [r5, #0]
 8011d54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d58:	81a3      	strh	r3, [r4, #12]
 8011d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8011d5e:	e033      	b.n	8011dc8 <__swsetup_r+0x98>
 8011d60:	0758      	lsls	r0, r3, #29
 8011d62:	d512      	bpl.n	8011d8a <__swsetup_r+0x5a>
 8011d64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011d66:	b141      	cbz	r1, 8011d7a <__swsetup_r+0x4a>
 8011d68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011d6c:	4299      	cmp	r1, r3
 8011d6e:	d002      	beq.n	8011d76 <__swsetup_r+0x46>
 8011d70:	4628      	mov	r0, r5
 8011d72:	f7ff fa3d 	bl	80111f0 <_free_r>
 8011d76:	2300      	movs	r3, #0
 8011d78:	6363      	str	r3, [r4, #52]	@ 0x34
 8011d7a:	89a3      	ldrh	r3, [r4, #12]
 8011d7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011d80:	81a3      	strh	r3, [r4, #12]
 8011d82:	2300      	movs	r3, #0
 8011d84:	6063      	str	r3, [r4, #4]
 8011d86:	6923      	ldr	r3, [r4, #16]
 8011d88:	6023      	str	r3, [r4, #0]
 8011d8a:	89a3      	ldrh	r3, [r4, #12]
 8011d8c:	f043 0308 	orr.w	r3, r3, #8
 8011d90:	81a3      	strh	r3, [r4, #12]
 8011d92:	6923      	ldr	r3, [r4, #16]
 8011d94:	b94b      	cbnz	r3, 8011daa <__swsetup_r+0x7a>
 8011d96:	89a3      	ldrh	r3, [r4, #12]
 8011d98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011da0:	d003      	beq.n	8011daa <__swsetup_r+0x7a>
 8011da2:	4621      	mov	r1, r4
 8011da4:	4628      	mov	r0, r5
 8011da6:	f000 f88b 	bl	8011ec0 <__smakebuf_r>
 8011daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dae:	f013 0201 	ands.w	r2, r3, #1
 8011db2:	d00a      	beq.n	8011dca <__swsetup_r+0x9a>
 8011db4:	2200      	movs	r2, #0
 8011db6:	60a2      	str	r2, [r4, #8]
 8011db8:	6962      	ldr	r2, [r4, #20]
 8011dba:	4252      	negs	r2, r2
 8011dbc:	61a2      	str	r2, [r4, #24]
 8011dbe:	6922      	ldr	r2, [r4, #16]
 8011dc0:	b942      	cbnz	r2, 8011dd4 <__swsetup_r+0xa4>
 8011dc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011dc6:	d1c5      	bne.n	8011d54 <__swsetup_r+0x24>
 8011dc8:	bd38      	pop	{r3, r4, r5, pc}
 8011dca:	0799      	lsls	r1, r3, #30
 8011dcc:	bf58      	it	pl
 8011dce:	6962      	ldrpl	r2, [r4, #20]
 8011dd0:	60a2      	str	r2, [r4, #8]
 8011dd2:	e7f4      	b.n	8011dbe <__swsetup_r+0x8e>
 8011dd4:	2000      	movs	r0, #0
 8011dd6:	e7f7      	b.n	8011dc8 <__swsetup_r+0x98>
 8011dd8:	20000298 	.word	0x20000298

08011ddc <_raise_r>:
 8011ddc:	291f      	cmp	r1, #31
 8011dde:	b538      	push	{r3, r4, r5, lr}
 8011de0:	4605      	mov	r5, r0
 8011de2:	460c      	mov	r4, r1
 8011de4:	d904      	bls.n	8011df0 <_raise_r+0x14>
 8011de6:	2316      	movs	r3, #22
 8011de8:	6003      	str	r3, [r0, #0]
 8011dea:	f04f 30ff 	mov.w	r0, #4294967295
 8011dee:	bd38      	pop	{r3, r4, r5, pc}
 8011df0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011df2:	b112      	cbz	r2, 8011dfa <_raise_r+0x1e>
 8011df4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011df8:	b94b      	cbnz	r3, 8011e0e <_raise_r+0x32>
 8011dfa:	4628      	mov	r0, r5
 8011dfc:	f000 f830 	bl	8011e60 <_getpid_r>
 8011e00:	4622      	mov	r2, r4
 8011e02:	4601      	mov	r1, r0
 8011e04:	4628      	mov	r0, r5
 8011e06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e0a:	f000 b817 	b.w	8011e3c <_kill_r>
 8011e0e:	2b01      	cmp	r3, #1
 8011e10:	d00a      	beq.n	8011e28 <_raise_r+0x4c>
 8011e12:	1c59      	adds	r1, r3, #1
 8011e14:	d103      	bne.n	8011e1e <_raise_r+0x42>
 8011e16:	2316      	movs	r3, #22
 8011e18:	6003      	str	r3, [r0, #0]
 8011e1a:	2001      	movs	r0, #1
 8011e1c:	e7e7      	b.n	8011dee <_raise_r+0x12>
 8011e1e:	2100      	movs	r1, #0
 8011e20:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011e24:	4620      	mov	r0, r4
 8011e26:	4798      	blx	r3
 8011e28:	2000      	movs	r0, #0
 8011e2a:	e7e0      	b.n	8011dee <_raise_r+0x12>

08011e2c <raise>:
 8011e2c:	4b02      	ldr	r3, [pc, #8]	@ (8011e38 <raise+0xc>)
 8011e2e:	4601      	mov	r1, r0
 8011e30:	6818      	ldr	r0, [r3, #0]
 8011e32:	f7ff bfd3 	b.w	8011ddc <_raise_r>
 8011e36:	bf00      	nop
 8011e38:	20000298 	.word	0x20000298

08011e3c <_kill_r>:
 8011e3c:	b538      	push	{r3, r4, r5, lr}
 8011e3e:	4d07      	ldr	r5, [pc, #28]	@ (8011e5c <_kill_r+0x20>)
 8011e40:	2300      	movs	r3, #0
 8011e42:	4604      	mov	r4, r0
 8011e44:	4608      	mov	r0, r1
 8011e46:	4611      	mov	r1, r2
 8011e48:	602b      	str	r3, [r5, #0]
 8011e4a:	f7f0 feb5 	bl	8002bb8 <_kill>
 8011e4e:	1c43      	adds	r3, r0, #1
 8011e50:	d102      	bne.n	8011e58 <_kill_r+0x1c>
 8011e52:	682b      	ldr	r3, [r5, #0]
 8011e54:	b103      	cbz	r3, 8011e58 <_kill_r+0x1c>
 8011e56:	6023      	str	r3, [r4, #0]
 8011e58:	bd38      	pop	{r3, r4, r5, pc}
 8011e5a:	bf00      	nop
 8011e5c:	20011658 	.word	0x20011658

08011e60 <_getpid_r>:
 8011e60:	f7f0 bea2 	b.w	8002ba8 <_getpid>

08011e64 <_malloc_usable_size_r>:
 8011e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e68:	1f18      	subs	r0, r3, #4
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	bfbc      	itt	lt
 8011e6e:	580b      	ldrlt	r3, [r1, r0]
 8011e70:	18c0      	addlt	r0, r0, r3
 8011e72:	4770      	bx	lr

08011e74 <__swhatbuf_r>:
 8011e74:	b570      	push	{r4, r5, r6, lr}
 8011e76:	460c      	mov	r4, r1
 8011e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e7c:	2900      	cmp	r1, #0
 8011e7e:	b096      	sub	sp, #88	@ 0x58
 8011e80:	4615      	mov	r5, r2
 8011e82:	461e      	mov	r6, r3
 8011e84:	da0d      	bge.n	8011ea2 <__swhatbuf_r+0x2e>
 8011e86:	89a3      	ldrh	r3, [r4, #12]
 8011e88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011e8c:	f04f 0100 	mov.w	r1, #0
 8011e90:	bf14      	ite	ne
 8011e92:	2340      	movne	r3, #64	@ 0x40
 8011e94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011e98:	2000      	movs	r0, #0
 8011e9a:	6031      	str	r1, [r6, #0]
 8011e9c:	602b      	str	r3, [r5, #0]
 8011e9e:	b016      	add	sp, #88	@ 0x58
 8011ea0:	bd70      	pop	{r4, r5, r6, pc}
 8011ea2:	466a      	mov	r2, sp
 8011ea4:	f000 f848 	bl	8011f38 <_fstat_r>
 8011ea8:	2800      	cmp	r0, #0
 8011eaa:	dbec      	blt.n	8011e86 <__swhatbuf_r+0x12>
 8011eac:	9901      	ldr	r1, [sp, #4]
 8011eae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011eb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011eb6:	4259      	negs	r1, r3
 8011eb8:	4159      	adcs	r1, r3
 8011eba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011ebe:	e7eb      	b.n	8011e98 <__swhatbuf_r+0x24>

08011ec0 <__smakebuf_r>:
 8011ec0:	898b      	ldrh	r3, [r1, #12]
 8011ec2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ec4:	079d      	lsls	r5, r3, #30
 8011ec6:	4606      	mov	r6, r0
 8011ec8:	460c      	mov	r4, r1
 8011eca:	d507      	bpl.n	8011edc <__smakebuf_r+0x1c>
 8011ecc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011ed0:	6023      	str	r3, [r4, #0]
 8011ed2:	6123      	str	r3, [r4, #16]
 8011ed4:	2301      	movs	r3, #1
 8011ed6:	6163      	str	r3, [r4, #20]
 8011ed8:	b003      	add	sp, #12
 8011eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011edc:	ab01      	add	r3, sp, #4
 8011ede:	466a      	mov	r2, sp
 8011ee0:	f7ff ffc8 	bl	8011e74 <__swhatbuf_r>
 8011ee4:	9f00      	ldr	r7, [sp, #0]
 8011ee6:	4605      	mov	r5, r0
 8011ee8:	4639      	mov	r1, r7
 8011eea:	4630      	mov	r0, r6
 8011eec:	f7fe fd96 	bl	8010a1c <_malloc_r>
 8011ef0:	b948      	cbnz	r0, 8011f06 <__smakebuf_r+0x46>
 8011ef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ef6:	059a      	lsls	r2, r3, #22
 8011ef8:	d4ee      	bmi.n	8011ed8 <__smakebuf_r+0x18>
 8011efa:	f023 0303 	bic.w	r3, r3, #3
 8011efe:	f043 0302 	orr.w	r3, r3, #2
 8011f02:	81a3      	strh	r3, [r4, #12]
 8011f04:	e7e2      	b.n	8011ecc <__smakebuf_r+0xc>
 8011f06:	89a3      	ldrh	r3, [r4, #12]
 8011f08:	6020      	str	r0, [r4, #0]
 8011f0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f0e:	81a3      	strh	r3, [r4, #12]
 8011f10:	9b01      	ldr	r3, [sp, #4]
 8011f12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011f16:	b15b      	cbz	r3, 8011f30 <__smakebuf_r+0x70>
 8011f18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f1c:	4630      	mov	r0, r6
 8011f1e:	f000 f81d 	bl	8011f5c <_isatty_r>
 8011f22:	b128      	cbz	r0, 8011f30 <__smakebuf_r+0x70>
 8011f24:	89a3      	ldrh	r3, [r4, #12]
 8011f26:	f023 0303 	bic.w	r3, r3, #3
 8011f2a:	f043 0301 	orr.w	r3, r3, #1
 8011f2e:	81a3      	strh	r3, [r4, #12]
 8011f30:	89a3      	ldrh	r3, [r4, #12]
 8011f32:	431d      	orrs	r5, r3
 8011f34:	81a5      	strh	r5, [r4, #12]
 8011f36:	e7cf      	b.n	8011ed8 <__smakebuf_r+0x18>

08011f38 <_fstat_r>:
 8011f38:	b538      	push	{r3, r4, r5, lr}
 8011f3a:	4d07      	ldr	r5, [pc, #28]	@ (8011f58 <_fstat_r+0x20>)
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	4604      	mov	r4, r0
 8011f40:	4608      	mov	r0, r1
 8011f42:	4611      	mov	r1, r2
 8011f44:	602b      	str	r3, [r5, #0]
 8011f46:	f7f0 fe97 	bl	8002c78 <_fstat>
 8011f4a:	1c43      	adds	r3, r0, #1
 8011f4c:	d102      	bne.n	8011f54 <_fstat_r+0x1c>
 8011f4e:	682b      	ldr	r3, [r5, #0]
 8011f50:	b103      	cbz	r3, 8011f54 <_fstat_r+0x1c>
 8011f52:	6023      	str	r3, [r4, #0]
 8011f54:	bd38      	pop	{r3, r4, r5, pc}
 8011f56:	bf00      	nop
 8011f58:	20011658 	.word	0x20011658

08011f5c <_isatty_r>:
 8011f5c:	b538      	push	{r3, r4, r5, lr}
 8011f5e:	4d06      	ldr	r5, [pc, #24]	@ (8011f78 <_isatty_r+0x1c>)
 8011f60:	2300      	movs	r3, #0
 8011f62:	4604      	mov	r4, r0
 8011f64:	4608      	mov	r0, r1
 8011f66:	602b      	str	r3, [r5, #0]
 8011f68:	f7f0 fe96 	bl	8002c98 <_isatty>
 8011f6c:	1c43      	adds	r3, r0, #1
 8011f6e:	d102      	bne.n	8011f76 <_isatty_r+0x1a>
 8011f70:	682b      	ldr	r3, [r5, #0]
 8011f72:	b103      	cbz	r3, 8011f76 <_isatty_r+0x1a>
 8011f74:	6023      	str	r3, [r4, #0]
 8011f76:	bd38      	pop	{r3, r4, r5, pc}
 8011f78:	20011658 	.word	0x20011658

08011f7c <_init>:
 8011f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f7e:	bf00      	nop
 8011f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f82:	bc08      	pop	{r3}
 8011f84:	469e      	mov	lr, r3
 8011f86:	4770      	bx	lr

08011f88 <_fini>:
 8011f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f8a:	bf00      	nop
 8011f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f8e:	bc08      	pop	{r3}
 8011f90:	469e      	mov	lr, r3
 8011f92:	4770      	bx	lr
